2024-09-27 23:34:30.547 | INFO     | dynamic_database:generate_merged_dataset:442 - Merged and exported corpus to /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_zeta_3_irrational_914712200e463
cfc97fe37e929d518dd58806a38
2024-09-27 23:34:30.568 | INFO     | dynamic_database:generate_merged_dataset:445 - Exported traced files to /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_zeta_3_irrational_914712200e463cfc97
fe37e929d518dd58806a38
2024-09-27 23:34:30.570 | INFO     | dynamic_database:generate_merged_dataset:448 - Exported metadata to /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_zeta_3_irrational_914712200e463cfc97fe37
e929d518dd58806a38
2024-09-27 23:34:30.589 | INFO     | __main__:main:1802 - All GPUs
2024-09-27 23:34:30.589 | INFO     | __main__:main:2037 - Starting the prover
2024-09-27 23:34:30.589 | INFO     | prover.proof_search:__init__:407 - Inside __init__
2024-09-27 23:34:30.589 | INFO     | prover.proof_search:__init__:412 - ckpt_path is not None
2024-09-27 23:34:30.589 | INFO     | prover.proof_search:__init__:427 - Using RAG
/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/lightning_fabric/utilities/cloud_io.py:57: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default
 pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more
details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be load
ed via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of
the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
Lightning automatically upgraded your loaded checkpoint from v0.0.0 to v2.2.4. To apply the upgrade to your files permanently, run `python -m pytorch_lightning.utilities.upgrade_checkpoint ../model_lightning.ckpt`
2024-09-27 23:34:31.258 | INFO     | generator.model:__init__:124 - Retriever checkpoint path: /data/yingzi_ma/lean_project/checkpoints/mathlib4_29dcec074de168ac2bf835a77ef68bbe069194c5.ckpt
2024-09-27 23:34:31.258 | INFO     | generator.model:__init__:138 - Loading the retriever from /data/yingzi_ma/lean_project/checkpoints/mathlib4_29dcec074de168ac2bf835a77ef68bbe069194c5.ckpt
Lightning automatically upgraded your loaded checkpoint from v0.0.0 to v2.2.4. To apply the upgrade to your files permanently, run `python -m pytorch_lightning.utilities.upgrade_checkpoint ../checkpoints/mathlib4_29dc
ec074de168ac2bf835a77ef68bbe069194c5.ckpt`
2024-09-27 23:34:33.288 | INFO     | generator.model:__init__:151 - RetrievalAugmentedGenerator initialized
/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/pytorch_lightning/core/saving.py:184: Found keys that are in the model state dict but not in the checkpoint: ['retriever.encoder.shared.weight', 'r
etriever.encoder.encoder.embed_tokens.weight', 'retriever.encoder.encoder.block.0.layer.0.SelfAttention.q.weight', 'retriever.encoder.encoder.block.0.layer.0.SelfAttention.k.weight', 'retriever.encoder.encoder.block.0
.layer.0.SelfAttention.v.weight', 'retriever.encoder.encoder.block.0.layer.0.SelfAttention.o.weight', 'retriever.encoder.encoder.block.0.layer.0.SelfAttention.relative_attention_bias.weight', 'retriever.encoder.encode
r.block.0.layer.0.layer_norm.weight', 'retriever.encoder.encoder.block.0.layer.1.DenseReluDense.wi_0.weight', 'retriever.encoder.encoder.block.0.layer.1.DenseReluDense.wi_1.weight', 'retriever.encoder.encoder.block.0.
layer.1.DenseReluDense.wo.weight', 'retriever.encoder.encoder.block.0.layer.1.layer_norm.weight', 'retriever.encoder.encoder.block.1.layer.0.SelfAttention.q.weight', 'retriever.encoder.encoder.block.1.layer.0.SelfAtte
ntion.k.weight', 'retriever.encoder.encoder.block.1.layer.0.SelfAttention.v.weight', 'retriever.encoder.encoder.block.1.layer.0.SelfAttention.o.weight', 'retriever.encoder.encoder.block.1.layer.0.layer_norm.weight', '
retriever.encoder.encoder.block.1.layer.1.DenseReluDense.wi_0.weight', 'retriever.encoder.encoder.block.1.layer.1.DenseReluDense.wi_1.weight', 'retriever.encoder.encoder.block.1.layer.1.DenseReluDense.wo.weight', 'ret
riever.encoder.encoder.block.1.layer.1.layer_norm.weight', 'retriever.encoder.encoder.block.2.layer.0.SelfAttention.q.weight', 'retriever.encoder.encoder.block.2.layer.0.SelfAttention.k.weight', 'retriever.encoder.enc
oder.block.2.layer.0.SelfAttention.v.weight', 'retriever.encoder.encoder.block.2.layer.0.SelfAttention.o.weight', 'retriever.encoder.encoder.block.2.layer.0.layer_norm.weight', 'retriever.encoder.encoder.block.2.layer
.1.DenseReluDense.wi_0.weight', 'retriever.encoder.encoder.block.2.layer.1.DenseReluDense.wi_1.weight', 'retriever.encoder.encoder.block.2.layer.1.DenseReluDense.wo.weight', 'retriever.encoder.encoder.block.2.layer.1.
layer_norm.weight', 'retriever.encoder.encoder.block.3.layer.0.SelfAttention.q.weight', 'retriever.encoder.encoder.block.3.layer.0.SelfAttention.k.weight', 'retriever.encoder.encoder.block.3.layer.0.SelfAttention.v.we
ight', 'retriever.encoder.encoder.block.3.layer.0.SelfAttention.o.weight', 'retriever.encoder.encoder.block.3.layer.0.layer_norm.weight', 'retriever.encoder.encoder.block.3.layer.1.DenseReluDense.wi_0.weight', 'retrie
ver.encoder.encoder.block.3.layer.1.DenseReluDense.wi_1.weight', 'retriever.encoder.encoder.block.3.layer.1.DenseReluDense.wo.weight', 'retriever.encoder.encoder.block.3.layer.1.layer_norm.weight', 'retriever.encoder.
encoder.block.4.layer.0.SelfAttention.q.weight', 'retriever.encoder.encoder.block.4.layer.0.SelfAttention.k.weight', 'retriever.encoder.encoder.block.4.layer.0.SelfAttention.v.weight', 'retriever.encoder.encoder.block
.4.layer.0.SelfAttention.o.weight', 'retriever.encoder.encoder.block.4.layer.0.layer_norm.weight', 'retriever.encoder.encoder.block.4.layer.1.DenseReluDense.wi_0.weight', 'retriever.encoder.encoder.block.4.layer.1.Den
seReluDense.wi_1.weight', 'retriever.encoder.encoder.block.4.layer.1.DenseReluDense.wo.weight', 'retriever.encoder.encoder.block.4.layer.1.layer_norm.weight', 'retriever.encoder.encoder.block.5.layer.0.SelfAttention.q
.weight', 'retriever.encoder.encoder.block.5.layer.0.SelfAttention.k.weight', 'retriever.encoder.encoder.block.5.layer.0.SelfAttention.v.weight', 'retriever.encoder.encoder.block.5.layer.0.SelfAttention.o.weight', 're
triever.encoder.encoder.block.5.layer.0.layer_norm.weight', 'retriever.encoder.encoder.block.5.layer.1.DenseReluDense.wi_0.weight', 'retriever.encoder.encoder.block.5.layer.1.DenseReluDense.wi_1.weight', 'retriever.en
coder.encoder.block.5.layer.1.DenseReluDense.wo.weight', 'retriever.encoder.encoder.block.5.layer.1.layer_norm.weight', 'retriever.encoder.encoder.block.6.layer.0.SelfAttention.q.weight', 'retriever.encoder.encoder.bl
ock.6.layer.0.SelfAttention.k.weight', 'retriever.encoder.encoder.block.6.layer.0.SelfAttention.v.weight', 'retriever.encoder.encoder.block.6.layer.0.SelfAttention.o.weight', 'retriever.encoder.encoder.block.6.layer.0
.layer_norm.weight', 'retriever.encoder.encoder.block.6.layer.1.DenseReluDense.wi_0.weight', 'retriever.encoder.encoder.block.6.layer.1.DenseReluDense.wi_1.weight', 'retriever.encoder.encoder.block.6.layer.1.DenseRelu
Dense.wo.weight', 'retriever.encoder.encoder.block.6.layer.1.layer_norm.weight', 'retriever.encoder.encoder.block.7.layer.0.SelfAttention.q.weight', 'retriever.encoder.encoder.block.7.layer.0.SelfAttention.k.weight',
'retriever.encoder.encoder.block.7.layer.0.SelfAttention.v.weight', 'retriever.encoder.encoder.block.7.layer.0.SelfAttention.o.weight', 'retriever.encoder.encoder.block.7.layer.0.layer_norm.weight', 'retriever.encoder
.encoder.block.7.layer.1.DenseReluDense.wi_0.weight', 'retriever.encoder.encoder.block.7.layer.1.DenseReluDense.wi_1.weight', 'retriever.encoder.encoder.block.7.layer.1.DenseReluDense.wo.weight', 'retriever.encoder.en
coder.block.7.layer.1.layer_norm.weight', 'retriever.encoder.encoder.block.8.layer.0.SelfAttention.q.weight', 'retriever.encoder.encoder.block.8.layer.0.SelfAttention.k.weight', 'retriever.encoder.encoder.block.8.laye
r.0.SelfAttention.v.weight', 'retriever.encoder.encoder.block.8.layer.0.SelfAttention.o.weight', 'retriever.encoder.encoder.block.8.layer.0.layer_norm.weight', 'retriever.encoder.encoder.block.8.layer.1.DenseReluDense
.wi_0.weight', 'retriever.encoder.encoder.block.8.layer.1.DenseReluDense.wi_1.weight', 'retriever.encoder.encoder.block.8.layer.1.DenseReluDense.wo.weight', 'retriever.encoder.encoder.block.8.layer.1.layer_norm.weight
', 'retriever.encoder.encoder.block.9.layer.0.SelfAttention.q.weight', 'retriever.encoder.encoder.block.9.layer.0.SelfAttention.k.weight', 'retriever.encoder.encoder.block.9.layer.0.SelfAttention.v.weight', 'retriever
.encoder.encoder.block.9.layer.0.SelfAttention.o.weight', 'retriever.encoder.encoder.block.9.layer.0.layer_norm.weight', 'retriever.encoder.encoder.block.9.layer.1.DenseReluDense.wi_0.weight', 'retriever.encoder.encod
er.block.9.layer.1.DenseReluDense.wi_1.weight', 'retriever.encoder.encoder.block.9.layer.1.DenseReluDense.wo.weight', 'retriever.encoder.encoder.block.9.layer.1.layer_norm.weight', 'retriever.encoder.encoder.block.10.
layer.0.SelfAttention.q.weight', 'retriever.encoder.encoder.block.10.layer.0.SelfAttention.k.weight', 'retriever.encoder.encoder.block.10.layer.0.SelfAttention.v.weight', 'retriever.encoder.encoder.block.10.layer.0.Se
lfAttention.o.weight', 'retriever.encoder.encoder.block.10.layer.0.layer_norm.weight', 'retriever.encoder.encoder.block.10.layer.1.DenseReluDense.wi_0.weight', 'retriever.encoder.encoder.block.10.layer.1.DenseReluDens
e.wi_1.weight', 'retriever.encoder.encoder.block.10.layer.1.DenseReluDense.wo.weight', 'retriever.encoder.encoder.block.10.layer.1.layer_norm.weight', 'retriever.encoder.encoder.block.11.layer.0.SelfAttention.q.weight
', 'retriever.encoder.encoder.block.11.layer.0.SelfAttention.k.weight', 'retriever.encoder.encoder.block.11.layer.0.SelfAttention.v.weight', 'retriever.encoder.encoder.block.11.layer.0.SelfAttention.o.weight', 'retrie
ver.encoder.encoder.block.11.layer.0.layer_norm.weight', 'retriever.encoder.encoder.block.11.layer.1.DenseReluDense.wi_0.weight', 'retriever.encoder.encoder.block.11.layer.1.DenseReluDense.wi_1.weight', 'retriever.enc
oder.encoder.block.11.layer.1.DenseReluDense.wo.weight', 'retriever.encoder.encoder.block.11.layer.1.layer_norm.weight', 'retriever.encoder.encoder.final_layer_norm.weight']
/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/pytorch_lightning/core/saving.py:188: Found keys that are not in the model state dict but in the checkpoint: ['pytorch-lightning_version', 'global_
step', 'epoch', 'state_dict', 'callbacks', 'loops', 'legacy_pytorch-lightning_version', 'hyper_parameters']
2024-09-27 23:34:33.900 | INFO     | prover.proof_search:__init__:451 - Loaded model from /data/yingzi_ma/lean_project/model_lightning.ckpt
2024-09-27 23:34:33.901 | INFO     | prover.proof_search:__init__:452 - Using retriever: PremiseRetriever(
  (encoder): T5EncoderModel(
    (shared): Embedding(384, 1472)
    (encoder): T5Stack(
      (embed_tokens): Embedding(384, 1472)
      (block): ModuleList(
        (0): T5Block(
          (layer): ModuleList(
            (0): T5LayerSelfAttention(
              (SelfAttention): T5Attention(
                (q): Linear(in_features=1472, out_features=384, bias=False)
                (k): Linear(in_features=1472, out_features=384, bias=False)
                (v): Linear(in_features=1472, out_features=384, bias=False)
                (o): Linear(in_features=384, out_features=1472, bias=False)
                (relative_attention_bias): Embedding(32, 6)
              )
              (layer_norm): T5LayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
            (1): T5LayerFF(
              (DenseReluDense): T5DenseGatedActDense(
                (wi_0): Linear(in_features=1472, out_features=3584, bias=False)
                (wi_1): Linear(in_features=1472, out_features=3584, bias=False)
                (wo): Linear(in_features=3584, out_features=1472, bias=False)
                (dropout): Dropout(p=0.1, inplace=False)
                (act): NewGELUActivation()
              )
              (layer_norm): T5LayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
        )
        (1-11): 11 x T5Block(
          (layer): ModuleList(
            (0): T5LayerSelfAttention(
              (SelfAttention): T5Attention(
                (q): Linear(in_features=1472, out_features=384, bias=False)
                (k): Linear(in_features=1472, out_features=384, bias=False)
                (v): Linear(in_features=1472, out_features=384, bias=False)
                (o): Linear(in_features=384, out_features=1472, bias=False)
              )
              (layer_norm): T5LayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
            (1): T5LayerFF(
              (DenseReluDense): T5DenseGatedActDense(
                (wi_0): Linear(in_features=1472, out_features=3584, bias=False)
                (wi_1): Linear(in_features=1472, out_features=3584, bias=False)
                (wo): Linear(in_features=3584, out_features=1472, bias=False)
                (dropout): Dropout(p=0.1, inplace=False)
                (act): NewGELUActivation()
              )
              (layer_norm): T5LayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
        )
      )
      (final_layer_norm): T5LayerNorm()
      (dropout): Dropout(p=0.1, inplace=False)
    )
  )
)
2024-09-27 23:34:33.901 | INFO     | prover.proof_search:__init__:455 - Loading indexed corpus from /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_zeta_3_irrational_914712200e463cfc97fe37e929d
518dd58806a38/corpus.jsonl
2024-09-27 23:34:57.579 | INFO     | prover.proof_search:__init__:457 - Loaded indexed corpus from /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_zeta_3_irrational_914712200e463cfc97fe37e929d5
18dd58806a38/corpus.jsonl
2024-09-27 23:34:57.579 | INFO     | retrieval.model:reindex_corpus:284 - Re-indexing the retrieval corpus
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 5511/55
11 [08:57<00:00, 10.25it/s]
2024-09-27 23:43:55.250 | INFO     | prover.proof_search:__init__:459 - Finished reindexing!
2024-09-27 23:43:55.250 | INFO     | prover.proof_search:__init__:470 - Launching 4 workers with 4 GPUs.
2024-09-27 23:43:59,331 INFO worker.py:1774 -- Started a local Ray instance. View the dashboard at 127.0.0.1:8265
(pid=1313496) [2024-09-27 23:44:58,898] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
(ProverActor pid=1313496) /data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), wh
ich uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrus
ted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer b
e allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't h
ave full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
(ProverActor pid=1313496)   return torch.load(io.BytesIO(b))
(pid=1313718) [2024-09-27 23:45:31,078] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
(ProverActor pid=1313718) /data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), wh
ich uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrus
ted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer b
e allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't h
ave full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
(ProverActor pid=1313718)   return torch.load(io.BytesIO(b))
(pid=1314315) [2024-09-27 23:46:03,131] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
(ProverActor pid=1314315) /data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), wh
ich uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrus
ted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer b
e allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't h
ave full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
(ProverActor pid=1314315)   return torch.load(io.BytesIO(b))
2024-09-27 23:46:32.528 | INFO     | __main__:prove_sorry_theorems:1215 - Found 16 sorry theorems to prove
Processing theorems from ahhwuhu/zeta_3_irrational:   0%|                                                                                                                                                               |
 0/16 [00:00<?, ?theorem/s]2024-09-27 23:46:32.529 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for a
2024-09-27 23:46:32.529 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (59, 1)
2024-09-27 23:46:32.529 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for I_rs
2024-09-27 23:46:32.529 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (109, 1)
2024-09-27 23:46:32.529 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for JJ_eq_form'
2024-09-27 23:46:32.529 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (235, 1)
2024-09-27 23:46:32.530 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for intervalIntegral_eq_setInteral'
2024-09-27 23:46:32.530 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (87, 1)
2024-09-27 23:46:32.530 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for J_rs
2024-09-27 23:46:32.530 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (113, 1)
2024-09-27 23:46:32.530 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for integral_comm1
2024-09-27 23:46:32.530 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (123, 1)
2024-09-27 23:46:32.530 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for I_rr
2024-09-27 23:46:32.530 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (102, 1)
2024-09-27 23:46:32.530 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for JJ_upper
2024-09-27 23:46:32.530 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (367, 1)
2024-09-27 23:46:32.531 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for fun1_tendsto_zero
2024-09-27 23:46:32.531 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (386, 1)
2024-09-27 23:46:32.531 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for JJ_pos
2024-09-27 23:46:32.531 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (318, 1)
2024-09-27 23:46:32.531 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for b
2024-09-27 23:46:32.531 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (66, 1)
2024-09-27 23:46:32.531 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for intervalIntegral_eq_setInteral
2024-09-27 23:46:32.531 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (97, 1)
2024-09-27 23:46:32.531 | INFO     | prover.proof_search:search_unordered:513 - Distributed
(ProverActor pid=1313496) 2024-09-27 23:46:32.543 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/ahhwuhu/zeta_3_irrational', commit='914712200e463cfc97fe37e929d51
8dd58806a38'), file_path=PosixPath('Zeta3Irrational/Basic.lean'), full_name="intervalIntegral_eq_setInteral'")
(ProverActor pid=1313718) 2024-09-27 23:46:32.541 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/ahhwuhu/zeta_3_irrational', commit='914712200e463cfc97fe37e929d51
8dd58806a38'), file_path=PosixPath('Zeta3Irrational/Basic.lean'), full_name="JJ_eq_form'")
(ProverActor pid=1314315) 2024-09-27 23:46:33.516 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/ahhwuhu/zeta_3_irrational', commit='914712200e463cfc97fe37e929d51
8dd58806a38'), file_path=PosixPath('Zeta3Irrational/Integral.lean'), full_name='I_rs')
(pid=1314547) [2024-09-27 23:46:40,254] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
(ProverActor pid=1314547) /data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), wh
ich uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrus
ted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer b
e allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't h
ave full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
(ProverActor pid=1314547)   return torch.load(io.BytesIO(b))
(ProverActor pid=1314547) 2024-09-27 23:47:06.654 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/ahhwuhu/zeta_3_irrational', commit='914712200e463cfc97fe37e929d51
8dd58806a38'), file_path=PosixPath('Zeta3Irrational/Integral.lean'), full_name='a')
(ProverActor pid=1313496) 2024-09-27 23:58:45.230 | INFO     | prover.proof_search:_best_first_search:149 - 4325206.653523401
(ProverActor pid=1313496) 2024-09-27 23:58:45.231 | INFO     | prover.proof_search:_best_first_search:150 - 4324606.660367184
(ProverActor pid=1313496) 2024-09-27 23:58:45.231 | INFO     | prover.proof_search:_best_first_search:151 - 599.9940337501466
(ProverActor pid=1313496) 2024-09-27 23:58:45.231 | INFO     | prover.proof_search:_best_first_search:152 - 600
(ProverActor pid=1313496) 2024-09-27 23:58:45.231 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1313718) 2024-09-27 23:58:54.042 | INFO     | prover.proof_search:_best_first_search:152 - 600 [repeated 4x across cluster] (Ray deduplicates logs by default. Set RAY_DEDUP_LOGS=0 to disable log dedup
lication, or see https://docs.ray.io/en/master/ray-observability/user-guides/configure-logging.html#log-deduplication for more options.)
(ProverActor pid=1313718) 2024-09-27 23:58:54.042 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1314547) 2024-09-27 23:58:54.755 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1313496) 2024-09-27 23:59:05.563 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/ahhwuhu/zeta_3_irrational', commit='914712200e463cf
c97fe37e929d518dd58806a38'), file_path=PosixPath('Zeta3Irrational/Basic.lean'), full_name="intervalIntegral_eq_setInteral'"), status=<Status.OPEN: 'Open'>, proof=None, actor_time=16.119317046366632, environment_time=5
30.7597428662702, total_time=600.9945272831246, num_total_nodes=165, num_searched_nodes=5)
(ProverActor pid=1313496) 2024-09-27 23:59:05.571 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/ahhwuhu/zeta_3_irrational', commit='914712200e463cfc97fe37e929d51
8dd58806a38'), file_path=PosixPath('Zeta3Irrational/Integral.lean'), full_name='J_rs')
(ProverActor pid=1314547) 2024-09-27 23:58:54.754 | INFO     | prover.proof_search:_best_first_search:152 - 600 [repeated 4x across cluster]
(ProverActor pid=1314547) 2024-09-27 23:59:16.527 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/ahhwuhu/zeta_3_irrational', commit='914712200e463cf
c97fe37e929d518dd58806a38'), file_path=PosixPath('Zeta3Irrational/Integral.lean'), full_name='a'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=2.84764139726758, environment_time=566.5684172483161, total_time=
601.0016113994643, num_total_nodes=31, num_searched_nodes=0)
(ProverActor pid=1314547) 2024-09-27 23:59:16.532 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/ahhwuhu/zeta_3_irrational', commit='914712200e463cfc97fe37e929d51
8dd58806a38'), file_path=PosixPath('Zeta3Irrational/Basic.lean'), full_name='integral_comm1')
(ProverActor pid=1314315) 2024-09-27 23:59:34.576 | INFO     | prover.proof_search:_best_first_search:149 - 4325255.999906961
(ProverActor pid=1314315) 2024-09-27 23:59:34.577 | INFO     | prover.proof_search:_best_first_search:150 - 4324656.003177929
(ProverActor pid=1314315) 2024-09-27 23:59:34.577 | INFO     | prover.proof_search:_best_first_search:151 - 599.9972200049087
(ProverActor pid=1314315) 2024-09-27 23:59:34.577 | INFO     | prover.proof_search:_best_first_search:152 - 600
(ProverActor pid=1314315) 2024-09-27 23:59:34.577 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1313718) 2024-09-27 23:59:47.304 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/ahhwuhu/zeta_3_irrational', commit='914712200e463cf
c97fe37e929d518dd58806a38'), file_path=PosixPath('Zeta3Irrational/Basic.lean'), full_name="JJ_eq_form'"), status=<Status.OPEN: 'Open'>, proof=None, actor_time=94.45269491057843, environment_time=504.5220212833956, tot
al_time=600.9941817037761, num_total_nodes=997, num_searched_nodes=39)
(ProverActor pid=1313718) 2024-09-27 23:59:47.310 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/ahhwuhu/zeta_3_irrational', commit='914712200e463cfc97fe37e929d51
8dd58806a38'), file_path=PosixPath('Zeta3Irrational/Integral.lean'), full_name='I_rr')
(ProverActor pid=1314315) 2024-09-27 23:59:57.127 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/ahhwuhu/zeta_3_irrational', commit='914712200e463cf
c97fe37e929d518dd58806a38'), file_path=PosixPath('Zeta3Irrational/Integral.lean'), full_name='I_rs'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=292.2485896740109, environment_time=303.76311763282865, total_
time=600.9974345304072, num_total_nodes=3523, num_searched_nodes=109)
(ProverActor pid=1314315) 2024-09-27 23:59:57.133 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/ahhwuhu/zeta_3_irrational', commit='914712200e463cfc97fe37e929d51
8dd58806a38'), file_path=PosixPath('Zeta3Irrational/Basic.lean'), full_name='JJ_upper')
(ProverActor pid=1314547) 2024-09-28 00:10:58.281 | INFO     | prover.proof_search:_best_first_search:149 - 4325939.704015957
(ProverActor pid=1314547) 2024-09-28 00:10:58.281 | INFO     | prover.proof_search:_best_first_search:150 - 4325339.712629077
(ProverActor pid=1314547) 2024-09-28 00:10:58.281 | INFO     | prover.proof_search:_best_first_search:151 - 599.9919391637668
(ProverActor pid=1314547) 2024-09-28 00:10:58.281 | INFO     | prover.proof_search:_best_first_search:152 - 600
(ProverActor pid=1314547) 2024-09-28 00:10:58.281 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1314547) 2024-09-28 00:11:26.854 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/ahhwuhu/zeta_3_irrational', commit='914712200e463cf
c97fe37e929d518dd58806a38'), file_path=PosixPath('Zeta3Irrational/Basic.lean'), full_name='integral_comm1'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=109.14682858716697, environment_time=490.37673676759005
, total_time=600.9921512696892, num_total_nodes=964, num_searched_nodes=35)
(ProverActor pid=1314547) 2024-09-28 00:11:26.860 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/ahhwuhu/zeta_3_irrational', commit='914712200e463cfc97fe37e929d51
8dd58806a38'), file_path=PosixPath('Zeta3Irrational/Basic.lean'), full_name='fun1_tendsto_zero')
(ProverActor pid=1313496) 2024-09-28 00:11:44.443 | INFO     | prover.proof_search:_best_first_search:149 - 4325985.866328263
(ProverActor pid=1313496) 2024-09-28 00:11:44.443 | INFO     | prover.proof_search:_best_first_search:150 - 4325385.871141548
(ProverActor pid=1313496) 2024-09-28 00:11:44.444 | INFO     | prover.proof_search:_best_first_search:151 - 599.9958294415846
(ProverActor pid=1313496) 2024-09-28 00:11:44.444 | INFO     | prover.proof_search:_best_first_search:152 - 600
(ProverActor pid=1313496) 2024-09-28 00:11:44.444 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1313718) 2024-09-28 00:11:53.035 | INFO     | prover.proof_search:_best_first_search:152 - 600 [repeated 4x across cluster]
(ProverActor pid=1313718) 2024-09-28 00:11:53.035 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1313496) 2024-09-28 00:12:09.736 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/ahhwuhu/zeta_3_irrational', commit='914712200e463cf
c97fe37e929d518dd58806a38'), file_path=PosixPath('Zeta3Irrational/Integral.lean'), full_name='J_rs'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=84.02619013562799, environment_time=112.3487546229735, total_t
ime=600.9965243600309, num_total_nodes=1099, num_searched_nodes=31)
(ProverActor pid=1313496) 2024-09-28 00:12:09.742 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/ahhwuhu/zeta_3_irrational', commit='914712200e463cfc97fe37e929d51
8dd58806a38'), file_path=PosixPath('Zeta3Irrational/Basic.lean'), full_name='JJ_pos')
(ProverActor pid=1313718) 2024-09-28 00:12:20.584 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/ahhwuhu/zeta_3_irrational', commit='914712200e463cf
c97fe37e929d518dd58806a38'), file_path=PosixPath('Zeta3Irrational/Integral.lean'), full_name='I_rr'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=254.09950882103294, environment_time=343.48398216534406, total
_time=600.9958413830027, num_total_nodes=2428, num_searched_nodes=89)
(ProverActor pid=1313718) 2024-09-28 00:12:20.590 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/ahhwuhu/zeta_3_irrational', commit='914712200e463cfc97fe37e929d51
8dd58806a38'), file_path=PosixPath('Zeta3Irrational/Integral.lean'), full_name='b')
(ProverActor pid=1314315) 2024-09-28 00:12:29.555 | INFO     | prover.proof_search:_best_first_search:149 - 4326030.978696949
(ProverActor pid=1314315) 2024-09-28 00:12:29.556 | INFO     | prover.proof_search:_best_first_search:150 - 4325430.986718256
(ProverActor pid=1314315) 2024-09-28 00:12:29.556 | INFO     | prover.proof_search:_best_first_search:151 - 599.9924441147596
(ProverActor pid=1314315) 2024-09-28 00:12:29.556 | INFO     | prover.proof_search:_best_first_search:152 - 600
(ProverActor pid=1314315) 2024-09-28 00:12:29.556 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1314315) 2024-09-28 00:12:53.874 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/ahhwuhu/zeta_3_irrational', commit='914712200e463cf
c97fe37e929d518dd58806a38'), file_path=PosixPath('Zeta3Irrational/Basic.lean'), full_name='JJ_upper'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=183.72120645828545, environment_time=416.0556632447988, total
_time=600.9926812723279, num_total_nodes=2057, num_searched_nodes=60)
(ProverActor pid=1314315) 2024-09-28 00:12:53.880 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/ahhwuhu/zeta_3_irrational', commit='914712200e463cfc97fe37e929d51
8dd58806a38'), file_path=PosixPath('Zeta3Irrational/Basic.lean'), full_name='intervalIntegral_eq_setInteral')
(ProverActor pid=1313496) 2024-09-28 00:23:55.575 | INFO     | prover.proof_search:_best_first_search:149 - 4326716.998157666
(ProverActor pid=1313496) 2024-09-28 00:23:55.575 | INFO     | prover.proof_search:_best_first_search:150 - 4326117.107943413
(ProverActor pid=1313496) 2024-09-28 00:23:55.575 | INFO     | prover.proof_search:_best_first_search:151 - 599.8908549202606
(ProverActor pid=1313496) 2024-09-28 00:23:55.575 | INFO     | prover.proof_search:_best_first_search:152 - 600
(ProverActor pid=1313496) 2024-09-28 00:23:55.576 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1313718) 2024-09-28 00:24:20.216 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/ahhwuhu/zeta_3_irrational', commit='914712200e463cf
c97fe37e929d518dd58806a38'), file_path=PosixPath('Zeta3Irrational/Integral.lean'), full_name='b'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=38.64986483193934, environment_time=492.3407611781731, total_time
=600.9961647810414, num_total_nodes=528, num_searched_nodes=13)
(ProverActor pid=1313718) 2024-09-28 00:23:58.809 | INFO     | prover.proof_search:_best_first_search:152 - 600 [repeated 4x across cluster]
(ProverActor pid=1313718) 2024-09-28 00:23:58.810 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1313496) 2024-09-28 00:24:24.024 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/ahhwuhu/zeta_3_irrational', commit='914712200e463cf
c97fe37e929d518dd58806a38'), file_path=PosixPath('Zeta3Irrational/Basic.lean'), full_name='JJ_pos'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=135.25930742453784, environment_time=463.5597798107192, total_t
ime=600.891195109114, num_total_nodes=1780, num_searched_nodes=52)
(ProverActor pid=1314547) 2024-09-28 00:24:24.474 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1314547) 2024-09-28 00:24:40.375 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/ahhwuhu/zeta_3_irrational', commit='914712200e463cf
c97fe37e929d518dd58806a38'), file_path=PosixPath('Zeta3Irrational/Basic.lean'), full_name='fun1_tendsto_zero'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=172.64679204579443, environment_time=426.63813195656
985, total_time=600.9910676330328, num_total_nodes=2084, num_searched_nodes=54)
(ProverActor pid=1314547) 2024-09-28 00:24:24.474 | INFO     | prover.proof_search:_best_first_search:152 - 600 [repeated 4x across cluster]
(ProverActor pid=1314315) 2024-09-28 00:24:41.024 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
2024-09-28 00:24:53.207 | INFO     | __main__:process_theorem_batch:1161 - No proof found for intervalIntegral_eq_setInteral'
2024-09-28 00:24:53.207 | INFO     | __main__:process_theorem_batch:1161 - No proof found for a
2024-09-28 00:24:53.207 | INFO     | __main__:process_theorem_batch:1161 - No proof found for JJ_eq_form'
2024-09-28 00:24:53.207 | INFO     | __main__:process_theorem_batch:1161 - No proof found for I_rs
2024-09-28 00:24:53.207 | INFO     | __main__:process_theorem_batch:1161 - No proof found for integral_comm1
2024-09-28 00:24:53.207 | INFO     | __main__:process_theorem_batch:1161 - No proof found for J_rs
2024-09-28 00:24:53.208 | INFO     | __main__:process_theorem_batch:1161 - No proof found for I_rr
2024-09-28 00:24:53.208 | INFO     | __main__:process_theorem_batch:1161 - No proof found for JJ_upper
2024-09-28 00:24:53.208 | INFO     | __main__:process_theorem_batch:1161 - No proof found for b
2024-09-28 00:24:53.208 | INFO     | __main__:process_theorem_batch:1161 - No proof found for JJ_pos
2024-09-28 00:24:53.208 | INFO     | __main__:process_theorem_batch:1161 - No proof found for fun1_tendsto_zero
2024-09-28 00:24:53.208 | INFO     | __main__:process_theorem_batch:1161 - No proof found for intervalIntegral_eq_setInteral
(ProverActor pid=1314315) 2024-09-28 00:24:53.204 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/ahhwuhu/zeta_3_irrational', commit='914712200e463cf
c97fe37e929d518dd58806a38'), file_path=PosixPath('Zeta3Irrational/Basic.lean'), full_name='intervalIntegral_eq_setInteral'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=9.760964838787913, environment_time=19.
549672664143145, total_time=600.9889791384339, num_total_nodes=94, num_searched_nodes=2)
(ProverActor pid=1314315) 2024-09-28 00:24:41.023 | INFO     | prover.proof_search:_best_first_search:152 - 600 [repeated 4x across cluster]
2024-09-28 00:26:23.068 | INFO     | __main__:save_progress:1170 - Saving encountered theorems...
Processing theorems from ahhwuhu/zeta_3_irrational:  75%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                     | 12/16 [39
:50<13:16, 199.21s/theorem]2024-09-28 00:26:23.071 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for multi_integral_sum_comm
2024-09-28 00:26:23.072 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (101, 1)
2024-09-28 00:26:23.072 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for integral_comm2
2024-09-28 00:26:23.072 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (129, 1)
2024-09-28 00:26:23.072 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for J_rr
2024-09-28 00:26:23.072 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (105, 1)
2024-09-28 00:26:23.072 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for zeta_3
2024-09-28 00:26:23.072 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (77, 1)
Processing theorems from ahhwuhu/zeta_3_irrational: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 16/16 [39
:50<00:00, 149.41s/theorem]
2024-09-28 00:26:23.073 | INFO     | prover.proof_search:search_unordered:513 - Distributed
(ProverActor pid=1313496) 2024-09-28 00:26:23.081 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/ahhwuhu/zeta_3_irrational', commit='914712200e463cfc97fe37e929d51
8dd58806a38'), file_path=PosixPath('Zeta3Irrational/Integral.lean'), full_name='J_rr')
(ProverActor pid=1313718) 2024-09-28 00:26:23.082 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/ahhwuhu/zeta_3_irrational', commit='914712200e463cfc97fe37e929d51
8dd58806a38'), file_path=PosixPath('Zeta3Irrational/Integral.lean'), full_name='zeta_3')
(ProverActor pid=1314315) 2024-09-28 00:26:23.079 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/ahhwuhu/zeta_3_irrational', commit='914712200e463cfc97fe37e929d51
8dd58806a38'), file_path=PosixPath('Zeta3Irrational/LinearForm.lean'), full_name='multi_integral_sum_comm')
(ProverActor pid=1313718) 2024-09-28 00:38:10.424 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1314547) 2024-09-28 00:26:23.081 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/ahhwuhu/zeta_3_irrational', commit='914712200e463cfc97fe37e929d51
8dd58806a38'), file_path=PosixPath('Zeta3Irrational/Basic.lean'), full_name='integral_comm2')
(ProverActor pid=1314315) 2024-09-28 00:38:15.918 | INFO     | prover.proof_search:_best_first_search:149 - 4327577.341010692
(ProverActor pid=1314315) 2024-09-28 00:38:15.918 | INFO     | prover.proof_search:_best_first_search:150 - 4326977.346078553
(ProverActor pid=1314315) 2024-09-28 00:38:15.918 | INFO     | prover.proof_search:_best_first_search:151 - 599.9955601450056
(ProverActor pid=1314315) 2024-09-28 00:38:15.918 | INFO     | prover.proof_search:_best_first_search:152 - 600
(ProverActor pid=1314315) 2024-09-28 00:38:15.919 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1314547) 2024-09-28 00:38:18.861 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1314315) 2024-09-28 00:38:44.044 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/ahhwuhu/zeta_3_irrational', commit='914712200e463cf
c97fe37e929d518dd58806a38'), file_path=PosixPath('Zeta3Irrational/LinearForm.lean'), full_name='multi_integral_sum_comm'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=61.078040299005806, environment_time=451.
5394783196971, total_time=600.9960645791143, num_total_nodes=790, num_searched_nodes=21)
(ProverActor pid=1314547) 2024-09-28 00:38:18.861 | INFO     | prover.proof_search:_best_first_search:152 - 600 [repeated 4x across cluster]
(ProverActor pid=1314547) 2024-09-28 00:38:46.719 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/ahhwuhu/zeta_3_irrational', commit='914712200e463cf
c97fe37e929d518dd58806a38'), file_path=PosixPath('Zeta3Irrational/Basic.lean'), full_name='integral_comm2'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=32.74035450350493, environment_time=288.7827317668125,
total_time=600.9918425595388, num_total_nodes=444, num_searched_nodes=14)
(ProverActor pid=1313496) 2024-09-28 00:39:05.689 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1313496) 2024-09-28 00:39:05.689 | INFO     | prover.proof_search:_best_first_search:152 - 600 [repeated 4x across cluster]
(ProverActor pid=1313718) 2024-09-28 00:39:18.370 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/ahhwuhu/zeta_3_irrational', commit='914712200e463cf
c97fe37e929d518dd58806a38'), file_path=PosixPath('Zeta3Irrational/Integral.lean'), full_name='zeta_3'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=299.4785019354895, environment_time=299.6052888436243, total
_time=600.3327612541616, num_total_nodes=3068, num_searched_nodes=100)
2024-09-28 00:39:20.143 | INFO     | __main__:process_theorem_batch:1161 - No proof found for multi_integral_sum_comm
2024-09-28 00:39:20.144 | INFO     | __main__:process_theorem_batch:1161 - No proof found for integral_comm2
2024-09-28 00:39:20.144 | INFO     | __main__:process_theorem_batch:1161 - No proof found for zeta_3
2024-09-28 00:39:20.144 | INFO     | __main__:process_theorem_batch:1161 - No proof found for J_rr
(ProverActor pid=1313496) 2024-09-28 00:39:20.141 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/ahhwuhu/zeta_3_irrational', commit='914712200e463cf
c97fe37e929d518dd58806a38'), file_path=PosixPath('Zeta3Irrational/Integral.lean'), full_name='J_rr'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=246.6604394344613, environment_time=353.0669237114489, total_t
ime=600.9954532422125, num_total_nodes=2683, num_searched_nodes=79)
2024-09-28 00:40:35.959 | INFO     | __main__:save_progress:1170 - Saving encountered theorems...
2024-09-28 00:40:35.962 | INFO     | __main__:prove_sorry_theorems:1266 - Finished attempting to prove sorry theorems
2024-09-28 00:42:01.547 | INFO     | __main__:main:2076 - Finished searching for proofs of sorry theorems
2024-09-28 00:42:01.547 | INFO     | __main__:main:2079 - Shutting down Ray after proving
2024-09-28 00:42:05.218 | INFO     | __main__:main:2099 - Finished processing the repository
2024-09-28 00:42:05.218 | INFO     | __main__:main:2101 - current epoch: 1
2024-09-28 00:42:05.218 | INFO     | __main__:main:1774 - length of lean_git_repos: 8
2024-09-28 00:42:05.218 | INFO     | __main__:main:1775 - i: 1
2024-09-28 00:42:05.218 | INFO     | __main__:main:1781 - Main process
2024-09-28 00:42:05.218 | INFO     | __main__:main:1782 - Using lambda = 0.0
2024-09-28 00:42:05.218 | INFO     | __main__:main:1783 - Processing https://github.com/mo271/formal_book
2024-09-28 00:42:05.218 | INFO     | __main__:main:1790 - Adding repo to repos_for_merged_dataset
2024-09-28 00:42:05.219 | INFO     | dynamic_database:generate_merged_dataset:415 - Merging selected repositories in the database:
2024-09-28 00:42:05.219 | INFO     | dynamic_database:generate_merged_dataset:417 -   - https://github.com/mo271/formal_book (commit: 6fbe8c2985008c0bfb30050750a71b90388ad3a3)
2024-09-28 00:42:58.653 | WARNING  | dynamic_database:safe_remove_dir_path:377 - /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_formal_book_6fbe8c2985008c0bfb30050750a71b90388ad3a3 already exi
sts. Removing it now.
2024-09-28 00:43:09.229 | INFO     | dynamic_database:generate_merged_dataset:439 - Exported proofs to /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_formal_book_6fbe8c2985008c0bfb30050750a71b
90388ad3a3
2024-09-28 00:43:09.611 | INFO     | dynamic_database:generate_merged_dataset:442 - Merged and exported corpus to /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_formal_book_6fbe8c2985008c0bfb3
0050750a71b90388ad3a3
2024-09-28 00:43:09.620 | INFO     | dynamic_database:generate_merged_dataset:445 - Exported traced files to /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_formal_book_6fbe8c2985008c0bfb300507
50a71b90388ad3a3
2024-09-28 00:43:09.622 | INFO     | dynamic_database:generate_merged_dataset:448 - Exported metadata to /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_formal_book_6fbe8c2985008c0bfb30050750a7
1b90388ad3a3
2024-09-28 00:43:09.635 | INFO     | __main__:main:1802 - All GPUs
2024-09-28 00:43:09.635 | INFO     | __main__:main:2037 - Starting the prover
2024-09-28 00:43:09.635 | INFO     | prover.proof_search:__init__:407 - Inside __init__
2024-09-28 00:43:09.635 | INFO     | prover.proof_search:__init__:412 - ckpt_path is not None
2024-09-28 00:43:09.635 | INFO     | prover.proof_search:__init__:427 - Using RAG
/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/lightning_fabric/utilities/cloud_io.py:57: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default
 pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more
details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be load
ed via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of
the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
Lightning automatically upgraded your loaded checkpoint from v0.0.0 to v2.2.4. To apply the upgrade to your files permanently, run `python -m pytorch_lightning.utilities.upgrade_checkpoint ../model_lightning.ckpt`
2024-09-28 00:43:10.293 | INFO     | generator.model:__init__:124 - Retriever checkpoint path: /data/yingzi_ma/lean_project/checkpoints/mathlib4_29dcec074de168ac2bf835a77ef68bbe069194c5.ckpt
2024-09-28 00:43:10.294 | INFO     | generator.model:__init__:138 - Loading the retriever from /data/yingzi_ma/lean_project/checkpoints/mathlib4_29dcec074de168ac2bf835a77ef68bbe069194c5.ckpt
Lightning automatically upgraded your loaded checkpoint from v0.0.0 to v2.2.4. To apply the upgrade to your files permanently, run `python -m pytorch_lightning.utilities.upgrade_checkpoint ../checkpoints/mathlib4_29dc
ec074de168ac2bf835a77ef68bbe069194c5.ckpt`
2024-09-28 00:43:13.105 | INFO     | generator.model:__init__:151 - RetrievalAugmentedGenerator initialized
/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/pytorch_lightning/core/saving.py:184: Found keys that are in the model state dict but not in the checkpoint: ['retriever.encoder.shared.weight', 'r
etriever.encoder.encoder.embed_tokens.weight', 'retriever.encoder.encoder.block.0.layer.0.SelfAttention.q.weight', 'retriever.encoder.encoder.block.0.layer.0.SelfAttention.k.weight', 'retriever.encoder.encoder.block.0
.layer.0.SelfAttention.v.weight', 'retriever.encoder.encoder.block.0.layer.0.SelfAttention.o.weight', 'retriever.encoder.encoder.block.0.layer.0.SelfAttention.relative_attention_bias.weight', 'retriever.encoder.encode
r.block.0.layer.0.layer_norm.weight', 'retriever.encoder.encoder.block.0.layer.1.DenseReluDense.wi_0.weight', 'retriever.encoder.encoder.block.0.layer.1.DenseReluDense.wi_1.weight', 'retriever.encoder.encoder.block.0.
layer.1.DenseReluDense.wo.weight', 'retriever.encoder.encoder.block.0.layer.1.layer_norm.weight', 'retriever.encoder.encoder.block.1.layer.0.SelfAttention.q.weight', 'retriever.encoder.encoder.block.1.layer.0.SelfAtte
ntion.k.weight', 'retriever.encoder.encoder.block.1.layer.0.SelfAttention.v.weight', 'retriever.encoder.encoder.block.1.layer.0.SelfAttention.o.weight', 'retriever.encoder.encoder.block.1.layer.0.layer_norm.weight', '
retriever.encoder.encoder.block.1.layer.1.DenseReluDense.wi_0.weight', 'retriever.encoder.encoder.block.1.layer.1.DenseReluDense.wi_1.weight', 'retriever.encoder.encoder.block.1.layer.1.DenseReluDense.wo.weight', 'ret
riever.encoder.encoder.block.1.layer.1.layer_norm.weight', 'retriever.encoder.encoder.block.2.layer.0.SelfAttention.q.weight', 'retriever.encoder.encoder.block.2.layer.0.SelfAttention.k.weight', 'retriever.encoder.enc
oder.block.2.layer.0.SelfAttention.v.weight', 'retriever.encoder.encoder.block.2.layer.0.SelfAttention.o.weight', 'retriever.encoder.encoder.block.2.layer.0.layer_norm.weight', 'retriever.encoder.encoder.block.2.layer
.1.DenseReluDense.wi_0.weight', 'retriever.encoder.encoder.block.2.layer.1.DenseReluDense.wi_1.weight', 'retriever.encoder.encoder.block.2.layer.1.DenseReluDense.wo.weight', 'retriever.encoder.encoder.block.2.layer.1.
layer_norm.weight', 'retriever.encoder.encoder.block.3.layer.0.SelfAttention.q.weight', 'retriever.encoder.encoder.block.3.layer.0.SelfAttention.k.weight', 'retriever.encoder.encoder.block.3.layer.0.SelfAttention.v.we
ight', 'retriever.encoder.encoder.block.3.layer.0.SelfAttention.o.weight', 'retriever.encoder.encoder.block.3.layer.0.layer_norm.weight', 'retriever.encoder.encoder.block.3.layer.1.DenseReluDense.wi_0.weight', 'retrie
ver.encoder.encoder.block.3.layer.1.DenseReluDense.wi_1.weight', 'retriever.encoder.encoder.block.3.layer.1.DenseReluDense.wo.weight', 'retriever.encoder.encoder.block.3.layer.1.layer_norm.weight', 'retriever.encoder.
encoder.block.4.layer.0.SelfAttention.q.weight', 'retriever.encoder.encoder.block.4.layer.0.SelfAttention.k.weight', 'retriever.encoder.encoder.block.4.layer.0.SelfAttention.v.weight', 'retriever.encoder.encoder.block
.4.layer.0.SelfAttention.o.weight', 'retriever.encoder.encoder.block.4.layer.0.layer_norm.weight', 'retriever.encoder.encoder.block.4.layer.1.DenseReluDense.wi_0.weight', 'retriever.encoder.encoder.block.4.layer.1.Den
seReluDense.wi_1.weight', 'retriever.encoder.encoder.block.4.layer.1.DenseReluDense.wo.weight', 'retriever.encoder.encoder.block.4.layer.1.layer_norm.weight', 'retriever.encoder.encoder.block.5.layer.0.SelfAttention.q
.weight', 'retriever.encoder.encoder.block.5.layer.0.SelfAttention.k.weight', 'retriever.encoder.encoder.block.5.layer.0.SelfAttention.v.weight', 'retriever.encoder.encoder.block.5.layer.0.SelfAttention.o.weight', 're
triever.encoder.encoder.block.5.layer.0.layer_norm.weight', 'retriever.encoder.encoder.block.5.layer.1.DenseReluDense.wi_0.weight', 'retriever.encoder.encoder.block.5.layer.1.DenseReluDense.wi_1.weight', 'retriever.en
coder.encoder.block.5.layer.1.DenseReluDense.wo.weight', 'retriever.encoder.encoder.block.5.layer.1.layer_norm.weight', 'retriever.encoder.encoder.block.6.layer.0.SelfAttention.q.weight', 'retriever.encoder.encoder.bl
ock.6.layer.0.SelfAttention.k.weight', 'retriever.encoder.encoder.block.6.layer.0.SelfAttention.v.weight', 'retriever.encoder.encoder.block.6.layer.0.SelfAttention.o.weight', 'retriever.encoder.encoder.block.6.layer.0
.layer_norm.weight', 'retriever.encoder.encoder.block.6.layer.1.DenseReluDense.wi_0.weight', 'retriever.encoder.encoder.block.6.layer.1.DenseReluDense.wi_1.weight', 'retriever.encoder.encoder.block.6.layer.1.DenseRelu
Dense.wo.weight', 'retriever.encoder.encoder.block.6.layer.1.layer_norm.weight', 'retriever.encoder.encoder.block.7.layer.0.SelfAttention.q.weight', 'retriever.encoder.encoder.block.7.layer.0.SelfAttention.k.weight',
'retriever.encoder.encoder.block.7.layer.0.SelfAttention.v.weight', 'retriever.encoder.encoder.block.7.layer.0.SelfAttention.o.weight', 'retriever.encoder.encoder.block.7.layer.0.layer_norm.weight', 'retriever.encoder
.encoder.block.7.layer.1.DenseReluDense.wi_0.weight', 'retriever.encoder.encoder.block.7.layer.1.DenseReluDense.wi_1.weight', 'retriever.encoder.encoder.block.7.layer.1.DenseReluDense.wo.weight', 'retriever.encoder.en
coder.block.7.layer.1.layer_norm.weight', 'retriever.encoder.encoder.block.8.layer.0.SelfAttention.q.weight', 'retriever.encoder.encoder.block.8.layer.0.SelfAttention.k.weight', 'retriever.encoder.encoder.block.8.laye
r.0.SelfAttention.v.weight', 'retriever.encoder.encoder.block.8.layer.0.SelfAttention.o.weight', 'retriever.encoder.encoder.block.8.layer.0.layer_norm.weight', 'retriever.encoder.encoder.block.8.layer.1.DenseReluDense
.wi_0.weight', 'retriever.encoder.encoder.block.8.layer.1.DenseReluDense.wi_1.weight', 'retriever.encoder.encoder.block.8.layer.1.DenseReluDense.wo.weight', 'retriever.encoder.encoder.block.8.layer.1.layer_norm.weight
', 'retriever.encoder.encoder.block.9.layer.0.SelfAttention.q.weight', 'retriever.encoder.encoder.block.9.layer.0.SelfAttention.k.weight', 'retriever.encoder.encoder.block.9.layer.0.SelfAttention.v.weight', 'retriever
.encoder.encoder.block.9.layer.0.SelfAttention.o.weight', 'retriever.encoder.encoder.block.9.layer.0.layer_norm.weight', 'retriever.encoder.encoder.block.9.layer.1.DenseReluDense.wi_0.weight', 'retriever.encoder.encod
er.block.9.layer.1.DenseReluDense.wi_1.weight', 'retriever.encoder.encoder.block.9.layer.1.DenseReluDense.wo.weight', 'retriever.encoder.encoder.block.9.layer.1.layer_norm.weight', 'retriever.encoder.encoder.block.10.
layer.0.SelfAttention.q.weight', 'retriever.encoder.encoder.block.10.layer.0.SelfAttention.k.weight', 'retriever.encoder.encoder.block.10.layer.0.SelfAttention.v.weight', 'retriever.encoder.encoder.block.10.layer.0.Se
lfAttention.o.weight', 'retriever.encoder.encoder.block.10.layer.0.layer_norm.weight', 'retriever.encoder.encoder.block.10.layer.1.DenseReluDense.wi_0.weight', 'retriever.encoder.encoder.block.10.layer.1.DenseReluDens
e.wi_1.weight', 'retriever.encoder.encoder.block.10.layer.1.DenseReluDense.wo.weight', 'retriever.encoder.encoder.block.10.layer.1.layer_norm.weight', 'retriever.encoder.encoder.block.11.layer.0.SelfAttention.q.weight
', 'retriever.encoder.encoder.block.11.layer.0.SelfAttention.k.weight', 'retriever.encoder.encoder.block.11.layer.0.SelfAttention.v.weight', 'retriever.encoder.encoder.block.11.layer.0.SelfAttention.o.weight', 'retrie
ver.encoder.encoder.block.11.layer.0.layer_norm.weight', 'retriever.encoder.encoder.block.11.layer.1.DenseReluDense.wi_0.weight', 'retriever.encoder.encoder.block.11.layer.1.DenseReluDense.wi_1.weight', 'retriever.enc
oder.encoder.block.11.layer.1.DenseReluDense.wo.weight', 'retriever.encoder.encoder.block.11.layer.1.layer_norm.weight', 'retriever.encoder.encoder.final_layer_norm.weight']
/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/pytorch_lightning/core/saving.py:188: Found keys that are not in the model state dict but in the checkpoint: ['pytorch-lightning_version', 'global_
step', 'epoch', 'state_dict', 'callbacks', 'loops', 'legacy_pytorch-lightning_version', 'hyper_parameters']
2024-09-28 00:43:13.466 | INFO     | prover.proof_search:__init__:451 - Loaded model from /data/yingzi_ma/lean_project/model_lightning.ckpt
2024-09-28 00:43:13.467 | INFO     | prover.proof_search:__init__:452 - Using retriever: PremiseRetriever(
  (encoder): T5EncoderModel(
    (shared): Embedding(384, 1472)
    (encoder): T5Stack(
      (embed_tokens): Embedding(384, 1472)
      (block): ModuleList(
        (0): T5Block(
          (layer): ModuleList(
            (0): T5LayerSelfAttention(
              (SelfAttention): T5Attention(
                (q): Linear(in_features=1472, out_features=384, bias=False)
                (k): Linear(in_features=1472, out_features=384, bias=False)
                (v): Linear(in_features=1472, out_features=384, bias=False)
                (o): Linear(in_features=384, out_features=1472, bias=False)
                (relative_attention_bias): Embedding(32, 6)
              )
              (layer_norm): T5LayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
            (1): T5LayerFF(
              (DenseReluDense): T5DenseGatedActDense(
                (wi_0): Linear(in_features=1472, out_features=3584, bias=False)
                (wi_1): Linear(in_features=1472, out_features=3584, bias=False)
                (wo): Linear(in_features=3584, out_features=1472, bias=False)
                (dropout): Dropout(p=0.1, inplace=False)
                (act): NewGELUActivation()
              )
              (layer_norm): T5LayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
        )
        (1-11): 11 x T5Block(
          (layer): ModuleList(
            (0): T5LayerSelfAttention(
              (SelfAttention): T5Attention(
                (q): Linear(in_features=1472, out_features=384, bias=False)
                (k): Linear(in_features=1472, out_features=384, bias=False)
                (v): Linear(in_features=1472, out_features=384, bias=False)
                (o): Linear(in_features=384, out_features=1472, bias=False)
              )
              (layer_norm): T5LayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
            (1): T5LayerFF(
              (DenseReluDense): T5DenseGatedActDense(
                (wi_0): Linear(in_features=1472, out_features=3584, bias=False)
                (wi_1): Linear(in_features=1472, out_features=3584, bias=False)
                (wo): Linear(in_features=3584, out_features=1472, bias=False)
                (dropout): Dropout(p=0.1, inplace=False)
                (act): NewGELUActivation()
              )
              (layer_norm): T5LayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
        )
      )
      (final_layer_norm): T5LayerNorm()
      (dropout): Dropout(p=0.1, inplace=False)
    )
  )
)
2024-09-28 00:43:13.467 | INFO     | prover.proof_search:__init__:455 - Loading indexed corpus from /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_formal_book_6fbe8c2985008c0bfb30050750a71b903
88ad3a3/corpus.jsonl
2024-09-28 00:43:26.120 | INFO     | prover.proof_search:__init__:457 - Loaded indexed corpus from /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_formal_book_6fbe8c2985008c0bfb30050750a71b9038
8ad3a3/corpus.jsonl
2024-09-28 00:43:26.121 | INFO     | retrieval.model:reindex_corpus:284 - Re-indexing the retrieval corpus
100%|██████████████████████████████████████████████████████████████████| 3515/3515 [05:22<00:00, 10.90it/s]
2024-09-28 00:48:48.905 | INFO     | prover.proof_search:__init__:459 - Finished reindexing!
2024-09-28 00:48:48.905 | INFO     | prover.proof_search:__init__:470 - Launching 4 workers with 4 GPUs.
2024-09-28 00:48:53,419 INFO worker.py:1774 -- Started a local Ray instance. View the dashboard at 127.0.0.1:8265
(pid=1384816) [2024-09-28 00:49:36,521] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
(ProverActor pid=1384816) /data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), wh
ich uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrus
ted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer b
e allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't h
ave full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
(ProverActor pid=1384816)   return torch.load(io.BytesIO(b))
(pid=1385312) [2024-09-28 00:49:46,980] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
(ProverActor pid=1385312) /data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), wh
ich uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrus
ted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer b
e allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't h
ave full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
(ProverActor pid=1385312)   return torch.load(io.BytesIO(b))
(pid=1385561) [2024-09-28 00:49:59,367] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
(ProverActor pid=1385561) /data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), wh
ich uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrus
ted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer b
e allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't h
ave full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
(ProverActor pid=1385561)   return torch.load(io.BytesIO(b))
2024-09-28 00:50:07.242 | INFO     | __main__:prove_sorry_theorems:1215 - Found 29 sorry theorems to prove
Processing theorems from mo271/formal_book:   0%|                              | 0/29 [00:00<?, ?theorem/s]2024-09-28 00:50:07.242 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for chapter03.bi
nomials_coefficients_never_powers
2024-09-28 00:50:07.242 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (123, 1)
2024-09-28 00:50:07.243 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for book.quadratic_reciprocity.euler_criterion
2024-09-28 00:50:07.243 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (68, 1)
2024-09-28 00:50:07.243 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for chapter03.factor_in_descFactorial
2024-09-28 00:50:07.243 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (115, 1)
2024-09-28 00:50:07.243 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for ramsey_exists
2024-09-28 00:50:07.243 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (76, 1)
2024-09-28 00:50:07.243 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for infinity_of_primes₄
2024-09-28 00:50:07.243 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (220, 1)
2024-09-28 00:50:07.243 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for infinity_of_primes₅
2024-09-28 00:50:07.243 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (288, 1)
2024-09-28 00:50:07.244 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for infinity_of_primes₆
2024-09-28 00:50:07.244 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (297, 1)
2024-09-28 00:50:07.244 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for chapter07.Theorem₁
2024-09-28 00:50:07.244 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (40, 1)
2024-09-28 00:50:07.244 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for book.irrational.e_pow_2_irrational
2024-09-28 00:50:07.244 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (80, 1)
2024-09-28 00:50:07.244 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for book.quadratic_reciprocity.product_rule
2024-09-28 00:50:07.244 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (72, 1)
2024-09-28 00:50:07.244 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for book.quadratic_reciprocity.mult_cyclic
2024-09-28 00:50:07.244 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (108, 1)
2024-09-28 00:50:07.245 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for book.irrational.little_lemma
2024-09-28 00:50:07.245 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (83, 1)
2024-09-28 00:50:07.245 | INFO     | prover.proof_search:search_unordered:513 - Distributed
(ProverActor pid=1384816) 2024-09-28 00:50:07.256 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050750a71b90388ad
3a3'), file_path=PosixPath('FormalBook/Chapter_45.lean'), full_name='ramsey_exists')
(ProverActor pid=1385312) 2024-09-28 00:50:07.254 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050750a71b90388ad
3a3'), file_path=PosixPath('FormalBook/Chapter_03.lean'), full_name='chapter03.factor_in_descFactorial')
(ProverActor pid=1385561) 2024-09-28 00:50:15.538 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050750a71b90388ad
3a3'), file_path=PosixPath('FormalBook/Chapter_05.lean'), full_name='book.quadratic_reciprocity.euler_criterion')
(pid=1385769) [2024-09-28 00:50:15,517] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
(ProverActor pid=1385769) /data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), wh
ich uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrus
ted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer b
e allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't h
ave full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
(ProverActor pid=1385769)   return torch.load(io.BytesIO(b))
(ProverActor pid=1385769) 2024-09-28 00:50:31.858 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050750a71b90388ad
3a3'), file_path=PosixPath('FormalBook/Chapter_03.lean'), full_name='chapter03.binomials_coefficients_never_powers')
(ProverActor pid=1385561) 2024-09-28 01:01:06.305 | INFO     | prover.proof_search:_best_first_search:149 - 4328947.728487124
(ProverActor pid=1385561) 2024-09-28 01:01:06.305 | INFO     | prover.proof_search:_best_first_search:150 - 4328347.734351414
(ProverActor pid=1385561) 2024-09-28 01:01:06.306 | INFO     | prover.proof_search:_best_first_search:151 - 599.994694205001
(ProverActor pid=1385561) 2024-09-28 01:01:06.306 | INFO     | prover.proof_search:_best_first_search:152 - 600
(ProverActor pid=1385561) 2024-09-28 01:01:06.306 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1385312) 2024-09-28 01:01:11.793 | INFO     | prover.proof_search:_best_first_search:152 - 600 [repeated 8x across cluster]
(ProverActor pid=1385312) 2024-09-28 01:01:11.794 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions). [repeated 2x across cluster]
(ProverActor pid=1384816) 2024-09-28 01:01:18.247 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050
750a71b90388ad3a3'), file_path=PosixPath('FormalBook/Chapter_45.lean'), full_name='ramsey_exists'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=440.7529607228935, environment_time=158.30742738768458, total_ti
me=600.9999265726656, num_total_nodes=5614, num_searched_nodes=168)
(ProverActor pid=1384816) 2024-09-28 01:01:18.254 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050750a71b90388ad
3a3'), file_path=PosixPath('FormalBook/Chapter_01.lean'), full_name='infinity_of_primes₄')
(ProverActor pid=1385561) 2024-09-28 01:01:23.159 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050
750a71b90388ad3a3'), file_path=PosixPath('FormalBook/Chapter_05.lean'), full_name='book.quadratic_reciprocity.euler_criterion'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=444.074968948029, environment_time=
155.57752002589405, total_time=600.9950575949624, num_total_nodes=3557, num_searched_nodes=130)
(ProverActor pid=1385561) 2024-09-28 01:01:23.166 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050750a71b90388ad
3a3'), file_path=PosixPath('FormalBook/Chapter_01.lean'), full_name='infinity_of_primes₅')
(ProverActor pid=1385769) 2024-09-28 01:01:23.173 | INFO     | prover.proof_search:_best_first_search:149 - 4328964.596522697
(ProverActor pid=1385769) 2024-09-28 01:01:23.173 | INFO     | prover.proof_search:_best_first_search:150 - 4328364.598677561
(ProverActor pid=1385769) 2024-09-28 01:01:23.173 | INFO     | prover.proof_search:_best_first_search:151 - 599.9982216367498
(ProverActor pid=1385769) 2024-09-28 01:01:23.174 | INFO     | prover.proof_search:_best_first_search:152 - 600
(ProverActor pid=1385769) 2024-09-28 01:01:23.176 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1385312) 2024-09-28 01:01:25.114 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050
750a71b90388ad3a3'), file_path=PosixPath('FormalBook/Chapter_03.lean'), full_name='chapter03.factor_in_descFactorial'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=317.8408996006474, environment_time=281.5766
768986359, total_time=600.9983347160742, num_total_nodes=4058, num_searched_nodes=117)
(ProverActor pid=1385312) 2024-09-28 01:01:25.120 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050750a71b90388ad
3a3'), file_path=PosixPath('FormalBook/Chapter_01.lean'), full_name='infinity_of_primes₆')
(ProverActor pid=1385769) 2024-09-28 01:01:33.584 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050750a71b90388ad
3a3'), file_path=PosixPath('FormalBook/Chapter_07.lean'), full_name='chapter07.Theorem₁')
(ProverActor pid=1385769) 2024-09-28 01:01:33.577 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050
750a71b90388ad3a3'), file_path=PosixPath('FormalBook/Chapter_03.lean'), full_name='chapter03.binomials_coefficients_never_powers'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=339.30816034786403, environment_
time=257.85484876297414, total_time=601.0010721310973, num_total_nodes=5295, num_searched_nodes=147)
(ProverActor pid=1385561) 2024-09-28 01:12:17.304 | INFO     | prover.proof_search:_best_first_search:149 - 4329618.727743123
(ProverActor pid=1385561) 2024-09-28 01:12:17.305 | INFO     | prover.proof_search:_best_first_search:150 - 4329018.732612525
(ProverActor pid=1385561) 2024-09-28 01:12:17.305 | INFO     | prover.proof_search:_best_first_search:151 - 599.995598689653
(ProverActor pid=1385561) 2024-09-28 01:12:17.305 | INFO     | prover.proof_search:_best_first_search:152 - 600
(ProverActor pid=1385561) 2024-09-28 01:12:17.307 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1385561) 2024-09-28 01:12:27.923 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050
750a71b90388ad3a3'), file_path=PosixPath('FormalBook/Chapter_01.lean'), full_name='infinity_of_primes₅'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=511.36995283327997, environment_time=86.77706761378795, to
tal_time=600.9978871811181, num_total_nodes=5401, num_searched_nodes=184)
(ProverActor pid=1385561) 2024-09-28 01:12:27.930 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050750a71b90388ad
3a3'), file_path=PosixPath('FormalBook/Chapter_08.lean'), full_name='book.irrational.e_pow_2_irrational')
(ProverActor pid=1385769) 2024-09-28 01:12:22.341 | INFO     | prover.proof_search:_best_first_search:152 - 600 [repeated 8x across cluster]
(ProverActor pid=1385769) 2024-09-28 01:12:22.341 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions). [repeated 2x across cluster]
(ProverActor pid=1385769) 2024-09-28 01:12:34.385 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050
750a71b90388ad3a3'), file_path=PosixPath('FormalBook/Chapter_07.lean'), full_name='chapter07.Theorem₁'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=240.8462188988924, environment_time=347.23049840237945, tot
al_time=600.9997222302482, num_total_nodes=2227, num_searched_nodes=73)
(ProverActor pid=1385769) 2024-09-28 01:12:34.391 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050750a71b90388ad
3a3'), file_path=PosixPath('FormalBook/Chapter_05.lean'), full_name='book.quadratic_reciprocity.product_rule')
(ProverActor pid=1385312) 2024-09-28 01:12:37.528 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050
750a71b90388ad3a3'), file_path=PosixPath('FormalBook/Chapter_01.lean'), full_name='infinity_of_primes₆'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=104.15085672214627, environment_time=102.13775984290987, t
otal_time=600.9965139226988, num_total_nodes=1259, num_searched_nodes=30)
(ProverActor pid=1385312) 2024-09-28 01:12:37.534 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050750a71b90388ad
3a3'), file_path=PosixPath('FormalBook/Chapter_05.lean'), full_name='book.quadratic_reciprocity.mult_cyclic')
(ProverActor pid=1384816) 2024-09-28 01:12:41.552 | INFO     | prover.proof_search:_best_first_search:149 - 4329642.97590804
(ProverActor pid=1384816) 2024-09-28 01:12:41.553 | INFO     | prover.proof_search:_best_first_search:150 - 4329042.980825466
(ProverActor pid=1384816) 2024-09-28 01:12:41.553 | INFO     | prover.proof_search:_best_first_search:151 - 599.9958897447214
(ProverActor pid=1384816) 2024-09-28 01:12:41.553 | INFO     | prover.proof_search:_best_first_search:152 - 600
(ProverActor pid=1384816) 2024-09-28 01:12:41.554 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1384816) 2024-09-28 01:12:53.704 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050
750a71b90388ad3a3'), file_path=PosixPath('FormalBook/Chapter_01.lean'), full_name='infinity_of_primes₄'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=2.275898049585521, environment_time=299.4690290391445, tot
al_time=600.9962159534916, num_total_nodes=44, num_searched_nodes=0)
(ProverActor pid=1384816) 2024-09-28 01:12:53.710 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050750a71b90388ad
3a3'), file_path=PosixPath('FormalBook/Chapter_08.lean'), full_name='book.irrational.little_lemma')
(ProverActor pid=1385561) 2024-09-28 01:23:10.683 | INFO     | prover.proof_search:_best_first_search:149 - 4330272.106759377
(ProverActor pid=1385561) 2024-09-28 01:23:10.684 | INFO     | prover.proof_search:_best_first_search:150 - 4329672.108696794
(ProverActor pid=1385561) 2024-09-28 01:23:10.684 | INFO     | prover.proof_search:_best_first_search:151 - 599.9989407965913
(ProverActor pid=1385561) 2024-09-28 01:23:10.684 | INFO     | prover.proof_search:_best_first_search:152 - 600
(ProverActor pid=1385561) 2024-09-28 01:23:10.685 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1385769) 2024-09-28 01:23:15.779 | INFO     | prover.proof_search:_best_first_search:152 - 600 [repeated 4x across cluster]
(ProverActor pid=1385769) 2024-09-28 01:23:15.779 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1385312) 2024-09-28 01:23:18.546 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1385561) 2024-09-28 01:23:21.638 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050
750a71b90388ad3a3'), file_path=PosixPath('FormalBook/Chapter_08.lean'), full_name='book.irrational.e_pow_2_irrational'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=516.50336718373, environment_time=83.017625
33094734, total_time=600.999390908517, num_total_nodes=5649, num_searched_nodes=210)
(ProverActor pid=1385312) 2024-09-28 01:23:18.543 | INFO     | prover.proof_search:_best_first_search:152 - 600 [repeated 4x across cluster]
(ProverActor pid=1385769) 2024-09-28 01:23:28.348 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050
750a71b90388ad3a3'), file_path=PosixPath('FormalBook/Chapter_05.lean'), full_name='book.quadratic_reciprocity.product_rule'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=377.58705497533083, environment_time=2
07.4463865775615, total_time=600.9989198036492, num_total_nodes=2185, num_searched_nodes=106)
(ProverActor pid=1385312) 2024-09-28 01:23:28.991 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050
750a71b90388ad3a3'), file_path=PosixPath('FormalBook/Chapter_05.lean'), full_name='book.quadratic_reciprocity.mult_cyclic'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=389.12085764389485, environment_time=20
8.78416289109737, total_time=601.0007311757654, num_total_nodes=4975, num_searched_nodes=154)
(ProverActor pid=1384816) 2024-09-28 01:23:38.348 | INFO     | prover.proof_search:_best_first_search:149 - 4330299.771855069
(ProverActor pid=1384816) 2024-09-28 01:23:38.349 | INFO     | prover.proof_search:_best_first_search:150 - 4329699.774619037
(ProverActor pid=1384816) 2024-09-28 01:23:38.349 | INFO     | prover.proof_search:_best_first_search:151 - 599.9976375624537
(ProverActor pid=1384816) 2024-09-28 01:23:38.349 | INFO     | prover.proof_search:_best_first_search:152 - 600
(ProverActor pid=1384816) 2024-09-28 01:23:38.349 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
2024-09-28 01:23:45.128 | INFO     | __main__:process_theorem_batch:1161 - No proof found for ramsey_exists
2024-09-28 01:23:45.128 | INFO     | __main__:process_theorem_batch:1161 - No proof found for book.quadratic_reciprocity.euler_criterion
2024-09-28 01:23:45.128 | INFO     | __main__:process_theorem_batch:1161 - No proof found for chapter03.factor_in_descFactorial
2024-09-28 01:23:45.129 | INFO     | __main__:process_theorem_batch:1161 - No proof found for chapter03.binomials_coefficients_never_powers
2024-09-28 01:23:45.129 | INFO     | __main__:process_theorem_batch:1161 - No proof found for infinity_of_primes₅
2024-09-28 01:23:45.129 | INFO     | __main__:process_theorem_batch:1161 - No proof found for chapter07.Theorem₁
2024-09-28 01:23:45.129 | INFO     | __main__:process_theorem_batch:1161 - No proof found for infinity_of_primes₆
2024-09-28 01:23:45.129 | INFO     | __main__:process_theorem_batch:1161 - No proof found for infinity_of_primes₄
2024-09-28 01:23:45.129 | INFO     | __main__:process_theorem_batch:1161 - No proof found for book.irrational.e_pow_2_irrational
2024-09-28 01:23:45.129 | INFO     | __main__:process_theorem_batch:1161 - No proof found for book.quadratic_reciprocity.product_rule
2024-09-28 01:23:45.129 | INFO     | __main__:process_theorem_batch:1161 - No proof found for book.quadratic_reciprocity.mult_cyclic
2024-09-28 01:23:45.129 | INFO     | __main__:process_theorem_batch:1161 - No proof found for book.irrational.little_lemma
(ProverActor pid=1384816) 2024-09-28 01:23:45.126 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050
750a71b90388ad3a3'), file_path=PosixPath('FormalBook/Chapter_08.lean'), full_name='book.irrational.little_lemma'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=286.56722515355796, environment_time=313.15584799
18167, total_time=600.9978584991768, num_total_nodes=3761, num_searched_nodes=111)
2024-09-28 01:25:06.042 | INFO     | __main__:save_progress:1170 - Saving encountered theorems...
Processing theorems from mo271/formal_book:  41%|████████▎           | 12/29 [34:58<49:33, 174.90s/theorem]2024-09-28 01:25:06.045 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for chapter07.Th
eorem₂
2024-09-28 01:25:06.045 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (47, 1)
2024-09-28 01:25:06.045 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for chapter44.friendship_theorem
2024-09-28 01:25:06.045 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (51, 1)
2024-09-28 01:25:06.046 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for book.irrational.lem_aux_i
2024-09-28 01:25:06.046 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (109, 1)
2024-09-28 01:25:06.046 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for Asymptotics.infinitely_many_more_proofs
2024-09-28 01:25:06.046 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (318, 1)
2024-09-28 01:25:06.046 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for book.irrational.exponential_series
2024-09-28 01:25:06.046 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (69, 1)
2024-09-28 01:25:06.046 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for book.irrational.Theorem_1
2024-09-28 01:25:06.046 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (131, 1)
2024-09-28 01:25:06.046 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for book.quadratic_reciprocity.fermat_little
2024-09-28 01:25:06.046 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (57, 1)
2024-09-28 01:25:06.046 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for book.irrational.Theorem_2
2024-09-28 01:25:06.047 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (136, 1)
2024-09-28 01:25:06.047 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for book.irrational.irrational_iff_not_fraction
2024-09-28 01:25:06.047 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (59, 1)
2024-09-28 01:25:06.047 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for book.quadratic_reciprocity.quadratic_reciprocity_2
2024-09-28 01:25:06.047 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (126, 1)
2024-09-28 01:25:06.047 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for book.quadratic_reciprocity.lemma_of_Gauss
2024-09-28 01:25:06.047 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (83, 1)
2024-09-28 01:25:06.047 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for h_lamb_gt_q_sub_one
2024-09-28 01:25:06.047 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (84, 1)
2024-09-28 01:25:06.047 | INFO     | prover.proof_search:search_unordered:513 - Distributed
(ProverActor pid=1384816) 2024-09-28 01:25:06.052 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050750a71b90388ad
3a3'), file_path=PosixPath('FormalBook/Chapter_07.lean'), full_name='chapter07.Theorem₂')
(ProverActor pid=1385561) 2024-09-28 01:25:06.056 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050750a71b90388ad
3a3'), file_path=PosixPath('FormalBook/Chapter_01.lean'), full_name='Asymptotics.infinitely_many_more_proofs')
(ProverActor pid=1385769) 2024-09-28 01:25:06.055 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050750a71b90388ad
3a3'), file_path=PosixPath('FormalBook/Chapter_08.lean'), full_name='book.irrational.lem_aux_i')
(ProverActor pid=1385312) 2024-09-28 01:35:50.365 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1385312) 2024-09-28 01:25:06.054 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050750a71b90388ad
3a3'), file_path=PosixPath('FormalBook/Chapter_44.lean'), full_name='chapter44.friendship_theorem')
(ProverActor pid=1385769) 2024-09-28 01:35:50.545 | INFO     | prover.proof_search:_best_first_search:149 - 4331031.968114819
(ProverActor pid=1385769) 2024-09-28 01:35:50.545 | INFO     | prover.proof_search:_best_first_search:150 - 4330431.97027976
(ProverActor pid=1385769) 2024-09-28 01:35:50.545 | INFO     | prover.proof_search:_best_first_search:151 - 599.9983494933695
(ProverActor pid=1385769) 2024-09-28 01:35:50.545 | INFO     | prover.proof_search:_best_first_search:152 - 600
(ProverActor pid=1385561) 2024-09-28 01:35:56.893 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions). [repeated 3x across cluster]
(ProverActor pid=1385312) 2024-09-28 01:36:00.651 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050
750a71b90388ad3a3'), file_path=PosixPath('FormalBook/Chapter_44.lean'), full_name='chapter44.friendship_theorem'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=332.4748807409778, environment_time=267.040277196
0944, total_time=600.780180410482, num_total_nodes=4298, num_searched_nodes=124)
(ProverActor pid=1385312) 2024-09-28 01:36:00.657 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050750a71b90388ad
3a3'), file_path=PosixPath('FormalBook/Chapter_08.lean'), full_name='book.irrational.exponential_series')
(ProverActor pid=1384816) 2024-09-28 01:36:01.094 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050750a71b90388ad
3a3'), file_path=PosixPath('FormalBook/Chapter_08.lean'), full_name='book.irrational.Theorem_1')
(ProverActor pid=1385769) 2024-09-28 01:36:01.378 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050
750a71b90388ad3a3'), file_path=PosixPath('FormalBook/Chapter_08.lean'), full_name='book.irrational.lem_aux_i'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=363.716758091934, environment_time=235.8326601739972
8, total_time=600.9985938789323, num_total_nodes=3109, num_searched_nodes=123)
(ProverActor pid=1385769) 2024-09-28 01:36:01.386 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050750a71b90388ad
3a3'), file_path=PosixPath('FormalBook/Chapter_05.lean'), full_name='book.quadratic_reciprocity.fermat_little')
(ProverActor pid=1385561) 2024-09-28 01:36:07.287 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050
750a71b90388ad3a3'), file_path=PosixPath('FormalBook/Chapter_01.lean'), full_name='Asymptotics.infinitely_many_more_proofs'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=417.6906917626038, environment_time=18
1.18407035246491, total_time=600.2135548628867, num_total_nodes=5800, num_searched_nodes=163)
(ProverActor pid=1384816) 2024-09-28 01:36:01.088 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050
750a71b90388ad3a3'), file_path=PosixPath('FormalBook/Chapter_07.lean'), full_name='chapter07.Theorem₂'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=220.2130065485835, environment_time=378.85398911871016, tot
al_time=600.2833403330296, num_total_nodes=2770, num_searched_nodes=89)
(ProverActor pid=1385561) 2024-09-28 01:36:07.293 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050750a71b90388ad
3a3'), file_path=PosixPath('FormalBook/Chapter_08.lean'), full_name='book.irrational.Theorem_2')
(ProverActor pid=1385769) 2024-09-28 01:46:38.917 | INFO     | prover.proof_search:_best_first_search:149 - 4331680.340841124
(ProverActor pid=1385769) 2024-09-28 01:46:38.918 | INFO     | prover.proof_search:_best_first_search:150 - 4331080.343900825
(ProverActor pid=1385769) 2024-09-28 01:46:38.918 | INFO     | prover.proof_search:_best_first_search:151 - 599.9975529257208
(ProverActor pid=1385769) 2024-09-28 01:46:38.918 | INFO     | prover.proof_search:_best_first_search:152 - 600
(ProverActor pid=1385769) 2024-09-28 01:46:38.918 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1385561) 2024-09-28 01:46:44.325 | INFO     | prover.proof_search:_best_first_search:152 - 600 [repeated 12x across cluster]
(ProverActor pid=1385561) 2024-09-28 01:46:44.326 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions). [repeated 3x across cluster]
(ProverActor pid=1385312) 2024-09-28 01:46:49.819 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050
750a71b90388ad3a3'), file_path=PosixPath('FormalBook/Chapter_08.lean'), full_name='book.irrational.exponential_series'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=53.55021050386131, environment_time=544.593
676134944, total_time=601.0023418907076, num_total_nodes=524, num_searched_nodes=19)
(ProverActor pid=1385312) 2024-09-28 01:46:49.832 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050750a71b90388ad
3a3'), file_path=PosixPath('FormalBook/Chapter_08.lean'), full_name='book.irrational.irrational_iff_not_fraction')
(ProverActor pid=1385769) 2024-09-28 01:46:51.256 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050
750a71b90388ad3a3'), file_path=PosixPath('FormalBook/Chapter_05.lean'), full_name='book.quadratic_reciprocity.fermat_little'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=482.85415402892977, environment_time=
116.78149305377156, total_time=600.9978906242177, num_total_nodes=5170, num_searched_nodes=165)
(ProverActor pid=1385769) 2024-09-28 01:46:51.263 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050750a71b90388ad
3a3'), file_path=PosixPath('FormalBook/Chapter_05.lean'), full_name='book.quadratic_reciprocity.quadratic_reciprocity_2')
(ProverActor pid=1385561) 2024-09-28 01:46:56.030 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050
750a71b90388ad3a3'), file_path=PosixPath('FormalBook/Chapter_08.lean'), full_name='book.irrational.Theorem_2'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=475.27629951387644, environment_time=124.30859452858
567, total_time=600.9992152787745, num_total_nodes=5940, num_searched_nodes=184)
(ProverActor pid=1385561) 2024-09-28 01:46:56.036 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050750a71b90388ad
3a3'), file_path=PosixPath('FormalBook/Chapter_05.lean'), full_name='book.quadratic_reciprocity.lemma_of_Gauss')
(ProverActor pid=1384816) 2024-09-28 01:47:05.685 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050750a71b90388ad
3a3'), file_path=PosixPath('FormalBook/Chapter_06.lean'), full_name='h_lamb_gt_q_sub_one')
(ProverActor pid=1384816) 2024-09-28 01:47:05.679 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050
750a71b90388ad3a3'), file_path=PosixPath('FormalBook/Chapter_08.lean'), full_name='book.irrational.Theorem_1'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=157.56719453446567, environment_time=25.924360560253
263, total_time=600.999072400853, num_total_nodes=1704, num_searched_nodes=66)
(ProverActor pid=1385769) 2024-09-28 01:47:37.094 | INFO     | prover.proof_search:_best_first_search:171 - Found a proof!
(ProverActor pid=1385769) 2024-09-28 01:47:47.881 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050
750a71b90388ad3a3'), file_path=PosixPath('FormalBook/Chapter_05.lean'), full_name='book.quadratic_reciprocity.quadratic_reciprocity_2'), status=<Status.PROVED: 'Proved'>, proof=['exact book.quadratic_reciprocity.quadr
atic_reciprocity_1 p q hp hq'], actor_time=3.71065557282418, environment_time=0.015311607159674168, total_time=4.7268117209896445, num_total_nodes=4, num_searched_nodes=1)
(ProverActor pid=1385312) 2024-09-28 01:57:30.435 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1385561) 2024-09-28 01:57:35.029 | INFO     | prover.proof_search:_best_first_search:149 - 4332336.452618735
(ProverActor pid=1385561) 2024-09-28 01:57:35.030 | INFO     | prover.proof_search:_best_first_search:150 - 4331736.455788539
(ProverActor pid=1385561) 2024-09-28 01:57:35.033 | INFO     | prover.proof_search:_best_first_search:151 - 600.0005847066641
(ProverActor pid=1385561) 2024-09-28 01:57:35.033 | INFO     | prover.proof_search:_best_first_search:152 - 600
(ProverActor pid=1385312) 2024-09-28 01:57:39.223 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050
750a71b90388ad3a3'), file_path=PosixPath('FormalBook/Chapter_08.lean'), full_name='book.irrational.irrational_iff_not_fraction'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=444.66021474823356, environment_ti
me=154.5352681344375, total_time=600.5676306597888, num_total_nodes=6708, num_searched_nodes=194)
(ProverActor pid=1385561) 2024-09-28 01:57:35.034 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1385561) 2024-09-28 01:57:45.180 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050
750a71b90388ad3a3'), file_path=PosixPath('FormalBook/Chapter_05.lean'), full_name='book.quadratic_reciprocity.lemma_of_Gauss'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=197.96735920198262, environment_time
=388.6892793001607, total_time=601.0017927270383, num_total_nodes=1898, num_searched_nodes=87)
(ProverActor pid=1384816) 2024-09-28 01:57:46.976 | INFO     | prover.proof_search:_best_first_search:149 - 4332348.399779992
(ProverActor pid=1384816) 2024-09-28 01:57:46.977 | INFO     | prover.proof_search:_best_first_search:150 - 4331748.407801145
(ProverActor pid=1384816) 2024-09-28 01:57:46.977 | INFO     | prover.proof_search:_best_first_search:151 - 599.9923811974004
(ProverActor pid=1384816) 2024-09-28 01:57:46.977 | INFO     | prover.proof_search:_best_first_search:152 - 600
(ProverActor pid=1384816) 2024-09-28 01:57:46.977 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
2024-09-28 01:57:53.647 | INFO     | __main__:process_theorem_batch:1161 - No proof found for chapter44.friendship_theorem
2024-09-28 01:57:53.647 | INFO     | __main__:process_theorem_batch:1161 - No proof found for chapter07.Theorem₂
2024-09-28 01:57:53.647 | INFO     | __main__:process_theorem_batch:1161 - No proof found for book.irrational.lem_aux_i
2024-09-28 01:57:53.648 | INFO     | __main__:process_theorem_batch:1161 - No proof found for Asymptotics.infinitely_many_more_proofs
2024-09-28 01:57:53.648 | INFO     | __main__:process_theorem_batch:1161 - No proof found for book.irrational.exponential_series
2024-09-28 01:57:53.648 | INFO     | __main__:process_theorem_batch:1161 - No proof found for book.quadratic_reciprocity.fermat_little
2024-09-28 01:57:53.648 | INFO     | __main__:process_theorem_batch:1161 - No proof found for book.irrational.Theorem_2
2024-09-28 01:57:53.648 | INFO     | __main__:process_theorem_batch:1161 - No proof found for book.irrational.Theorem_1
2024-09-28 01:57:53.648 | INFO     | __main__:process_theorem_batch:1147 - Proof found for book.quadratic_reciprocity.quadratic_reciprocity_2
2024-09-28 01:57:53.650 | INFO     | dynamic_database:update_repository:614 - Attempting to update repository: https://github.com/mo271/formal_book (commit: 6fbe8c2985008c0bfb30050750a71b90388ad3a3)
2024-09-28 01:57:53.650 | INFO     | dynamic_database:update_repository:618 - Updated repository: https://github.com/mo271/formal_book (commit: 6fbe8c2985008c0bfb30050750a71b90388ad3a3)
2024-09-28 01:57:53.650 | INFO     | __main__:process_theorem_batch:1159 - Updated theorem book.quadratic_reciprocity.quadratic_reciprocity_2 in the database
2024-09-28 01:57:53.650 | INFO     | __main__:process_theorem_batch:1161 - No proof found for book.irrational.irrational_iff_not_fraction
2024-09-28 01:57:53.650 | INFO     | __main__:process_theorem_batch:1161 - No proof found for book.quadratic_reciprocity.lemma_of_Gauss
2024-09-28 01:57:53.650 | INFO     | __main__:process_theorem_batch:1161 - No proof found for h_lamb_gt_q_sub_one
(ProverActor pid=1384816) 2024-09-28 01:57:53.644 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050
750a71b90388ad3a3'), file_path=PosixPath('FormalBook/Chapter_06.lean'), full_name='h_lamb_gt_q_sub_one'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=408.1516891885549, environment_time=191.56541584432125, to
tal_time=600.9925876129419, num_total_nodes=3960, num_searched_nodes=122)
2024-09-28 01:59:21.128 | INFO     | __main__:save_progress:1170 - Saving encountered theorems...
Processing theorems from mo271/formal_book:  83%|██████████████▉   | 24/29 [1:09:13<14:23, 172.76s/theorem]2024-09-28 01:59:21.131 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for book.irratio
nal.e_irrational
2024-09-28 01:59:21.131 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (77, 1)
2024-09-28 01:59:21.131 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for book.quadratic_reciprocity.fact_B
2024-09-28 01:59:21.131 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (121, 1)
2024-09-28 01:59:21.131 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for book.irrational.e_pow_4_irrational
2024-09-28 01:59:21.131 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (91, 1)
2024-09-28 01:59:21.131 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for book.irrational.lem_aux_ii
2024-09-28 01:59:21.131 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (112, 1)
Processing theorems from mo271/formal_book:  97%|█████████████████▍| 28/29 [1:09:13<02:28, 148.35s/theorem]
2024-09-28 01:59:21.132 | INFO     | prover.proof_search:search_unordered:513 - Distributed
(ProverActor pid=1384816) 2024-09-28 01:59:21.136 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050750a71b90388ad
3a3'), file_path=PosixPath('FormalBook/Chapter_08.lean'), full_name='book.irrational.e_irrational')
(ProverActor pid=1385312) 2024-09-28 01:59:21.139 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050750a71b90388ad
3a3'), file_path=PosixPath('FormalBook/Chapter_08.lean'), full_name='book.irrational.e_pow_4_irrational')
(ProverActor pid=1385561) 2024-09-28 01:59:21.137 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050750a71b90388ad
3a3'), file_path=PosixPath('FormalBook/Chapter_05.lean'), full_name='book.quadratic_reciprocity.fact_B')
(ProverActor pid=1385769) 2024-09-28 01:59:21.140 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050750a71b90388ad
3a3'), file_path=PosixPath('FormalBook/Chapter_08.lean'), full_name='book.irrational.lem_aux_ii')
(ProverActor pid=1385769) 2024-09-28 02:00:07.347 | INFO     | prover.proof_search:_best_first_search:171 - Found a proof!
(ProverActor pid=1385769) 2024-09-28 02:00:15.530 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050
750a71b90388ad3a3'), file_path=PosixPath('FormalBook/Chapter_08.lean'), full_name='book.irrational.lem_aux_ii'), status=<Status.PROVED: 'Proved'>, proof=['constructor <;> linarith'], actor_time=1.6894652293995023, env
ironment_time=0.11868974659591913, total_time=2.808789886534214, num_total_nodes=9, num_searched_nodes=1)
(ProverActor pid=1385561) 2024-09-28 02:10:05.221 | INFO     | prover.proof_search:_best_first_search:149 - 4333086.644377377
(ProverActor pid=1385561) 2024-09-28 02:10:05.221 | INFO     | prover.proof_search:_best_first_search:150 - 4332486.647360041
(ProverActor pid=1385561) 2024-09-28 02:10:05.221 | INFO     | prover.proof_search:_best_first_search:151 - 599.9973983773962
(ProverActor pid=1385561) 2024-09-28 02:10:05.221 | INFO     | prover.proof_search:_best_first_search:152 - 600
(ProverActor pid=1385561) 2024-09-28 02:10:05.222 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1385561) 2024-09-28 02:10:14.974 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050
750a71b90388ad3a3'), file_path=PosixPath('FormalBook/Chapter_05.lean'), full_name='book.quadratic_reciprocity.fact_B'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=255.390102757141, environment_time=341.38936
93052232, total_time=600.9980776840821, num_total_nodes=2530, num_searched_nodes=86)
(ProverActor pid=1384816) 2024-09-28 02:10:07.461 | INFO     | prover.proof_search:_best_first_search:152 - 600 [repeated 8x across cluster]
(ProverActor pid=1384816) 2024-09-28 02:10:07.463 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions). [repeated 2x across cluster]
(ProverActor pid=1384816) 2024-09-28 02:10:17.962 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050
750a71b90388ad3a3'), file_path=PosixPath('FormalBook/Chapter_08.lean'), full_name='book.irrational.e_irrational'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=526.5573445931077, environment_time=71.6955978060
1412, total_time=601.0008441768587, num_total_nodes=7591, num_searched_nodes=256)
2024-09-28 02:10:29.619 | INFO     | __main__:process_theorem_batch:1147 - Proof found for book.irrational.lem_aux_ii
2024-09-28 02:10:29.620 | INFO     | dynamic_database:update_repository:614 - Attempting to update repository: https://github.com/mo271/formal_book (commit: 6fbe8c2985008c0bfb30050750a71b90388ad3a3)
2024-09-28 02:10:29.620 | INFO     | dynamic_database:update_repository:618 - Updated repository: https://github.com/mo271/formal_book (commit: 6fbe8c2985008c0bfb30050750a71b90388ad3a3)
2024-09-28 02:10:29.620 | INFO     | __main__:process_theorem_batch:1159 - Updated theorem book.irrational.lem_aux_ii in the database
2024-09-28 02:10:29.620 | INFO     | __main__:process_theorem_batch:1161 - No proof found for book.quadratic_reciprocity.fact_B
2024-09-28 02:10:29.621 | INFO     | __main__:process_theorem_batch:1161 - No proof found for book.irrational.e_irrational
2024-09-28 02:10:29.621 | INFO     | __main__:process_theorem_batch:1161 - No proof found for book.irrational.e_pow_4_irrational
(ProverActor pid=1385312) 2024-09-28 02:10:29.616 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/mo271/formal_book', commit='6fbe8c2985008c0bfb30050
750a71b90388ad3a3'), file_path=PosixPath('FormalBook/Chapter_08.lean'), full_name='book.irrational.e_pow_4_irrational'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=451.9531565429643, environment_time=114.117
8205376491, total_time=600.9675478637218, num_total_nodes=5270, num_searched_nodes=184)
2024-09-28 02:11:58.474 | INFO     | __main__:save_progress:1170 - Saving encountered theorems...
2024-09-28 02:11:58.478 | INFO     | __main__:prove_sorry_theorems:1266 - Finished attempting to prove sorry theorems
2024-09-28 02:13:29.433 | INFO     | __main__:main:2076 - Finished searching for proofs of sorry theorems
2024-09-28 02:13:29.433 | INFO     | __main__:main:2079 - Shutting down Ray after proving
2024-09-28 02:13:32.986 | INFO     | __main__:main:2099 - Finished processing the repository
2024-09-28 02:13:32.986 | INFO     | __main__:main:2101 - current epoch: 2
2024-09-28 02:13:32.987 | INFO     | __main__:main:1774 - length of lean_git_repos: 8
2024-09-28 02:13:32.987 | INFO     | __main__:main:1775 - i: 2
2024-09-28 02:13:32.987 | INFO     | __main__:main:1781 - Main process
2024-09-28 02:13:32.987 | INFO     | __main__:main:1782 - Using lambda = 0.0
2024-09-28 02:13:32.987 | INFO     | __main__:main:1783 - Processing https://github.com/Louis-Le-Grand/Formalisation-of-constructable-numbers
2024-09-28 02:13:32.987 | INFO     | __main__:main:1790 - Adding repo to repos_for_merged_dataset
2024-09-28 02:13:32.988 | INFO     | dynamic_database:generate_merged_dataset:415 - Merging selected repositories in the database:
2024-09-28 02:13:32.988 | INFO     | dynamic_database:generate_merged_dataset:417 -   - https://github.com/Louis-Le-Grand/Formalisation-of-constructable-numbers (commit: 01ef1f22a04f2ba8081c5fb29413f515a0e52878)
2024-09-28 02:14:25.368 | WARNING  | dynamic_database:safe_remove_dir_path:377 - /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_Formalisation-of-constructable-numbers_01ef1f22a04f2ba8081c5fb29
413f515a0e52878 already exists. Removing it now.
2024-09-28 02:14:36.794 | INFO     | dynamic_database:generate_merged_dataset:439 - Exported proofs to /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_Formalisation-of-constructable-numbers_01e
f1f22a04f2ba8081c5fb29413f515a0e52878
2024-09-28 02:14:37.171 | INFO     | dynamic_database:generate_merged_dataset:442 - Merged and exported corpus to /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_Formalisation-of-constructable-
numbers_01ef1f22a04f2ba8081c5fb29413f515a0e52878
2024-09-28 02:14:37.180 | INFO     | dynamic_database:generate_merged_dataset:445 - Exported traced files to /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_Formalisation-of-constructable-numbe
rs_01ef1f22a04f2ba8081c5fb29413f515a0e52878
2024-09-28 02:14:37.182 | INFO     | dynamic_database:generate_merged_dataset:448 - Exported metadata to /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_Formalisation-of-constructable-numbers_0
1ef1f22a04f2ba8081c5fb29413f515a0e52878
2024-09-28 02:14:37.195 | INFO     | __main__:main:1802 - All GPUs
2024-09-28 02:14:37.195 | INFO     | __main__:main:2037 - Starting the prover
2024-09-28 02:14:37.195 | INFO     | prover.proof_search:__init__:407 - Inside __init__
2024-09-28 02:14:37.195 | INFO     | prover.proof_search:__init__:412 - ckpt_path is not None
2024-09-28 02:14:37.196 | INFO     | prover.proof_search:__init__:427 - Using RAG
Lightning automatically upgraded your loaded checkpoint from v0.0.0 to v2.2.4. To apply the upgrade to your files permanently, run `python -m pytorch_lightning.utilities.upgrade_checkpoint ../model_lightning.ckpt`
2024-09-28 02:14:37.872 | INFO     | generator.model:__init__:124 - Retriever checkpoint path: /data/yingzi_ma/lean_project/checkpoints/mathlib4_29dcec074de168ac2bf835a77ef68bbe069194c5.ckpt
2024-09-28 02:14:37.872 | INFO     | generator.model:__init__:138 - Loading the retriever from /data/yingzi_ma/lean_project/checkpoints/mathlib4_29dcec074de168ac2bf835a77ef68bbe069194c5.ckpt
Lightning automatically upgraded your loaded checkpoint from v0.0.0 to v2.2.4. To apply the upgrade to your files permanently, run `python -m pytorch_lightning.utilities.upgrade_checkpoint ../checkpoints/mathlib4_29dc
ec074de168ac2bf835a77ef68bbe069194c5.ckpt`
2024-09-28 02:14:40.986 | INFO     | generator.model:__init__:151 - RetrievalAugmentedGenerator initialized
2024-09-28 02:14:41.424 | INFO     | prover.proof_search:__init__:451 - Loaded model from /data/yingzi_ma/lean_project/model_lightning.ckpt
2024-09-28 02:14:41.425 | INFO     | prover.proof_search:__init__:452 - Using retriever: PremiseRetriever(
  (encoder): T5EncoderModel(
    (shared): Embedding(384, 1472)
    (encoder): T5Stack(
      (embed_tokens): Embedding(384, 1472)
      (block): ModuleList(
        (0): T5Block(
          (layer): ModuleList(
            (0): T5LayerSelfAttention(
              (SelfAttention): T5Attention(
                (q): Linear(in_features=1472, out_features=384, bias=False)
                (k): Linear(in_features=1472, out_features=384, bias=False)
                (v): Linear(in_features=1472, out_features=384, bias=False)
                (o): Linear(in_features=384, out_features=1472, bias=False)
                (relative_attention_bias): Embedding(32, 6)
              )
              (layer_norm): T5LayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
            (1): T5LayerFF(
              (DenseReluDense): T5DenseGatedActDense(
                (wi_0): Linear(in_features=1472, out_features=3584, bias=False)
                (wi_1): Linear(in_features=1472, out_features=3584, bias=False)
                (wo): Linear(in_features=3584, out_features=1472, bias=False)
                (dropout): Dropout(p=0.1, inplace=False)
                (act): NewGELUActivation()
              )
              (layer_norm): T5LayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
        )
        (1-11): 11 x T5Block(
          (layer): ModuleList(
            (0): T5LayerSelfAttention(
              (SelfAttention): T5Attention(
                (q): Linear(in_features=1472, out_features=384, bias=False)
                (k): Linear(in_features=1472, out_features=384, bias=False)
                (v): Linear(in_features=1472, out_features=384, bias=False)
                (o): Linear(in_features=384, out_features=1472, bias=False)
              )
              (layer_norm): T5LayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
            (1): T5LayerFF(
              (DenseReluDense): T5DenseGatedActDense(
                (wi_0): Linear(in_features=1472, out_features=3584, bias=False)
                (wi_1): Linear(in_features=1472, out_features=3584, bias=False)
                (wo): Linear(in_features=3584, out_features=1472, bias=False)
                (dropout): Dropout(p=0.1, inplace=False)
                (act): NewGELUActivation()
              )
              (layer_norm): T5LayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
        )
      )
      (final_layer_norm): T5LayerNorm()
      (dropout): Dropout(p=0.1, inplace=False)
    )
  )
)
2024-09-28 02:14:41.425 | INFO     | prover.proof_search:__init__:455 - Loading indexed corpus from /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_Formalisation-of-constructable-numbers_01ef1f
22a04f2ba8081c5fb29413f515a0e52878/corpus.jsonl
2024-09-28 02:14:47.426 | INFO     | prover.proof_search:__init__:457 - Loaded indexed corpus from /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_Formalisation-of-constructable-numbers_01ef1f2
2a04f2ba8081c5fb29413f515a0e52878/corpus.jsonl
2024-09-28 02:14:47.426 | INFO     | retrieval.model:reindex_corpus:284 - Re-indexing the retrieval corpus
100%|██████████████████████████████████████████████████████████████████| 3427/3427 [05:12<00:00, 10.97it/s]
2024-09-28 02:19:59.882 | INFO     | prover.proof_search:__init__:459 - Finished reindexing!
2024-09-28 02:19:59.883 | INFO     | prover.proof_search:__init__:470 - Launching 4 workers with 4 GPUs.
2024-09-28 02:20:04,460 INFO worker.py:1774 -- Started a local Ray instance. View the dashboard at 127.0.0.1:8265
(pid=1473508) [2024-09-28 02:20:43,746] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
(ProverActor pid=1473508) /data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), wh
ich uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrus
ted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer b
e allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't h
ave full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
(ProverActor pid=1473508)   return torch.load(io.BytesIO(b))
(pid=1474051) [2024-09-28 02:20:51,807] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
(ProverActor pid=1474051) /data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), wh
ich uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrus
ted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer b
e allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't h
ave full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
(ProverActor pid=1474051)   return torch.load(io.BytesIO(b))
(pid=1474238) [2024-09-28 02:21:03,055] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
(ProverActor pid=1474238) /data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), wh
ich uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrus
ted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer b
e allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't h
ave full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
(ProverActor pid=1474238)   return torch.load(io.BytesIO(b))
2024-09-28 02:21:08.332 | INFO     | __main__:prove_sorry_theorems:1215 - Found 4 sorry theorems to prove
Processing theorems from Louis-Le-Grand/Formalisation-of-constructable-numbers:   0%| | 0/4 [00:00<?, ?theo2024-09-28 02:21:08.333 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for Classficatio
n_z_in_M_inf
2024-09-28 02:21:08.333 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (53, 1)
2024-09-28 02:21:08.333 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for conj_adjion
2024-09-28 02:21:08.333 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (18, 1)
2024-09-28 02:21:08.333 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for Classfication_z_in_M_inf_2m
2024-09-28 02:21:08.334 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (63, 1)
2024-09-28 02:21:08.334 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for dergree_two_eq_sqr
2024-09-28 02:21:08.334 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (41, 1)
Processing theorems from Louis-Le-Grand/Formalisation-of-constructable-numbers: 100%|█| 4/4 [00:00<00:00, 3
2024-09-28 02:21:08.334 | INFO     | prover.proof_search:search_unordered:513 - Distributed
(ProverActor pid=1473508) 2024-09-28 02:21:08.347 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/Louis-Le-Grand/Formalisation-of-constructable-numbers', commit='0
1ef1f22a04f2ba8081c5fb29413f515a0e52878'), file_path=PosixPath('Construction/Chapter2/joshua.lean'), full_name='dergree_two_eq_sqr')
(ProverActor pid=1474051) 2024-09-28 02:21:08.345 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/Louis-Le-Grand/Formalisation-of-constructable-numbers', commit='0
1ef1f22a04f2ba8081c5fb29413f515a0e52878'), file_path=PosixPath('Construction/bestiary.lean'), full_name='Classfication_z_in_M_inf_2m')
(pid=1474440) [2024-09-28 02:21:15,947] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
(ProverActor pid=1474238) 2024-09-28 02:21:16.320 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/Louis-Le-Grand/Formalisation-of-constructable-numbers', commit='0
1ef1f22a04f2ba8081c5fb29413f515a0e52878'), file_path=PosixPath('Construction/Chapter2/joshua.lean'), full_name='conj_adjion')
(ProverActor pid=1474440) /data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), wh
ich uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrus
ted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer b
e allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't h
ave full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
(ProverActor pid=1474440)   return torch.load(io.BytesIO(b))
(ProverActor pid=1474440) 2024-09-28 02:21:28.732 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/Louis-Le-Grand/Formalisation-of-constructable-numbers', commit='0
1ef1f22a04f2ba8081c5fb29413f515a0e52878'), file_path=PosixPath('Construction/bestiary.lean'), full_name='Classfication_z_in_M_inf')
(ProverActor pid=1474238) 2024-09-28 02:22:06.011 | WARNING  | prover.proof_search:search:132 - EOF
(ProverActor pid=1474051) 2024-09-28 02:32:01.109 | INFO     | prover.proof_search:_best_first_search:149 - 4334402.532177952
(ProverActor pid=1474051) 2024-09-28 02:32:01.109 | INFO     | prover.proof_search:_best_first_search:150 - 4333802.533927028
(ProverActor pid=1474051) 2024-09-28 02:32:01.109 | INFO     | prover.proof_search:_best_first_search:151 - 599.9985884027556
(ProverActor pid=1474051) 2024-09-28 02:32:01.109 | INFO     | prover.proof_search:_best_first_search:152 - 600
(ProverActor pid=1474051) 2024-09-28 02:32:01.110 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1474051) 2024-09-28 02:32:08.790 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/Louis-Le-Grand/Formalisation-of-constructable-numbe
rs', commit='01ef1f22a04f2ba8081c5fb29413f515a0e52878'), file_path=PosixPath('Construction/bestiary.lean'), full_name='Classfication_z_in_M_inf_2m'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=162.1890195291
4894, environment_time=436.51463658735156, total_time=600.9996457509696, num_total_nodes=2763, num_searched_nodes=77)
(ProverActor pid=1473508) 2024-09-28 02:32:02.189 | INFO     | prover.proof_search:_best_first_search:152 - 600 [repeated 4x across cluster]
(ProverActor pid=1473508) 2024-09-28 02:32:02.190 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1473508) 2024-09-28 02:32:10.031 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/Louis-Le-Grand/Formalisation-of-constructable-numbe
rs', commit='01ef1f22a04f2ba8081c5fb29413f515a0e52878'), file_path=PosixPath('Construction/Chapter2/joshua.lean'), full_name='dergree_two_eq_sqr'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=149.255063964054
, environment_time=447.44007694348693, total_time=600.9996200222522, num_total_nodes=2038, num_searched_nodes=58)
(ProverActor pid=1474440) 2024-09-28 02:32:17.794 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1474440) 2024-09-28 02:32:17.794 | INFO     | prover.proof_search:_best_first_search:152 - 600 [repeated 4x across cluster]
2024-09-28 02:32:24.584 | WARNING  | __main__:process_theorem_batch:1165 - Unexpected result type
2024-09-28 02:32:24.584 | INFO     | __main__:process_theorem_batch:1161 - No proof found for Classfication_z_in_M_inf_2m
2024-09-28 02:32:24.585 | INFO     | __main__:process_theorem_batch:1161 - No proof found for dergree_two_eq_sqr
2024-09-28 02:32:24.585 | INFO     | __main__:process_theorem_batch:1161 - No proof found for Classfication_z_in_M_inf
(ProverActor pid=1474440) 2024-09-28 02:32:24.582 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/Louis-Le-Grand/Formalisation-of-constructable-numbe
rs', commit='01ef1f22a04f2ba8081c5fb29413f515a0e52878'), file_path=PosixPath('Construction/bestiary.lean'), full_name='Classfication_z_in_M_inf'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=28.38186599034816
, environment_time=546.4396305745468, total_time=600.999171840027, num_total_nodes=321, num_searched_nodes=10)
2024-09-28 02:33:52.657 | INFO     | __main__:save_progress:1170 - Saving encountered theorems...
2024-09-28 02:33:52.659 | INFO     | __main__:prove_sorry_theorems:1266 - Finished attempting to prove sorry theorems
2024-09-28 02:35:22.740 | INFO     | __main__:main:2076 - Finished searching for proofs of sorry theorems
2024-09-28 02:35:22.740 | INFO     | __main__:main:2079 - Shutting down Ray after proving
2024-09-28 02:35:25.323 | INFO     | __main__:main:2099 - Finished processing the repository
2024-09-28 02:35:25.323 | INFO     | __main__:main:2101 - current epoch: 3
2024-09-28 02:35:25.324 | INFO     | __main__:main:1774 - length of lean_git_repos: 8
2024-09-28 02:35:25.324 | INFO     | __main__:main:1775 - i: 3
2024-09-28 02:35:25.324 | INFO     | __main__:main:1781 - Main process
2024-09-28 02:35:25.324 | INFO     | __main__:main:1782 - Using lambda = 0.0
2024-09-28 02:35:25.324 | INFO     | __main__:main:1783 - Processing https://github.com/fpvandoorn/carleson
2024-09-28 02:35:25.324 | INFO     | __main__:main:1790 - Adding repo to repos_for_merged_dataset
2024-09-28 02:35:25.324 | INFO     | dynamic_database:generate_merged_dataset:415 - Merging selected repositories in the database:
2024-09-28 02:35:25.324 | INFO     | dynamic_database:generate_merged_dataset:417 -   - https://github.com/fpvandoorn/carleson (commit: bec7808b907190882fa1fa54ce749af297c6cf37)
2024-09-28 02:36:19.083 | WARNING  | dynamic_database:safe_remove_dir_path:377 - /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_carleson_bec7808b907190882fa1fa54ce749af297c6cf37 already exists
. Removing it now.
2024-09-28 02:36:38.081 | INFO     | dynamic_database:generate_merged_dataset:439 - Exported proofs to /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_carleson_bec7808b907190882fa1fa54ce749af29
7c6cf37
2024-09-28 02:36:38.464 | INFO     | dynamic_database:generate_merged_dataset:442 - Merged and exported corpus to /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_carleson_bec7808b907190882fa1fa
54ce749af297c6cf37
2024-09-28 02:36:38.473 | INFO     | dynamic_database:generate_merged_dataset:445 - Exported traced files to /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_carleson_bec7808b907190882fa1fa54ce7
49af297c6cf37
2024-09-28 02:36:38.475 | INFO     | dynamic_database:generate_merged_dataset:448 - Exported metadata to /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_carleson_bec7808b907190882fa1fa54ce749af
297c6cf37
2024-09-28 02:36:38.490 | INFO     | __main__:main:1802 - All GPUs
2024-09-28 02:36:38.490 | INFO     | __main__:main:2037 - Starting the prover
2024-09-28 02:36:38.490 | INFO     | prover.proof_search:__init__:407 - Inside __init__
2024-09-28 02:36:38.490 | INFO     | prover.proof_search:__init__:412 - ckpt_path is not None
2024-09-28 02:36:38.490 | INFO     | prover.proof_search:__init__:427 - Using RAG
Lightning automatically upgraded your loaded checkpoint from v0.0.0 to v2.2.4. To apply the upgrade to your files permanently, run `python -m pytorch_lightning.utilities.upgrade_checkpoint ../model_lightning.ckpt`
2024-09-28 02:36:38.860 | INFO     | generator.model:__init__:124 - Retriever checkpoint path: /data/yingzi_ma/lean_project/checkpoints/mathlib4_29dcec074de168ac2bf835a77ef68bbe069194c5.ckpt
2024-09-28 02:36:38.860 | INFO     | generator.model:__init__:138 - Loading the retriever from /data/yingzi_ma/lean_project/checkpoints/mathlib4_29dcec074de168ac2bf835a77ef68bbe069194c5.ckpt
Lightning automatically upgraded your loaded checkpoint from v0.0.0 to v2.2.4. To apply the upgrade to your files permanently, run `python -m pytorch_lightning.utilities.upgrade_checkpoint ../checkpoints/mathlib4_29dc
ec074de168ac2bf835a77ef68bbe069194c5.ckpt`
2024-09-28 02:36:40.577 | INFO     | generator.model:__init__:151 - RetrievalAugmentedGenerator initialized
2024-09-28 02:36:41.033 | INFO     | prover.proof_search:__init__:451 - Loaded model from /data/yingzi_ma/lean_project/model_lightning.ckpt
2024-09-28 02:36:41.034 | INFO     | prover.proof_search:__init__:452 - Using retriever: PremiseRetriever(
  (encoder): T5EncoderModel(
    (shared): Embedding(384, 1472)
    (encoder): T5Stack(
      (embed_tokens): Embedding(384, 1472)
      (block): ModuleList(
        (0): T5Block(
          (layer): ModuleList(
            (0): T5LayerSelfAttention(
              (SelfAttention): T5Attention(
                (q): Linear(in_features=1472, out_features=384, bias=False)
                (k): Linear(in_features=1472, out_features=384, bias=False)
                (v): Linear(in_features=1472, out_features=384, bias=False)
                (o): Linear(in_features=384, out_features=1472, bias=False)
                (relative_attention_bias): Embedding(32, 6)
              )
              (layer_norm): T5LayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
            (1): T5LayerFF(
              (DenseReluDense): T5DenseGatedActDense(
                (wi_0): Linear(in_features=1472, out_features=3584, bias=False)
                (wi_1): Linear(in_features=1472, out_features=3584, bias=False)
                (wo): Linear(in_features=3584, out_features=1472, bias=False)
                (dropout): Dropout(p=0.1, inplace=False)
                (act): NewGELUActivation()
              )
              (layer_norm): T5LayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
        )
        (1-11): 11 x T5Block(
          (layer): ModuleList(
            (0): T5LayerSelfAttention(
              (SelfAttention): T5Attention(
                (q): Linear(in_features=1472, out_features=384, bias=False)
                (k): Linear(in_features=1472, out_features=384, bias=False)
                (v): Linear(in_features=1472, out_features=384, bias=False)
                (o): Linear(in_features=384, out_features=1472, bias=False)
              )
              (layer_norm): T5LayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
            (1): T5LayerFF(
              (DenseReluDense): T5DenseGatedActDense(
                (wi_0): Linear(in_features=1472, out_features=3584, bias=False)
                (wi_1): Linear(in_features=1472, out_features=3584, bias=False)
                (wo): Linear(in_features=3584, out_features=1472, bias=False)
                (dropout): Dropout(p=0.1, inplace=False)
                (act): NewGELUActivation()
              )
              (layer_norm): T5LayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
        )
      )
      (final_layer_norm): T5LayerNorm()
      (dropout): Dropout(p=0.1, inplace=False)
    )
  )
)
2024-09-28 02:36:41.034 | INFO     | prover.proof_search:__init__:455 - Loading indexed corpus from /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_carleson_bec7808b907190882fa1fa54ce749af297c6
cf37/corpus.jsonl
2024-09-28 02:36:47.510 | INFO     | prover.proof_search:__init__:457 - Loaded indexed corpus from /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_carleson_bec7808b907190882fa1fa54ce749af297c6c
f37/corpus.jsonl
2024-09-28 02:36:47.511 | INFO     | retrieval.model:reindex_corpus:284 - Re-indexing the retrieval corpus
100%|██████████████████████████████████████████████████████████████████| 3417/3417 [05:14<00:00, 10.88it/s]
2024-09-28 02:42:01.571 | INFO     | prover.proof_search:__init__:459 - Finished reindexing!
2024-09-28 02:42:01.571 | INFO     | prover.proof_search:__init__:470 - Launching 4 workers with 4 GPUs.
2024-09-28 02:42:05,347 INFO worker.py:1774 -- Started a local Ray instance. View the dashboard at 127.0.0.1:8265
(pid=1521974) [2024-09-28 02:42:43,704] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
(ProverActor pid=1521974) /data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), wh
ich uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrus
ted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer b
e allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't h
ave full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
(ProverActor pid=1521974)   return torch.load(io.BytesIO(b))
(pid=1522377) [2024-09-28 02:42:54,365] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
(ProverActor pid=1522377) /data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), wh
ich uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrus
ted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer b
e allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't h
ave full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
(ProverActor pid=1522377)   return torch.load(io.BytesIO(b))
(pid=1522542) [2024-09-28 02:43:04,575] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
2024-09-28 02:43:07.722 | INFO     | __main__:prove_sorry_theorems:1215 - Found 24 sorry theorems to prove
Processing theorems from fpvandoorn/carleson:   0%|                            | 0/24 [00:00<?, ?theorem/s]2024-09-28 02:43:07.723 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for CoveredByBal
ls.trans
2024-09-28 02:43:07.723 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (78, 1)
2024-09-28 02:43:07.723 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for equation2_2
2024-09-28 02:43:07.723 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (177, 1)
2024-09-28 02:43:07.723 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for volume_ball_le_same
2024-09-28 02:43:07.723 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (53, 1)
2024-09-28 02:43:07.723 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for rcarleson'
2024-09-28 02:43:07.723 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (507, 1)
2024-09-28 02:43:07.723 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for partialFourierSum_eq_conv_dirichletKernel'
2024-09-28 02:43:07.724 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (198, 1)
2024-09-28 02:43:07.724 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for equation3_1
2024-09-28 02:43:07.724 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (109, 1)
2024-09-28 02:43:07.724 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for Memℒp_T
2024-09-28 02:43:07.724 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (249, 1)
2024-09-28 02:43:07.724 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for CarlesonOperatorReal'_measurable
2024-09-28 02:43:07.724 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (72, 1)
2024-09-28 02:43:07.724 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for prop2_1
2024-09-28 02:43:07.724 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (34, 1)
2024-09-28 02:43:07.724 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for prop2_3
2024-09-28 02:43:07.724 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (35, 1)
2024-09-28 02:43:07.725 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for theorem1_2C'
2024-09-28 02:43:07.725 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (203, 1)
2024-09-28 02:43:07.725 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for Hilbert_kernel_regularity
2024-09-28 02:43:07.725 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (277, 1)
2024-09-28 02:43:07.725 | INFO     | prover.proof_search:search_unordered:513 - Distributed
(ProverActor pid=1521974) 2024-09-28 02:43:07.737 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1fa54ce749af297c
6cf37'), file_path=PosixPath('Carleson/Theorem1_1/Carleson_on_the_real_line.lean'), full_name="rcarleson'")
(ProverActor pid=1522377) 2024-09-28 02:43:07.738 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1fa54ce749af297c
6cf37'), file_path=PosixPath('Carleson/HomogeneousType.lean'), full_name='volume_ball_le_same')
(ProverActor pid=1522542) /data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), wh
ich uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrus
ted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer b
e allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't h
ave full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
(ProverActor pid=1522542)   return torch.load(io.BytesIO(b))
(pid=1522742) [2024-09-28 02:43:15,537] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
(ProverActor pid=1522542) 2024-09-28 02:43:17.113 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1fa54ce749af297c
6cf37'), file_path=PosixPath('Carleson/Carleson.lean'), full_name='equation2_2')
(ProverActor pid=1522742) /data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), wh
ich uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrus
ted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer b
e allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't h
ave full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
(ProverActor pid=1522742)   return torch.load(io.BytesIO(b))
(ProverActor pid=1522742) 2024-09-28 02:43:28.202 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1fa54ce749af297c
6cf37'), file_path=PosixPath('Carleson/CoverByBalls.lean'), full_name='CoveredByBalls.trans')
(ProverActor pid=1522377) 2024-09-28 02:53:57.337 | INFO     | prover.proof_search:_best_first_search:149 - 4335718.760511941
(ProverActor pid=1522377) 2024-09-28 02:53:57.338 | INFO     | prover.proof_search:_best_first_search:150 - 4335118.762475057
(ProverActor pid=1522377) 2024-09-28 02:53:57.338 | INFO     | prover.proof_search:_best_first_search:151 - 599.998777304776
(ProverActor pid=1522377) 2024-09-28 02:53:57.338 | INFO     | prover.proof_search:_best_first_search:152 - 600
(ProverActor pid=1522377) 2024-09-28 02:53:57.338 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1522542) 2024-09-28 02:54:01.293 | INFO     | prover.proof_search:_best_first_search:152 - 600 [repeated 4x across cluster]
(ProverActor pid=1522742) 2024-09-28 02:54:06.596 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions). [repeated 2x across cluster]
(ProverActor pid=1522742) 2024-09-28 02:54:34.164 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1f
a54ce749af297c6cf37'), file_path=PosixPath('Carleson/CoverByBalls.lean'), full_name='CoveredByBalls.trans'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=528.5184376472607, environment_time=71.11766497883946,
total_time=600.9235023772344, num_total_nodes=3428, num_searched_nodes=203)
(ProverActor pid=1522742) 2024-09-28 02:54:34.170 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1fa54ce749af297c
6cf37'), file_path=PosixPath('Carleson/Theorem1_1/Dirichlet_kernel.lean'), full_name="partialFourierSum_eq_conv_dirichletKernel'")
(ProverActor pid=1521974) 2024-09-28 02:54:10.279 | INFO     | prover.proof_search:_best_first_search:152 - 600 [repeated 4x across cluster]
(ProverActor pid=1521974) 2024-09-28 02:54:10.279 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1521974) 2024-09-28 02:55:42.830 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1f
a54ce749af297c6cf37'), file_path=PosixPath('Carleson/Theorem1_1/Carleson_on_the_real_line.lean'), full_name="rcarleson'"), status=<Status.OPEN: 'Open'>, proof=None, actor_time=270.711121911183, environment_time=309.65
089857019484, total_time=600.9947893777862, num_total_nodes=2640, num_searched_nodes=73)
(ProverActor pid=1521974) 2024-09-28 02:55:42.836 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1fa54ce749af297c
6cf37'), file_path=PosixPath('Carleson/Carleson.lean'), full_name='equation3_1')
(ProverActor pid=1522542) 2024-09-28 02:55:45.984 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1f
a54ce749af297c6cf37'), file_path=PosixPath('Carleson/Carleson.lean'), full_name='equation2_2'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=319.5685488851741, environment_time=280.081653685309, total_time=600
.9998631523922, num_total_nodes=5058, num_searched_nodes=121)
(ProverActor pid=1522542) 2024-09-28 02:55:45.992 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1fa54ce749af297c
6cf37'), file_path=PosixPath('Carleson/Defs.lean'), full_name='Memℒp_T')
(ProverActor pid=1522377) 2024-09-28 02:56:27.062 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1f
a54ce749af297c6cf37'), file_path=PosixPath('Carleson/HomogeneousType.lean'), full_name='volume_ball_le_same'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=11.044229324907064, environment_time=186.456926466897
13, total_time=600.9991254331544, num_total_nodes=145, num_searched_nodes=2)
(ProverActor pid=1522377) 2024-09-28 02:56:27.068 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1fa54ce749af297c
6cf37'), file_path=PosixPath('Carleson/Theorem1_1/CarlesonOperatorReal.lean'), full_name="CarlesonOperatorReal'_measurable")
(ProverActor pid=1522742) 2024-09-28 03:05:37.469 | INFO     | prover.proof_search:_best_first_search:149 - 4336418.892166635
(ProverActor pid=1522742) 2024-09-28 03:05:37.469 | INFO     | prover.proof_search:_best_first_search:150 - 4335818.895785726
(ProverActor pid=1522742) 2024-09-28 03:05:37.469 | INFO     | prover.proof_search:_best_first_search:151 - 599.9968979218975
(ProverActor pid=1522742) 2024-09-28 03:05:37.469 | INFO     | prover.proof_search:_best_first_search:152 - 600
(ProverActor pid=1522742) 2024-09-28 03:05:37.469 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1522742) 2024-09-28 03:05:44.650 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1f
a54ce749af297c6cf37'), file_path=PosixPath('Carleson/Theorem1_1/Dirichlet_kernel.lean'), full_name="partialFourierSum_eq_conv_dirichletKernel'"), status=<Status.OPEN: 'Open'>, proof=None, actor_time=251.64320353325456
, environment_time=348.1153773441911, total_time=600.997113657184, num_total_nodes=2849, num_searched_nodes=78)
(ProverActor pid=1522742) 2024-09-28 03:05:44.656 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1fa54ce749af297c
6cf37'), file_path=PosixPath('Carleson/Proposition1.lean'), full_name='prop2_1')
(ProverActor pid=1521974) 2024-09-28 03:06:29.007 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1522542) 2024-09-28 03:06:31.673 | INFO     | prover.proof_search:_best_first_search:149 - 4336473.096219201
(ProverActor pid=1522542) 2024-09-28 03:06:31.673 | INFO     | prover.proof_search:_best_first_search:150 - 4335873.100292344
(ProverActor pid=1522542) 2024-09-28 03:06:31.673 | INFO     | prover.proof_search:_best_first_search:151 - 599.9963358584791
(ProverActor pid=1522542) 2024-09-28 03:06:31.673 | INFO     | prover.proof_search:_best_first_search:152 - 600
(ProverActor pid=1522377) 2024-09-28 03:07:08.828 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions). [repeated 2x across cluster]
(ProverActor pid=1522377) 2024-09-28 03:07:08.828 | INFO     | prover.proof_search:_best_first_search:152 - 600 [repeated 4x across cluster]
(ProverActor pid=1521974) 2024-09-28 03:07:12.801 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1f
a54ce749af297c6cf37'), file_path=PosixPath('Carleson/Carleson.lean'), full_name='equation3_1'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=351.5415601329878, environment_time=248.03710954170674, total_time=6
00.8862615851685, num_total_nodes=5484, num_searched_nodes=171)
(ProverActor pid=1521974) 2024-09-28 03:07:12.807 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1fa54ce749af297c
6cf37'), file_path=PosixPath('Carleson/Proposition3.lean'), full_name='prop2_3')
(ProverActor pid=1522377) 2024-09-28 03:07:20.186 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1f
a54ce749af297c6cf37'), file_path=PosixPath('Carleson/Theorem1_1/CarlesonOperatorReal.lean'), full_name="CarlesonOperatorReal'_measurable"), status=<Status.OPEN: 'Open'>, proof=None, actor_time=75.70392977446318, envir
onment_time=113.52175675705075, total_time=600.999098341912, num_total_nodes=981, num_searched_nodes=22)
(ProverActor pid=1522377) 2024-09-28 03:07:20.191 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1fa54ce749af297c
6cf37'), file_path=PosixPath('Carleson/Carleson.lean'), full_name="theorem1_2C'")
(ProverActor pid=1522542) 2024-09-28 03:07:57.918 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1f
a54ce749af297c6cf37'), file_path=PosixPath('Carleson/Defs.lean'), full_name='Memℒp_T'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=393.5008246311918, environment_time=206.25569971464574, total_time=600.99659
22338888, num_total_nodes=3341, num_searched_nodes=115)
(ProverActor pid=1522542) 2024-09-28 03:07:57.925 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1fa54ce749af297c
6cf37'), file_path=PosixPath('Carleson/Theorem1_1/Hilbert_kernel.lean'), full_name='Hilbert_kernel_regularity')
(ProverActor pid=1522742) 2024-09-28 03:16:19.912 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1522742) 2024-09-28 03:16:27.423 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1f
a54ce749af297c6cf37'), file_path=PosixPath('Carleson/Proposition1.lean'), full_name='prop2_1'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=404.0015335055068, environment_time=195.03099296987057, total_time=6
00.301413343288, num_total_nodes=5487, num_searched_nodes=126)
(ProverActor pid=1521974) 2024-09-28 03:17:55.613 | INFO     | prover.proof_search:_best_first_search:149 - 4337157.036223973
(ProverActor pid=1521974) 2024-09-28 03:17:55.613 | INFO     | prover.proof_search:_best_first_search:150 - 4336557.037740905
(ProverActor pid=1521974) 2024-09-28 03:17:55.613 | INFO     | prover.proof_search:_best_first_search:151 - 599.9988895384595
(ProverActor pid=1521974) 2024-09-28 03:17:55.613 | INFO     | prover.proof_search:_best_first_search:152 - 600
(ProverActor pid=1521974) 2024-09-28 03:17:55.615 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1522377) 2024-09-28 03:18:04.359 | INFO     | prover.proof_search:_best_first_search:152 - 600 [repeated 4x across cluster]
(ProverActor pid=1522377) 2024-09-28 03:18:04.362 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1521974) 2024-09-28 03:18:05.549 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1f
a54ce749af297c6cf37'), file_path=PosixPath('Carleson/Proposition3.lean'), full_name='prop2_3'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=283.124119062908, environment_time=315.5900204461068, total_time=601
.0002525039017, num_total_nodes=4163, num_searched_nodes=114)
(ProverActor pid=1522377) 2024-09-28 03:18:12.287 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1f
a54ce749af297c6cf37'), file_path=PosixPath('Carleson/Carleson.lean'), full_name="theorem1_2C'"), status=<Status.OPEN: 'Open'>, proof=None, actor_time=385.4005208397284, environment_time=211.06334432028234, total_time=
601.0004478050396, num_total_nodes=6262, num_searched_nodes=143)
(ProverActor pid=1522542) 2024-09-28 03:18:59.628 | INFO     | prover.proof_search:_best_first_search:149 - 4337221.051262591
(ProverActor pid=1522542) 2024-09-28 03:18:59.628 | INFO     | prover.proof_search:_best_first_search:150 - 4336621.056076975
(ProverActor pid=1522542) 2024-09-28 03:18:59.628 | INFO     | prover.proof_search:_best_first_search:151 - 599.9957130001858
(ProverActor pid=1522542) 2024-09-28 03:18:59.629 | INFO     | prover.proof_search:_best_first_search:152 - 600
(ProverActor pid=1522542) 2024-09-28 03:18:59.629 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
2024-09-28 03:19:06.302 | INFO     | __main__:process_theorem_batch:1161 - No proof found for CoveredByBalls.trans
2024-09-28 03:19:06.302 | INFO     | __main__:process_theorem_batch:1161 - No proof found for rcarleson'
2024-09-28 03:19:06.302 | INFO     | __main__:process_theorem_batch:1161 - No proof found for equation2_2
2024-09-28 03:19:06.302 | INFO     | __main__:process_theorem_batch:1161 - No proof found for volume_ball_le_same
2024-09-28 03:19:06.303 | INFO     | __main__:process_theorem_batch:1161 - No proof found for partialFourierSum_eq_conv_dirichletKernel'
2024-09-28 03:19:06.303 | INFO     | __main__:process_theorem_batch:1161 - No proof found for equation3_1
2024-09-28 03:19:06.303 | INFO     | __main__:process_theorem_batch:1161 - No proof found for CarlesonOperatorReal'_measurable
2024-09-28 03:19:06.303 | INFO     | __main__:process_theorem_batch:1161 - No proof found for Memℒp_T
2024-09-28 03:19:06.303 | INFO     | __main__:process_theorem_batch:1161 - No proof found for prop2_1
2024-09-28 03:19:06.303 | INFO     | __main__:process_theorem_batch:1161 - No proof found for prop2_3
2024-09-28 03:19:06.303 | INFO     | __main__:process_theorem_batch:1161 - No proof found for theorem1_2C'
2024-09-28 03:19:06.303 | INFO     | __main__:process_theorem_batch:1161 - No proof found for Hilbert_kernel_regularity
(ProverActor pid=1522542) 2024-09-28 03:19:06.300 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1f
a54ce749af297c6cf37'), file_path=PosixPath('Carleson/Theorem1_1/Hilbert_kernel.lean'), full_name='Hilbert_kernel_regularity'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=172.23953209072351, environment_time=
201.2824519323185, total_time=600.9962363531813, num_total_nodes=2336, num_searched_nodes=61)
2024-09-28 03:20:39.903 | INFO     | __main__:save_progress:1170 - Saving encountered theorems...
Processing theorems from fpvandoorn/carleson:  50%|█████████         | 12/24 [37:32<37:32, 187.68s/theorem]2024-09-28 03:20:39.906 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for card_le_of_l
e_dist
2024-09-28 03:20:39.906 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (116, 1)
2024-09-28 03:20:39.906 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for ballsCoverBalls
2024-09-28 03:20:39.907 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (122, 1)
2024-09-28 03:20:39.907 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for prop2_2
2024-09-28 03:20:39.907 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (36, 1)
2024-09-28 03:20:39.907 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for dirichletKernel_eq_ae
2024-09-28 03:20:39.907 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (112, 1)
2024-09-28 03:20:39.907 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for partialFourierSum_uniformContinuous
2024-09-28 03:20:39.907 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (105, 1)
2024-09-28 03:20:39.907 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for dirichletKernel'_periodic
2024-09-28 03:20:39.908 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (22, 1)
2024-09-28 03:20:39.908 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for theorem1_2C
2024-09-28 03:20:39.908 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (191, 1)
2024-09-28 03:20:39.908 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for dirichletKernel_periodic
2024-09-28 03:20:39.908 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (19, 1)
2024-09-28 03:20:39.908 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for fourier_uniformContinuous
2024-09-28 03:20:39.908 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (99, 1)
2024-09-28 03:20:39.908 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for volume_ball_le_of_dist_le
2024-09-28 03:20:39.908 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (96, 1)
2024-09-28 03:20:39.908 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for volume_ball_le_of_subset
2024-09-28 03:20:39.908 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (102, 1)
2024-09-28 03:20:39.909 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for CarlesonOperatorRat'_measurable
2024-09-28 03:20:39.909 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (48, 1)
2024-09-28 03:20:39.909 | INFO     | prover.proof_search:search_unordered:513 - Distributed
(ProverActor pid=1521974) 2024-09-28 03:20:39.916 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1fa54ce749af297c
6cf37'), file_path=PosixPath('Carleson/Proposition2.lean'), full_name='prop2_2')
(ProverActor pid=1522377) 2024-09-28 03:20:39.915 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1fa54ce749af297c
6cf37'), file_path=PosixPath('Carleson/HomogeneousType.lean'), full_name='ballsCoverBalls')
(ProverActor pid=1522542) 2024-09-28 03:20:39.912 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1fa54ce749af297c
6cf37'), file_path=PosixPath('Carleson/HomogeneousType.lean'), full_name='card_le_of_le_dist')
(ProverActor pid=1522742) 2024-09-28 03:20:39.917 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1fa54ce749af297c
6cf37'), file_path=PosixPath('Carleson/Theorem1_1/Dirichlet_kernel.lean'), full_name='dirichletKernel_eq_ae')
(ProverActor pid=1522542) 2024-09-28 03:31:21.723 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1521974) 2024-09-28 03:31:22.175 | INFO     | prover.proof_search:_best_first_search:149 - 4337963.598416751
(ProverActor pid=1521974) 2024-09-28 03:31:22.175 | INFO     | prover.proof_search:_best_first_search:150 - 4337363.600960978
(ProverActor pid=1521974) 2024-09-28 03:31:22.176 | INFO     | prover.proof_search:_best_first_search:151 - 599.9981181295589
(ProverActor pid=1521974) 2024-09-28 03:31:22.176 | INFO     | prover.proof_search:_best_first_search:152 - 600
(ProverActor pid=1522542) 2024-09-28 03:31:31.320 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1f
a54ce749af297c6cf37'), file_path=PosixPath('Carleson/HomogeneousType.lean'), full_name='card_le_of_le_dist'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=323.29420830495656, environment_time=276.0039075883105
4, total_time=600.5119270002469, num_total_nodes=3730, num_searched_nodes=132)
(ProverActor pid=1522542) 2024-09-28 03:31:31.325 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1fa54ce749af297c
6cf37'), file_path=PosixPath('Carleson/Theorem1_1/Basic.lean'), full_name='partialFourierSum_uniformContinuous')
(ProverActor pid=1522377) 2024-09-28 03:31:22.231 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions). [repeated 2x across cluster]
(ProverActor pid=1522377) 2024-09-28 03:31:22.229 | INFO     | prover.proof_search:_best_first_search:152 - 600 [repeated 4x across cluster]
(ProverActor pid=1522377) 2024-09-28 03:31:31.626 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1f
a54ce749af297c6cf37'), file_path=PosixPath('Carleson/HomogeneousType.lean'), full_name='ballsCoverBalls'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=494.66278692148626, environment_time=103.08973433077335,
total_time=601.0000874223188, num_total_nodes=5513, num_searched_nodes=162)
(ProverActor pid=1522377) 2024-09-28 03:31:31.632 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1fa54ce749af297c
6cf37'), file_path=PosixPath('Carleson/Theorem1_1/Dirichlet_kernel.lean'), full_name="dirichletKernel'_periodic")
(ProverActor pid=1522742) 2024-09-28 03:31:42.257 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1522742) 2024-09-28 03:31:42.257 | INFO     | prover.proof_search:_best_first_search:152 - 600 [repeated 4x across cluster]
(ProverActor pid=1521974) 2024-09-28 03:31:46.165 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1f
a54ce749af297c6cf37'), file_path=PosixPath('Carleson/Proposition2.lean'), full_name='prop2_2'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=375.91418279055506, environment_time=223.70610845368356, total_time=
600.9985107099637, num_total_nodes=5143, num_searched_nodes=125)
(ProverActor pid=1521974) 2024-09-28 03:31:46.171 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1fa54ce749af297c
6cf37'), file_path=PosixPath('Carleson/Carleson.lean'), full_name='theorem1_2C')
(ProverActor pid=1522742) 2024-09-28 03:31:55.328 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1f
a54ce749af297c6cf37'), file_path=PosixPath('Carleson/Theorem1_1/Dirichlet_kernel.lean'), full_name='dirichletKernel_eq_ae'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=115.28434084355831, environment_time=12
5.37960869818926, total_time=600.9969761036336, num_total_nodes=1212, num_searched_nodes=41)
(ProverActor pid=1522742) 2024-09-28 03:31:55.333 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1fa54ce749af297c
6cf37'), file_path=PosixPath('Carleson/Theorem1_1/Dirichlet_kernel.lean'), full_name='dirichletKernel_periodic')
(ProverActor pid=1522742) 2024-09-28 03:32:34.496 | INFO     | prover.proof_search:_best_first_search:171 - Found a proof!
(ProverActor pid=1522742) 2024-09-28 03:32:43.758 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1f
a54ce749af297c6cf37'), file_path=PosixPath('Carleson/Theorem1_1/Dirichlet_kernel.lean'), full_name='dirichletKernel_periodic'), status=<Status.PROVED: 'Proved'>, proof=['simp [dirichletKernel]'], actor_time=2.46180132
03144073, environment_time=0.7279835967347026, total_time=4.190798501484096, num_total_nodes=27, num_searched_nodes=1)
(ProverActor pid=1522742) 2024-09-28 03:32:43.764 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1fa54ce749af297c
6cf37'), file_path=PosixPath('Carleson/Theorem1_1/Basic.lean'), full_name='fourier_uniformContinuous')
(ProverActor pid=1522377) 2024-09-28 03:42:09.292 | INFO     | prover.proof_search:_best_first_search:149 - 4338610.71547127
(ProverActor pid=1522377) 2024-09-28 03:42:09.293 | INFO     | prover.proof_search:_best_first_search:150 - 4338010.718593512
(ProverActor pid=1522377) 2024-09-28 03:42:09.293 | INFO     | prover.proof_search:_best_first_search:151 - 599.9976252578199
(ProverActor pid=1522377) 2024-09-28 03:42:09.293 | INFO     | prover.proof_search:_best_first_search:152 - 600
(ProverActor pid=1522377) 2024-09-28 03:42:09.293 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1522377) 2024-09-28 03:42:18.318 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1f
a54ce749af297c6cf37'), file_path=PosixPath('Carleson/Theorem1_1/Dirichlet_kernel.lean'), full_name="dirichletKernel'_periodic"), status=<Status.OPEN: 'Open'>, proof=None, actor_time=138.69757738243788, environment_tim
e=461.1099939532578, total_time=600.9979321565479, num_total_nodes=1807, num_searched_nodes=65)
(ProverActor pid=1522377) 2024-09-28 03:42:18.324 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1fa54ce749af297c
6cf37'), file_path=PosixPath('Carleson/HomogeneousType.lean'), full_name='volume_ball_le_of_dist_le')
(ProverActor pid=1522542) 2024-09-28 03:42:13.938 | INFO     | prover.proof_search:_best_first_search:152 - 600 [repeated 4x across cluster]
(ProverActor pid=1522542) 2024-09-28 03:42:13.938 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1522542) 2024-09-28 03:42:23.247 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1f
a54ce749af297c6cf37'), file_path=PosixPath('Carleson/Theorem1_1/Basic.lean'), full_name='partialFourierSum_uniformContinuous'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=18.913814021274447, environment_time
=46.92674613278359, total_time=600.998247477226, num_total_nodes=225, num_searched_nodes=5)
(ProverActor pid=1522542) 2024-09-28 03:42:23.252 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1fa54ce749af297c
6cf37'), file_path=PosixPath('Carleson/HomogeneousType.lean'), full_name='volume_ball_le_of_subset')
(ProverActor pid=1521974) 2024-09-28 03:42:27.730 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1521974) 2024-09-28 03:42:27.729 | INFO     | prover.proof_search:_best_first_search:152 - 600 [repeated 4x across cluster]
(ProverActor pid=1521974) 2024-09-28 03:42:52.357 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1f
a54ce749af297c6cf37'), file_path=PosixPath('Carleson/Carleson.lean'), full_name='theorem1_2C'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=391.4444350125268, environment_time=208.2574235200882, total_time=60
0.9972208160907, num_total_nodes=6353, num_searched_nodes=141)
(ProverActor pid=1521974) 2024-09-28 03:42:52.362 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1fa54ce749af297c
6cf37'), file_path=PosixPath('Carleson/Theorem1_1/CarlesonOperatorReal.lean'), full_name="CarlesonOperatorRat'_measurable")
(ProverActor pid=1522742) 2024-09-28 03:43:28.267 | INFO     | prover.proof_search:_best_first_search:149 - 4338689.690135289
(ProverActor pid=1522742) 2024-09-28 03:43:28.267 | INFO     | prover.proof_search:_best_first_search:150 - 4338089.693987906
(ProverActor pid=1522742) 2024-09-28 03:43:28.267 | INFO     | prover.proof_search:_best_first_search:151 - 599.996745779179
(ProverActor pid=1522742) 2024-09-28 03:43:28.268 | INFO     | prover.proof_search:_best_first_search:152 - 600
(ProverActor pid=1522742) 2024-09-28 03:43:28.268 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1522742) 2024-09-28 03:45:57.032 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1f
a54ce749af297c6cf37'), file_path=PosixPath('Carleson/Theorem1_1/Basic.lean'), full_name='fourier_uniformContinuous'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=33.41973081510514, environment_time=31.8410094
56664324, total_time=600.9971215976402, num_total_nodes=414, num_searched_nodes=10)
(ProverActor pid=1522377) 2024-09-28 03:52:57.025 | INFO     | prover.proof_search:_best_first_search:149 - 4339258.448860982
(ProverActor pid=1522377) 2024-09-28 03:52:57.026 | INFO     | prover.proof_search:_best_first_search:150 - 4338658.451222843
(ProverActor pid=1522377) 2024-09-28 03:52:57.026 | INFO     | prover.proof_search:_best_first_search:151 - 599.9981154426932
(ProverActor pid=1522377) 2024-09-28 03:52:57.026 | INFO     | prover.proof_search:_best_first_search:152 - 600
(ProverActor pid=1522377) 2024-09-28 03:52:57.026 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1522542) 2024-09-28 03:53:02.496 | INFO     | prover.proof_search:_best_first_search:152 - 600 [repeated 4x across cluster]
(ProverActor pid=1522542) 2024-09-28 03:53:02.496 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1522542) 2024-09-28 03:53:12.115 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1f
a54ce749af297c6cf37'), file_path=PosixPath('Carleson/HomogeneousType.lean'), full_name='volume_ball_le_of_subset'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=7.837242370471358, environment_time=99.301163590
51317, total_time=600.9978426918387, num_total_nodes=98, num_searched_nodes=2)
(ProverActor pid=1522377) 2024-09-28 03:53:16.406 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1f
a54ce749af297c6cf37'), file_path=PosixPath('Carleson/HomogeneousType.lean'), full_name='volume_ball_le_of_dist_le'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=366.70239499863237, environment_time=187.195410
62507778, total_time=600.9986004345119, num_total_nodes=5016, num_searched_nodes=130)
(ProverActor pid=1521974) 2024-09-28 03:53:28.157 | INFO     | prover.proof_search:_best_first_search:149 - 4339289.580433734
(ProverActor pid=1521974) 2024-09-28 03:53:28.157 | INFO     | prover.proof_search:_best_first_search:150 - 4338689.582011668
(ProverActor pid=1521974) 2024-09-28 03:53:28.157 | INFO     | prover.proof_search:_best_first_search:151 - 599.9988519670442
(ProverActor pid=1521974) 2024-09-28 03:53:28.158 | INFO     | prover.proof_search:_best_first_search:152 - 600
(ProverActor pid=1521974) 2024-09-28 03:53:28.158 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
2024-09-28 03:53:34.666 | INFO     | __main__:process_theorem_batch:1161 - No proof found for card_le_of_le_dist
2024-09-28 03:53:34.667 | INFO     | __main__:process_theorem_batch:1161 - No proof found for ballsCoverBalls
2024-09-28 03:53:34.667 | INFO     | __main__:process_theorem_batch:1161 - No proof found for prop2_2
2024-09-28 03:53:34.667 | INFO     | __main__:process_theorem_batch:1161 - No proof found for dirichletKernel_eq_ae
2024-09-28 03:53:34.667 | INFO     | __main__:process_theorem_batch:1147 - Proof found for dirichletKernel_periodic
2024-09-28 03:53:34.670 | INFO     | dynamic_database:update_repository:614 - Attempting to update repository: https://github.com/fpvandoorn/carleson (commit: bec7808b907190882fa1fa54ce749af297c6cf37)
2024-09-28 03:53:34.670 | INFO     | dynamic_database:update_repository:618 - Updated repository: https://github.com/fpvandoorn/carleson (commit: bec7808b907190882fa1fa54ce749af297c6cf37)
2024-09-28 03:53:34.670 | INFO     | __main__:process_theorem_batch:1159 - Updated theorem dirichletKernel_periodic in the database
2024-09-28 03:53:34.670 | INFO     | __main__:process_theorem_batch:1161 - No proof found for dirichletKernel'_periodic
2024-09-28 03:53:34.670 | INFO     | __main__:process_theorem_batch:1161 - No proof found for partialFourierSum_uniformContinuous
2024-09-28 03:53:34.670 | INFO     | __main__:process_theorem_batch:1161 - No proof found for theorem1_2C
2024-09-28 03:53:34.670 | INFO     | __main__:process_theorem_batch:1161 - No proof found for fourier_uniformContinuous
2024-09-28 03:53:34.670 | INFO     | __main__:process_theorem_batch:1161 - No proof found for volume_ball_le_of_subset
2024-09-28 03:53:34.671 | INFO     | __main__:process_theorem_batch:1161 - No proof found for volume_ball_le_of_dist_le
2024-09-28 03:53:34.671 | INFO     | __main__:process_theorem_batch:1161 - No proof found for CarlesonOperatorRat'_measurable
(ProverActor pid=1521974) 2024-09-28 03:53:34.664 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/fpvandoorn/carleson', commit='bec7808b907190882fa1f
a54ce749af297c6cf37'), file_path=PosixPath('Carleson/Theorem1_1/CarlesonOperatorReal.lean'), full_name="CarlesonOperatorRat'_measurable"), status=<Status.OPEN: 'Open'>, proof=None, actor_time=91.93340097926557, enviro
nment_time=463.52027828246355, total_time=600.9990872237831, num_total_nodes=1377, num_searched_nodes=30)
2024-09-28 03:54:55.231 | INFO     | __main__:save_progress:1170 - Saving encountered theorems...
Processing theorems from fpvandoorn/carleson: 100%|████████████████| 24/24 [1:11:47<00:00, 179.48s/theorem]
2024-09-28 03:54:55.234 | INFO     | __main__:save_progress:1170 - Saving encountered theorems...
2024-09-28 03:54:55.235 | INFO     | __main__:prove_sorry_theorems:1266 - Finished attempting to prove sorry theorems
2024-09-28 03:56:23.636 | INFO     | __main__:main:2076 - Finished searching for proofs of sorry theorems
2024-09-28 03:56:23.636 | INFO     | __main__:main:2079 - Shutting down Ray after proving
2024-09-28 03:56:26.136 | INFO     | __main__:main:2099 - Finished processing the repository
2024-09-28 03:56:26.137 | INFO     | __main__:main:2101 - current epoch: 4
2024-09-28 03:56:26.137 | INFO     | __main__:main:1774 - length of lean_git_repos: 8
2024-09-28 03:56:26.137 | INFO     | __main__:main:1775 - i: 4
2024-09-28 03:56:26.137 | INFO     | __main__:main:1781 - Main process
2024-09-28 03:56:26.137 | INFO     | __main__:main:1782 - Using lambda = 0.0
2024-09-28 03:56:26.137 | INFO     | __main__:main:1783 - Processing https://github.com/YaelDillies/LeanAPAP
2024-09-28 03:56:26.137 | INFO     | __main__:main:1790 - Adding repo to repos_for_merged_dataset
2024-09-28 03:56:26.138 | INFO     | dynamic_database:generate_merged_dataset:415 - Merging selected repositories in the database:
2024-09-28 03:56:26.138 | INFO     | dynamic_database:generate_merged_dataset:417 -   - https://github.com/YaelDillies/LeanAPAP (commit: 951c660a8d7ba8e39f906fdf657674a984effa8b)
2024-09-28 03:57:14.472 | WARNING  | dynamic_database:safe_remove_dir_path:377 - /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_LeanAPAP_951c660a8d7ba8e39f906fdf657674a984effa8b already exists
. Removing it now.
2024-09-28 03:57:30.822 | INFO     | dynamic_database:generate_merged_dataset:439 - Exported proofs to /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_LeanAPAP_951c660a8d7ba8e39f906fdf657674a98
4effa8b
2024-09-28 03:57:31.204 | INFO     | dynamic_database:generate_merged_dataset:442 - Merged and exported corpus to /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_LeanAPAP_951c660a8d7ba8e39f906f
df657674a984effa8b
2024-09-28 03:57:31.213 | INFO     | dynamic_database:generate_merged_dataset:445 - Exported traced files to /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_LeanAPAP_951c660a8d7ba8e39f906fdf657
674a984effa8b
2024-09-28 03:57:31.214 | INFO     | dynamic_database:generate_merged_dataset:448 - Exported metadata to /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_LeanAPAP_951c660a8d7ba8e39f906fdf657674a
984effa8b
2024-09-28 03:57:31.228 | INFO     | __main__:main:1802 - All GPUs
2024-09-28 03:57:31.228 | INFO     | __main__:main:2037 - Starting the prover
2024-09-28 03:57:31.228 | INFO     | prover.proof_search:__init__:407 - Inside __init__
2024-09-28 03:57:31.228 | INFO     | prover.proof_search:__init__:412 - ckpt_path is not None
2024-09-28 03:57:31.228 | INFO     | prover.proof_search:__init__:427 - Using RAG
Lightning automatically upgraded your loaded checkpoint from v0.0.0 to v2.2.4. To apply the upgrade to your files permanently, run `python -m pytorch_lightning.utilities.upgrade_checkpoint ../model_lightning.ckpt`
2024-09-28 03:57:32.074 | INFO     | generator.model:__init__:124 - Retriever checkpoint path: /data/yingzi_ma/lean_project/checkpoints/mathlib4_29dcec074de168ac2bf835a77ef68bbe069194c5.ckpt
2024-09-28 03:57:32.074 | INFO     | generator.model:__init__:138 - Loading the retriever from /data/yingzi_ma/lean_project/checkpoints/mathlib4_29dcec074de168ac2bf835a77ef68bbe069194c5.ckpt
Lightning automatically upgraded your loaded checkpoint from v0.0.0 to v2.2.4. To apply the upgrade to your files permanently, run `python -m pytorch_lightning.utilities.upgrade_checkpoint ../checkpoints/mathlib4_29dc
ec074de168ac2bf835a77ef68bbe069194c5.ckpt`
2024-09-28 03:57:35.463 | INFO     | generator.model:__init__:151 - RetrievalAugmentedGenerator initialized
2024-09-28 03:57:35.924 | INFO     | prover.proof_search:__init__:451 - Loaded model from /data/yingzi_ma/lean_project/model_lightning.ckpt
2024-09-28 03:57:35.925 | INFO     | prover.proof_search:__init__:452 - Using retriever: PremiseRetriever(
  (encoder): T5EncoderModel(
    (shared): Embedding(384, 1472)
    (encoder): T5Stack(
      (embed_tokens): Embedding(384, 1472)
      (block): ModuleList(
        (0): T5Block(
          (layer): ModuleList(
            (0): T5LayerSelfAttention(
              (SelfAttention): T5Attention(
                (q): Linear(in_features=1472, out_features=384, bias=False)
                (k): Linear(in_features=1472, out_features=384, bias=False)
                (v): Linear(in_features=1472, out_features=384, bias=False)
                (o): Linear(in_features=384, out_features=1472, bias=False)
                (relative_attention_bias): Embedding(32, 6)
              )
              (layer_norm): T5LayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
            (1): T5LayerFF(
              (DenseReluDense): T5DenseGatedActDense(
                (wi_0): Linear(in_features=1472, out_features=3584, bias=False)
                (wi_1): Linear(in_features=1472, out_features=3584, bias=False)
                (wo): Linear(in_features=3584, out_features=1472, bias=False)
                (dropout): Dropout(p=0.1, inplace=False)
                (act): NewGELUActivation()
              )
              (layer_norm): T5LayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
        )
        (1-11): 11 x T5Block(
          (layer): ModuleList(
            (0): T5LayerSelfAttention(
              (SelfAttention): T5Attention(
                (q): Linear(in_features=1472, out_features=384, bias=False)
                (k): Linear(in_features=1472, out_features=384, bias=False)
                (v): Linear(in_features=1472, out_features=384, bias=False)
                (o): Linear(in_features=384, out_features=1472, bias=False)
              )
              (layer_norm): T5LayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
            (1): T5LayerFF(
              (DenseReluDense): T5DenseGatedActDense(
                (wi_0): Linear(in_features=1472, out_features=3584, bias=False)
                (wi_1): Linear(in_features=1472, out_features=3584, bias=False)
                (wo): Linear(in_features=3584, out_features=1472, bias=False)
                (dropout): Dropout(p=0.1, inplace=False)
                (act): NewGELUActivation()
              )
              (layer_norm): T5LayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
        )
      )
      (final_layer_norm): T5LayerNorm()
      (dropout): Dropout(p=0.1, inplace=False)
    )
  )
)
2024-09-28 03:57:35.925 | INFO     | prover.proof_search:__init__:455 - Loading indexed corpus from /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_LeanAPAP_951c660a8d7ba8e39f906fdf657674a984ef
fa8b/corpus.jsonl
2024-09-28 03:57:42.276 | INFO     | prover.proof_search:__init__:457 - Loaded indexed corpus from /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_LeanAPAP_951c660a8d7ba8e39f906fdf657674a984eff
a8b/corpus.jsonl
2024-09-28 03:57:42.277 | INFO     | retrieval.model:reindex_corpus:284 - Re-indexing the retrieval corpus
100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 3422/3422 [05:18<00:00, 10.76it/s]
2024-09-28 04:03:00.358 | INFO     | prover.proof_search:__init__:459 - Finished reindexing!
2024-09-28 04:03:00.358 | INFO     | prover.proof_search:__init__:470 - Launching 4 workers with 4 GPUs.
2024-09-28 04:03:04,410 INFO worker.py:1774 -- Started a local Ray instance. View the dashboard at 127.0.0.1:8265
(pid=1604659) [2024-09-28 04:03:46,095] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
(ProverActor pid=1604659) /data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), wh
ich uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrus
ted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer b
e allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't h
ave full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
(ProverActor pid=1604659)   return torch.load(io.BytesIO(b))
(pid=1605055) [2024-09-28 04:03:54,989] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
(ProverActor pid=1605055) /data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), wh
ich uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrus
ted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer b
e allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't h
ave full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
(ProverActor pid=1605055)   return torch.load(io.BytesIO(b))
(pid=1605242) [2024-09-28 04:04:06,354] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
(ProverActor pid=1605242) /data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), wh
ich uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrus
ted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer b
e allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't h
ave full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
(ProverActor pid=1605242)   return torch.load(io.BytesIO(b))
2024-09-28 04:04:10.571 | INFO     | __main__:prove_sorry_theorems:1215 - Found 6 sorry theorems to prove
Processing theorems from YaelDillies/LeanAPAP:   0%|                                                                                                                                          | 0/6 [00:00<?, ?theorem/s]
2024-09-28 04:04:10.572 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for pow_inner_nonneg'
2024-09-28 04:04:10.573 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (16, 1)
2024-09-28 04:04:10.573 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for pow_inner_nonneg
2024-09-28 04:04:10.573 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (42, 1)
2024-09-28 04:04:10.574 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for di_in_ff
2024-09-28 04:04:10.574 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (73, 1)
2024-09-28 04:04:10.574 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for nlpNorm_nconv_le_nlpNorm_ndconv
2024-09-28 04:04:10.574 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (162, 1)
2024-09-28 04:04:10.574 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for lpNorm_conv_le_lpNorm_dconv
2024-09-28 04:04:10.574 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (154, 1)
2024-09-28 04:04:10.575 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for BohrSet.le_card_smul
2024-09-28 04:04:10.575 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (84, 1)
Processing theorems from YaelDillies/LeanAPAP: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 6/6 [00:00<00:00, 2088.97theorem/s]
2024-09-28 04:04:10.575 | INFO     | prover.proof_search:search_unordered:513 - Distributed
(ProverActor pid=1604659) 2024-09-28 04:04:10.589 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/YaelDillies/LeanAPAP', commit='951c660a8d7ba8e39f906fdf657674a984
effa8b'), file_path=PosixPath('LeanAPAP/Prereqs/Discrete/DFT/Compact.lean'), full_name='nlpNorm_nconv_le_nlpNorm_ndconv')
(ProverActor pid=1605055) 2024-09-28 04:04:10.587 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/YaelDillies/LeanAPAP', commit='951c660a8d7ba8e39f906fdf657674a984
effa8b'), file_path=PosixPath('LeanAPAP/FiniteField/Basic.lean'), full_name='di_in_ff')
(pid=1605427) [2024-09-28 04:04:18,748] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
(ProverActor pid=1605242) 2024-09-28 04:04:18.822 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/YaelDillies/LeanAPAP', commit='951c660a8d7ba8e39f906fdf657674a984
effa8b'), file_path=PosixPath('LeanAPAP/Physics/Unbalancing.lean'), full_name='pow_inner_nonneg')
(ProverActor pid=1605427) /data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), wh
ich uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrus
ted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer b
e allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't h
ave full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
(ProverActor pid=1605427)   return torch.load(io.BytesIO(b))
(ProverActor pid=1605427) 2024-09-28 04:04:31.131 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/YaelDillies/LeanAPAP', commit='951c660a8d7ba8e39f906fdf657674a984
effa8b'), file_path=PosixPath('LeanAPAP/Physics/Unbalancing.lean'), full_name="pow_inner_nonneg'")
(ProverActor pid=1605242) 2024-09-28 04:15:05.582 | INFO     | prover.proof_search:_best_first_search:149 - 4340587.004987439
(ProverActor pid=1605242) 2024-09-28 04:15:05.582 | INFO     | prover.proof_search:_best_first_search:150 - 4339987.007895664
(ProverActor pid=1605242) 2024-09-28 04:15:05.582 | INFO     | prover.proof_search:_best_first_search:151 - 599.99760273844
(ProverActor pid=1605242) 2024-09-28 04:15:05.582 | INFO     | prover.proof_search:_best_first_search:152 - 600
(ProverActor pid=1605242) 2024-09-28 04:15:05.582 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1605242) 2024-09-28 04:15:14.940 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/YaelDillies/LeanAPAP', commit='951c660a8d7ba8e39f90
6fdf657674a984effa8b'), file_path=PosixPath('LeanAPAP/Physics/Unbalancing.lean'), full_name='pow_inner_nonneg'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=398.42047678958625, environment_time=201.2983569568
023, total_time=600.9979548472911, num_total_nodes=3619, num_searched_nodes=159)
(ProverActor pid=1605242) 2024-09-28 04:15:14.948 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/YaelDillies/LeanAPAP', commit='951c660a8d7ba8e39f906fdf657674a984
effa8b'), file_path=PosixPath('LeanAPAP/Prereqs/Discrete/DFT/Basic.lean'), full_name='lpNorm_conv_le_lpNorm_dconv')
(ProverActor pid=1605055) 2024-09-28 04:15:07.790 | INFO     | prover.proof_search:_best_first_search:152 - 600 [repeated 4x across cluster]
(ProverActor pid=1605055) 2024-09-28 04:15:07.790 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1604659) 2024-09-28 04:15:15.403 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1605055) 2024-09-28 04:15:18.975 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/YaelDillies/LeanAPAP', commit='951c660a8d7ba8e39f90
6fdf657674a984effa8b'), file_path=PosixPath('LeanAPAP/FiniteField/Basic.lean'), full_name='di_in_ff'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=195.10100310482085, environment_time=403.45311915967613, tota
l_time=600.9990174686536, num_total_nodes=2037, num_searched_nodes=83)
(ProverActor pid=1605055) 2024-09-28 04:15:18.982 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/YaelDillies/LeanAPAP', commit='951c660a8d7ba8e39f906fdf657674a984
effa8b'), file_path=PosixPath('LeanAPAP/Prereqs/Bohr/Basic.lean'), full_name='BohrSet.le_card_smul')
(ProverActor pid=1605427) 2024-09-28 04:15:23.619 | INFO     | prover.proof_search:_best_first_search:152 - 600 [repeated 8x across cluster]
(ProverActor pid=1605427) 2024-09-28 04:15:23.619 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1604659) 2024-09-28 04:15:25.970 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/YaelDillies/LeanAPAP', commit='951c660a8d7ba8e39f90
6fdf657674a984effa8b'), file_path=PosixPath('LeanAPAP/Prereqs/Discrete/DFT/Compact.lean'), full_name='nlpNorm_nconv_le_nlpNorm_ndconv'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=77.36254470143467, environm
ent_time=267.4243856817484, total_time=600.9976117759943, num_total_nodes=830, num_searched_nodes=28)
(ProverActor pid=1605427) 2024-09-28 04:15:36.383 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/YaelDillies/LeanAPAP', commit='951c660a8d7ba8e39f90
6fdf657674a984effa8b'), file_path=PosixPath('LeanAPAP/Physics/Unbalancing.lean'), full_name="pow_inner_nonneg'"), status=<Status.OPEN: 'Open'>, proof=None, actor_time=150.3645781520754, environment_time=366.2695447821
17, total_time=600.9969299426302, num_total_nodes=1840, num_searched_nodes=64)
(ProverActor pid=1605055) 2024-09-28 04:25:57.655 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1605242) 2024-09-28 04:26:01.319 | INFO     | prover.proof_search:_best_first_search:149 - 4341242.742076963
(ProverActor pid=1605242) 2024-09-28 04:26:01.320 | INFO     | prover.proof_search:_best_first_search:150 - 4340642.745198546
(ProverActor pid=1605242) 2024-09-28 04:26:01.320 | INFO     | prover.proof_search:_best_first_search:151 - 599.9982353439555
(ProverActor pid=1605242) 2024-09-28 04:26:01.320 | INFO     | prover.proof_search:_best_first_search:152 - 600
(ProverActor pid=1605055) 2024-09-28 04:26:06.775 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/YaelDillies/LeanAPAP', commit='951c660a8d7ba8e39f90
6fdf657674a984effa8b'), file_path=PosixPath('LeanAPAP/Prereqs/Bohr/Basic.lean'), full_name='BohrSet.le_card_smul'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=142.32606429513544, environment_time=457.2248488
3479774, total_time=600.644248525612, num_total_nodes=2162, num_searched_nodes=54)
(ProverActor pid=1605242) 2024-09-28 04:26:01.320 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
2024-09-28 04:26:08.825 | INFO     | __main__:process_theorem_batch:1161 - No proof found for pow_inner_nonneg
2024-09-28 04:26:08.825 | INFO     | __main__:process_theorem_batch:1161 - No proof found for di_in_ff
2024-09-28 04:26:08.825 | INFO     | __main__:process_theorem_batch:1161 - No proof found for nlpNorm_nconv_le_nlpNorm_ndconv
2024-09-28 04:26:08.825 | INFO     | __main__:process_theorem_batch:1161 - No proof found for pow_inner_nonneg'
2024-09-28 04:26:08.825 | INFO     | __main__:process_theorem_batch:1161 - No proof found for BohrSet.le_card_smul
2024-09-28 04:26:08.825 | INFO     | __main__:process_theorem_batch:1161 - No proof found for lpNorm_conv_le_lpNorm_dconv
(ProverActor pid=1605242) 2024-09-28 04:26:08.822 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/YaelDillies/LeanAPAP', commit='951c660a8d7ba8e39f90
6fdf657674a984effa8b'), file_path=PosixPath('LeanAPAP/Prereqs/Discrete/DFT/Basic.lean'), full_name='lpNorm_conv_le_lpNorm_dconv'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=20.67134933359921, environment_ti
me=33.99291938263923, total_time=600.9984707096592, num_total_nodes=257, num_searched_nodes=7)
2024-09-28 04:27:41.843 | INFO     | __main__:save_progress:1170 - Saving encountered theorems...
2024-09-28 04:27:41.845 | INFO     | __main__:prove_sorry_theorems:1266 - Finished attempting to prove sorry theorems
2024-09-28 04:29:03.618 | INFO     | __main__:main:2076 - Finished searching for proofs of sorry theorems
2024-09-28 04:29:03.619 | INFO     | __main__:main:2079 - Shutting down Ray after proving
2024-09-28 04:29:07.095 | INFO     | __main__:main:2099 - Finished processing the repository
2024-09-28 04:29:07.095 | INFO     | __main__:main:2101 - current epoch: 5
2024-09-28 04:29:07.095 | INFO     | __main__:main:1774 - length of lean_git_repos: 8
2024-09-28 04:29:07.095 | INFO     | __main__:main:1775 - i: 5
2024-09-28 04:29:07.095 | INFO     | __main__:main:1781 - Main process
2024-09-28 04:29:07.095 | INFO     | __main__:main:1782 - Using lambda = 0.0
2024-09-28 04:29:07.095 | INFO     | __main__:main:1783 - Processing https://github.com/corent1234/hairy-ball-theorem-lean
2024-09-28 04:29:07.096 | INFO     | __main__:main:1790 - Adding repo to repos_for_merged_dataset
2024-09-28 04:29:07.096 | INFO     | dynamic_database:generate_merged_dataset:415 - Merging selected repositories in the database:
2024-09-28 04:29:07.096 | INFO     | dynamic_database:generate_merged_dataset:417 -   - https://github.com/corent1234/hairy-ball-theorem-lean (commit: a778826d19c8a7ddf1d26beeea628c45450612e6)
2024-09-28 04:29:56.617 | WARNING  | dynamic_database:safe_remove_dir_path:377 - /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_hairy-ball-theorem-lean_a778826d19c8a7ddf1d26beeea628c45450612e6
 already exists. Removing it now.
2024-09-28 04:30:13.806 | INFO     | dynamic_database:generate_merged_dataset:439 - Exported proofs to /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_hairy-ball-theorem-lean_a778826d19c8a7ddf1
d26beeea628c45450612e6
2024-09-28 04:30:14.236 | INFO     | dynamic_database:generate_merged_dataset:442 - Merged and exported corpus to /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_hairy-ball-theorem-lean_a778826
d19c8a7ddf1d26beeea628c45450612e6
2024-09-28 04:30:14.244 | INFO     | dynamic_database:generate_merged_dataset:445 - Exported traced files to /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_hairy-ball-theorem-lean_a778826d19c8
a7ddf1d26beeea628c45450612e6
2024-09-28 04:30:14.246 | INFO     | dynamic_database:generate_merged_dataset:448 - Exported metadata to /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_hairy-ball-theorem-lean_a778826d19c8a7dd
f1d26beeea628c45450612e6
2024-09-28 04:30:14.259 | INFO     | __main__:main:1802 - All GPUs
2024-09-28 04:30:14.260 | INFO     | __main__:main:2037 - Starting the prover
2024-09-28 04:30:14.260 | INFO     | prover.proof_search:__init__:407 - Inside __init__
2024-09-28 04:30:14.260 | INFO     | prover.proof_search:__init__:412 - ckpt_path is not None
2024-09-28 04:30:14.260 | INFO     | prover.proof_search:__init__:427 - Using RAG
Lightning automatically upgraded your loaded checkpoint from v0.0.0 to v2.2.4. To apply the upgrade to your files permanently, run `python -m pytorch_lightning.utilities.upgrade_checkpoint ../model_lightning.ckpt`
2024-09-28 04:30:14.620 | INFO     | generator.model:__init__:124 - Retriever checkpoint path: /data/yingzi_ma/lean_project/checkpoints/mathlib4_29dcec074de168ac2bf835a77ef68bbe069194c5.ckpt
2024-09-28 04:30:14.620 | INFO     | generator.model:__init__:138 - Loading the retriever from /data/yingzi_ma/lean_project/checkpoints/mathlib4_29dcec074de168ac2bf835a77ef68bbe069194c5.ckpt
Lightning automatically upgraded your loaded checkpoint from v0.0.0 to v2.2.4. To apply the upgrade to your files permanently, run `python -m pytorch_lightning.utilities.upgrade_checkpoint ../checkpoints/mathlib4_29dc
ec074de168ac2bf835a77ef68bbe069194c5.ckpt`
2024-09-28 04:30:16.572 | INFO     | generator.model:__init__:151 - RetrievalAugmentedGenerator initialized
2024-09-28 04:30:17.027 | INFO     | prover.proof_search:__init__:451 - Loaded model from /data/yingzi_ma/lean_project/model_lightning.ckpt
2024-09-28 04:30:17.028 | INFO     | prover.proof_search:__init__:452 - Using retriever: PremiseRetriever(
  (encoder): T5EncoderModel(
    (shared): Embedding(384, 1472)
    (encoder): T5Stack(
      (embed_tokens): Embedding(384, 1472)
      (block): ModuleList(
        (0): T5Block(
          (layer): ModuleList(
            (0): T5LayerSelfAttention(
              (SelfAttention): T5Attention(
                (q): Linear(in_features=1472, out_features=384, bias=False)
                (k): Linear(in_features=1472, out_features=384, bias=False)
                (v): Linear(in_features=1472, out_features=384, bias=False)
                (o): Linear(in_features=384, out_features=1472, bias=False)
                (relative_attention_bias): Embedding(32, 6)
              )
              (layer_norm): T5LayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
            (1): T5LayerFF(
              (DenseReluDense): T5DenseGatedActDense(
                (wi_0): Linear(in_features=1472, out_features=3584, bias=False)
                (wi_1): Linear(in_features=1472, out_features=3584, bias=False)
                (wo): Linear(in_features=3584, out_features=1472, bias=False)
                (dropout): Dropout(p=0.1, inplace=False)
                (act): NewGELUActivation()
              )
              (layer_norm): T5LayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
        )
        (1-11): 11 x T5Block(
          (layer): ModuleList(
            (0): T5LayerSelfAttention(
              (SelfAttention): T5Attention(
                (q): Linear(in_features=1472, out_features=384, bias=False)
                (k): Linear(in_features=1472, out_features=384, bias=False)
                (v): Linear(in_features=1472, out_features=384, bias=False)
                (o): Linear(in_features=384, out_features=1472, bias=False)
              )
              (layer_norm): T5LayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
            (1): T5LayerFF(
              (DenseReluDense): T5DenseGatedActDense(
                (wi_0): Linear(in_features=1472, out_features=3584, bias=False)
                (wi_1): Linear(in_features=1472, out_features=3584, bias=False)
                (wo): Linear(in_features=3584, out_features=1472, bias=False)
                (dropout): Dropout(p=0.1, inplace=False)
                (act): NewGELUActivation()
              )
              (layer_norm): T5LayerNorm()
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
        )
      )
      (final_layer_norm): T5LayerNorm()
      (dropout): Dropout(p=0.1, inplace=False)
    )
  )
)
2024-09-28 04:30:17.029 | INFO     | prover.proof_search:__init__:455 - Loading indexed corpus from /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_hairy-ball-theorem-lean_a778826d19c8a7ddf1d26
beeea628c45450612e6/corpus.jsonl
2024-09-28 04:30:22.939 | INFO     | prover.proof_search:__init__:457 - Loaded indexed corpus from /data/yingzi_ma/lean_project/datasets_retrieval_sorries/merged_with_new_hairy-ball-theorem-lean_a778826d19c8a7ddf1d26b
eeea628c45450612e6/corpus.jsonl
2024-09-28 04:30:22.939 | INFO     | retrieval.model:reindex_corpus:284 - Re-indexing the retrieval corpus
100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 4057/4057 [05:32<00:00, 12.21it/s]
2024-09-28 04:35:55.340 | INFO     | prover.proof_search:__init__:459 - Finished reindexing!
2024-09-28 04:35:55.340 | INFO     | prover.proof_search:__init__:470 - Launching 4 workers with 4 GPUs.
2024-09-28 04:35:59,077 INFO worker.py:1774 -- Started a local Ray instance. View the dashboard at 127.0.0.1:8265
(pid=1656728) [2024-09-28 04:36:38,349] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
(ProverActor pid=1656728) /data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), wh
ich uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrus
ted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer b
e allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't h
ave full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
(ProverActor pid=1656728)   return torch.load(io.BytesIO(b))
(pid=1657515) [2024-09-28 04:36:50,016] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
(ProverActor pid=1657515) /data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), wh
ich uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrus
ted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer b
e allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't h
ave full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
(ProverActor pid=1657515)   return torch.load(io.BytesIO(b))
(pid=1657731) [2024-09-28 04:37:02,527] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
(ProverActor pid=1657731) /data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), wh
ich uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrus
ted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer b
e allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't h
ave full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
(ProverActor pid=1657731)   return torch.load(io.BytesIO(b))
2024-09-28 04:37:07.279 | INFO     | __main__:prove_sorry_theorems:1215 - Found 14 sorry theorems to prove
Processing theorems from corent1234/hairy-ball-theorem-lean:   0%|                                                                                                                           | 0/14 [00:00<?, ?theorem/s]
2024-09-28 04:37:07.280 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for InjOn_A_ft
2024-09-28 04:37:07.280 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (63, 1)
2024-09-28 04:37:07.280 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for HairyBallDiff
2024-09-28 04:37:07.280 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (537, 1)
2024-09-28 04:37:07.280 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for ft_open
2024-09-28 04:37:07.280 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (515, 1)
2024-09-28 04:37:07.281 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for vLip
2024-09-28 04:37:07.281 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (53, 1)
2024-09-28 04:37:07.281 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for im_ft
2024-09-28 04:37:07.281 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (533, 1)
2024-09-28 04:37:07.281 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for eq_zero_of_le_self
2024-09-28 04:37:07.281 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (59, 1)
2024-09-28 04:37:07.281 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for HairyBallTheorem
2024-09-28 04:37:07.281 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (548, 1)
2024-09-28 04:37:07.281 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for ftx_eq_fty
2024-09-28 04:37:07.282 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (56, 1)
2024-09-28 04:37:07.282 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for ft_preimage
2024-09-28 04:37:07.282 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (510, 1)
2024-09-28 04:37:07.282 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for rank_EuclideanSpace
2024-09-28 04:37:07.282 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (500, 1)
2024-09-28 04:37:07.282 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for im_ft_open
2024-09-28 04:37:07.282 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (527, 1)
2024-09-28 04:37:07.282 | INFO     | __main__:prove_sorry_theorems:1238 - Searching for proof for Diff_ft
2024-09-28 04:37:07.282 | INFO     | __main__:prove_sorry_theorems:1239 - Position: (88, 1)
2024-09-28 04:37:07.282 | INFO     | prover.proof_search:search_unordered:513 - Distributed
(ProverActor pid=1656728) 2024-09-28 04:37:07.294 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/corent1234/hairy-ball-theorem-lean', commit='a778826d19c8a7ddf1d2
6beeea628c45450612e6'), file_path=PosixPath('HairyBallTheoremLean.lean'), full_name='vLip')
(ProverActor pid=1657515) 2024-09-28 04:37:07.293 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/corent1234/hairy-ball-theorem-lean', commit='a778826d19c8a7ddf1d2
6beeea628c45450612e6'), file_path=PosixPath('HairyBallTheoremLean.lean'), full_name='ft_open')
(pid=1657933) [2024-09-28 04:37:14,975] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
(ProverActor pid=1657731) 2024-09-28 04:37:15.090 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/corent1234/hairy-ball-theorem-lean', commit='a778826d19c8a7ddf1d2
6beeea628c45450612e6'), file_path=PosixPath('HairyBallTheoremLean.lean'), full_name='HairyBallDiff')
(ProverActor pid=1657933) /data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), wh
ich uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrus
ted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer b
e allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't h
ave full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
(ProverActor pid=1657933)   return torch.load(io.BytesIO(b))
(ProverActor pid=1657933) 2024-09-28 04:37:27.571 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/corent1234/hairy-ball-theorem-lean', commit='a778826d19c8a7ddf1d2
6beeea628c45450612e6'), file_path=PosixPath('HairyBallTheoremLean.lean'), full_name='InjOn_A_ft')
(ProverActor pid=1657731) 2024-09-28 04:43:50.174 | INFO     | prover.proof_search:_best_first_search:171 - Found a proof!
(ProverActor pid=1657731) 2024-09-28 04:43:57.799 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/corent1234/hairy-ball-theorem-lean', commit='a77882
6d19c8a7ddf1d26beeea628c45450612e6'), file_path=PosixPath('HairyBallTheoremLean.lean'), full_name='HairyBallDiff'), status=<Status.PROVED: 'Proved'>, proof=['use 0', 'rw [← norm_le_zero_iff]', 'simp [vUnit]'], actor_t
ime=176.42031253688037, environment_time=162.85878333169967, total_time=340.38955734297633, num_total_nodes=1737, num_searched_nodes=62)
(ProverActor pid=1657731) 2024-09-28 04:43:57.807 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/corent1234/hairy-ball-theorem-lean', commit='a778826d19c8a7ddf1d2
6beeea628c45450612e6'), file_path=PosixPath('HairyBallTheoremLean.lean'), full_name='im_ft')
(ProverActor pid=1656728) 2024-09-28 04:47:53.349 | INFO     | prover.proof_search:_best_first_search:149 - 4342554.772754239
(ProverActor pid=1656728) 2024-09-28 04:47:53.350 | INFO     | prover.proof_search:_best_first_search:150 - 4341954.778906554
(ProverActor pid=1656728) 2024-09-28 04:47:53.350 | INFO     | prover.proof_search:_best_first_search:151 - 599.9942506058142
(ProverActor pid=1656728) 2024-09-28 04:47:53.350 | INFO     | prover.proof_search:_best_first_search:152 - 600
(ProverActor pid=1656728) 2024-09-28 04:47:53.351 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1656728) 2024-09-28 04:48:01.861 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/corent1234/hairy-ball-theorem-lean', commit='a77882
6d19c8a7ddf1d26beeea628c45450612e6'), file_path=PosixPath('HairyBallTheoremLean.lean'), full_name='vLip'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=376.1969039523974, environment_time=222.12502597179264, t
otal_time=600.9956995742396, num_total_nodes=3889, num_searched_nodes=135)
(ProverActor pid=1656728) 2024-09-28 04:48:01.868 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/corent1234/hairy-ball-theorem-lean', commit='a778826d19c8a7ddf1d2
6beeea628c45450612e6'), file_path=PosixPath('HairyBallTheoremLean.lean'), full_name='eq_zero_of_le_self')
(ProverActor pid=1657933) 2024-09-28 04:48:08.355 | INFO     | prover.proof_search:_best_first_search:149 - 4342569.778069619
(ProverActor pid=1657933) 2024-09-28 04:48:08.355 | INFO     | prover.proof_search:_best_first_search:150 - 4341969.78639359
(ProverActor pid=1657933) 2024-09-28 04:48:08.355 | INFO     | prover.proof_search:_best_first_search:151 - 599.9924954809248
(ProverActor pid=1657933) 2024-09-28 04:48:08.356 | INFO     | prover.proof_search:_best_first_search:152 - 600
(ProverActor pid=1657933) 2024-09-28 04:48:08.356 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1657933) 2024-09-28 04:48:16.356 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/corent1234/hairy-ball-theorem-lean', commit='a77882
6d19c8a7ddf1d26beeea628c45450612e6'), file_path=PosixPath('HairyBallTheoremLean.lean'), full_name='InjOn_A_ft'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=334.9355461401865, environment_time=264.60886408295
48, total_time=600.9931092169136, num_total_nodes=7714, num_searched_nodes=197)
(ProverActor pid=1657933) 2024-09-28 04:48:16.361 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/corent1234/hairy-ball-theorem-lean', commit='a778826d19c8a7ddf1d2
6beeea628c45450612e6'), file_path=PosixPath('HairyBallTheoremLean.lean'), full_name='HairyBallTheorem')
(ProverActor pid=1657515) 2024-09-28 04:48:08.562 | INFO     | prover.proof_search:_best_first_search:152 - 600 [repeated 4x across cluster]
(ProverActor pid=1657515) 2024-09-28 04:48:08.562 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1657515) 2024-09-28 04:48:17.606 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/corent1234/hairy-ball-theorem-lean', commit='a77882
6d19c8a7ddf1d26beeea628c45450612e6'), file_path=PosixPath('HairyBallTheoremLean.lean'), full_name='ft_open'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=40.633763681165874, environment_time=546.0915985312313
, total_time=600.9928323542699, num_total_nodes=600, num_searched_nodes=14)
(ProverActor pid=1657515) 2024-09-28 04:48:17.612 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/corent1234/hairy-ball-theorem-lean', commit='a778826d19c8a7ddf1d2
6beeea628c45450612e6'), file_path=PosixPath('HairyBallTheoremLean.lean'), full_name='ftx_eq_fty')
(ProverActor pid=1657731) 2024-09-28 04:54:45.701 | INFO     | prover.proof_search:_best_first_search:163 - Hit the resource limit (timeout or max_expansions).
(ProverActor pid=1657731) 2024-09-28 04:54:45.701 | INFO     | prover.proof_search:_best_first_search:152 - 600 [repeated 4x across cluster]
(ProverActor pid=1657731) 2024-09-28 04:54:54.385 | INFO     | prover.proof_search:search:128 - SearchResult(theorem=Theorem(repo=LeanGitRepo(url='https://github.com/corent1234/hairy-ball-theorem-lean', commit='a77882
6d19c8a7ddf1d26beeea628c45450612e6'), file_path=PosixPath('HairyBallTheoremLean.lean'), full_name='im_ft'), status=<Status.OPEN: 'Open'>, proof=None, actor_time=41.96572520118207, environment_time=19.083799995481968,
total_time=600.994571711868, num_total_nodes=574, num_searched_nodes=14)
(ProverActor pid=1657731) 2024-09-28 04:54:54.392 | INFO     | prover.proof_search:search:81 - Proving Theorem(repo=LeanGitRepo(url='https://github.com/corent1234/hairy-ball-theorem-lean', commit='a778826d19c8a7ddf1d2
6beeea628c45450612e6'), file_path=PosixPath('HairyBallTheoremLean.lean'), full_name='ft_preimage')

