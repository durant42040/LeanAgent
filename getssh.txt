-> 1242         for i, category in enumerate(["Easy", "Medium", "Hard"]):
   1243             start = i * chunk_size

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1243)sort_repositories_by_difficulty()
   1242         for i, category in enumerate(["Easy", "Medium", "Hard"]):
-> 1243             start = i * chunk_size
   1244             end = start + chunk_size if i < 2 else None

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1244)sort_repositories_by_difficulty()
   1243             start = i * chunk_size
-> 1244             end = start + chunk_size if i < 2 else None
   1245             categorized_theorems[repo][category].extend(to_distribute[start:end])

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1245)sort_repositories_by_difficulty()
   1244             end = start + chunk_size if i < 2 else None
-> 1245             categorized_theorems[repo][category].extend(to_distribute[start:end])
   1246         del categorized_theorems[repo]["To_Distribute"]

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1242)sort_repositories_by_difficulty()
   1241         chunk_size = len(to_distribute) // 3
-> 1242         for i, category in enumerate(["Easy", "Medium", "Hard"]):
   1243             start = i * chunk_size

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1246)sort_repositories_by_difficulty()
   1245             categorized_theorems[repo][category].extend(to_distribute[start:end])
-> 1246         del categorized_theorems[repo]["To_Distribute"]
   1247

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1239)sort_repositories_by_difficulty()
   1238
2> 1239     for repo in categorized_theorems:
   1240         to_distribute = categorized_theorems[repo]["To_Distribute"]

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1249)sort_repositories_by_difficulty()
   1248     # Sort repositories based on the number of easy theorems
-> 1249     sorted_repos = sorted(categorized_theorems.keys(), key=lambda r: len(categorized_theorems[r]["Easy"]), reverse=True)
   1250

ipdb> n
> /data/yingzi_ma/lean_project/ReProver/main.py(1251)sort_repositories_by_difficulty()
   1250
-> 1251     return sorted_repos, categorized_theorems, percentiles
   1252

ipdb> sorted_rfepos
*** NameError: name 'sorted_rfepos' is not defined
ipdb> sorted_repos
^C*** KeyboardInterrupt
ipdb> sorted_repos.keys()
*** AttributeError: 'list' object has no attribute 'keys'
ipdb> len(sorted_repos)
2
ipdb> for repo in sorted_repos:
        print(repo.name)

leanprover-community/mathlib4
lecopivo/SciLean
ipdb> n
--Return--

([Repository(ur..., pr_url=None), Repository(ur..., pr_url=None)], defaultdict(<...15), inf)]})}), array([ 2.718... 20.08553692]))
> /data/yingzi_ma/lean_project/ReProver/main.py(1251)sort_repositories_by_difficulty()
   1250
-> 1251     return sorted_repos, categorized_theorems, percentiles
   1252

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1333)main()
   1332             sorted_repos, categorized_theorems, percentiles = sort_repositories_by_difficulty(db)
-> 1333             db.to_json(dynamic_database_json_path)
   1334             save_sorted_repos(sorted_repos, "sorted_repos.json")

ipdb> n
^Z
[4]+  Stopped                 bash run_code.sh
(base) yingzi_ma@cais-login-0:~/lean_project/ReProver$ bash run_code.sh
Script executed from: /data/yingzi_ma/lean_project/ReProver
[2024-09-04 23:53:27,053] [WARNING] [real_accelerator.py:162:get_accelerator] Setting accelerator to CPU. If you have GPU or other accelerator, we were unable to detect it.
[2024-09-04 23:53:27,054] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cpu (auto detect)
2024-09-04 23:53:29.458 | INFO     | __main__:main:1291 - Running progressive training
2024-09-04 23:53:29.458 | INFO     | __main__:main:1297 - Configuring LeanDojo...
2024-09-04 23:53:29.461 | INFO     | generate_benchmark_lean4:configure_leandojo:317 - Current working directory: /data/yingzi_ma/lean_project/ReProver
2024-09-04 23:53:29.462 | INFO     | __main__:main:1299 - LeanDojo configured
2024-09-04 23:53:30.119 | WARNING  | __main__:main:1313 - Error decoding JSON from /data/yingzi_ma/lean_project/dynamic_database_PT_single_repo_ewc_backup2.json. Initializing new database.
Found 2 repositories
2024-09-04 23:53:30.130 | INFO     | __main__:main:1431 - An error occurred: index -1 is out of bounds for axis 0 with size 0
Traceback (most recent call last):
  File "/data/yingzi_ma/lean_project/ReProver/main.py", line 1330, in main
    sorted_repos, categorized_theorems, percentiles = sort_repositories_by_difficulty(db)
  File "/data/yingzi_ma/lean_project/ReProver/main.py", line 1230, in sort_repositories_by_difficulty
    percentiles = np.percentile(all_difficulties, [33, 67])
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/numpy/lib/function_base.py", line 4283, in percentile
    return _quantile_unchecked(
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/numpy/lib/function_base.py", line 4555, in _quantile_unchecked
    return _ureduce(a,
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/numpy/lib/function_base.py", line 3823, in _ureduce
    r = func(a, **kwargs)
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/numpy/lib/function_base.py", line 4721, in _quantile_ureduce_func
    result = _quantile(arr,
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/numpy/lib/function_base.py", line 4830, in _quantile
    slices_having_nans = np.isnan(arr[-1, ...])
IndexError: index -1 is out of bounds for axis 0 with size 0
(base) yingzi_ma@cais-login-0:~/lean_project/ReProver$ bash run_code.sh
Script executed from: /data/yingzi_ma/lean_project/ReProver
[2024-09-04 23:54:36,744] [WARNING] [real_accelerator.py:162:get_accelerator] Setting accelerator to CPU. If you have GPU or other accelerator, we were unable to detect it.
[2024-09-04 23:54:36,745] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cpu (auto detect)
2024-09-04 23:54:39.063 | INFO     | __main__:main:1291 - Running progressive training
2024-09-04 23:54:39.063 | INFO     | __main__:main:1297 - Configuring LeanDojo...
2024-09-04 23:54:39.066 | INFO     | generate_benchmark_lean4:configure_leandojo:317 - Current working directory: /data/yingzi_ma/lean_project/ReProver
2024-09-04 23:54:39.066 | INFO     | __main__:main:1299 - LeanDojo configured
2024-09-04 23:55:01.730 | INFO     | dynamic_database:add_repository:583 - Attempting to add repository: https://github.com/leanprover-community/mathlib4 (commit: 2b29e73438e240a427bcecc7c0fe19306beb1310)
2024-09-04 23:55:01.730 | INFO     | dynamic_database:add_repository:586 - Added new repository: https://github.com/leanprover-community/mathlib4 (commit: 2b29e73438e240a427bcecc7c0fe19306beb1310)
2024-09-04 23:55:08.807 | INFO     | dynamic_database:add_repository:583 - Attempting to add repository: https://github.com/lecopivo/SciLean (commit: 22d53b2f4e3db2a172e71da6eb9c916e62655744)
2024-09-04 23:55:08.807 | INFO     | dynamic_database:add_repository:586 - Added new repository: https://github.com/lecopivo/SciLean (commit: 22d53b2f4e3db2a172e71da6eb9c916e62655744)
Found 2 repositories
2024-09-04 23:55:09.627 | INFO     | dynamic_database:update_repository:597 - Attempting to update repository: https://github.com/leanprover-community/mathlib4 (commit: 2b29e73438e240a427bcecc7c0fe19306beb1310)
2024-09-04 23:55:09.628 | INFO     | dynamic_database:update_repository:601 - Updated repository: https://github.com/leanprover-community/mathlib4 (commit: 2b29e73438e240a427bcecc7c0fe19306beb1310)
2024-09-04 23:55:09.903 | INFO     | dynamic_database:update_repository:597 - Attempting to update repository: https://github.com/lecopivo/SciLean (commit: 22d53b2f4e3db2a172e71da6eb9c916e62655744)
2024-09-04 23:55:09.903 | INFO     | dynamic_database:update_repository:601 - Updated repository: https://github.com/lecopivo/SciLean (commit: 22d53b2f4e3db2a172e71da6eb9c916e62655744)
> /data/yingzi_ma/lean_project/ReProver/main.py(1334)main()
   1333             import ipdb; ipdb.set_trace()
-> 1334             print("Summary of theorem difficulties by URL:")
   1335             for repo in sorted_repos:

ipdb> n
Summary of theorem difficulties by URL:
> /data/yingzi_ma/lean_project/ReProver/main.py(1335)main()
   1334             print("Summary of theorem difficulties by URL:")
-> 1335             for repo in sorted_repos:
   1336                 print(f"\nURL: {repo.url}")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1336)main()
   1335             for repo in sorted_repos:
-> 1336                 print(f"\nURL: {repo.url}")
   1337                 for category in ["Easy", "Medium", "Hard", "Hard (No proof)"]:

ipdb>

URL: https://github.com/leanprover-community/mathlib4
> /data/yingzi_ma/lean_project/ReProver/main.py(1337)main()
   1336                 print(f"\nURL: {repo.url}")
-> 1337                 for category in ["Easy", "Medium", "Hard", "Hard (No proof)"]:
   1338                     theorems = categorized_theorems[repo][category]

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1338)main()
   1337                 for category in ["Easy", "Medium", "Hard", "Hard (No proof)"]:
-> 1338                     theorems = categorized_theorems[repo][category]
   1339                     print(f"  {category}: {len(theorems)} theorems")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1339)main()
   1338                     theorems = categorized_theorems[repo][category]
-> 1339                     print(f"  {category}: {len(theorems)} theorems")
   1340                     if theorems:

ipdb>
  Easy: 41298 theorems
> /data/yingzi_ma/lean_project/ReProver/main.py(1340)main()
   1339                     print(f"  {category}: {len(theorems)} theorems")
-> 1340                     if theorems:
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1341)main()
   1340                     if theorems:
-> 1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
   1342                         for name, path, diff in sorted_theorems:

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1342)main()
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
-> 1342                         for name, path, diff in sorted_theorems:
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"

ipdb>
ValueError: too many values to unpack (expected 3)
> /data/yingzi_ma/lean_project/ReProver/main.py(1342)main()
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
-> 1342                         for name, path, diff in sorted_theorems:
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"

ipdb> exit
2024-09-04 23:56:20.957 | INFO     | __main__:main:1431 - An error occurred:
Traceback (most recent call last):
  File "/data/yingzi_ma/lean_project/ReProver/main.py", line 1342, in main
    for name, path, start, end, diff in sorted_theorems:
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/bdb.py", line 96, in trace_dispatch
    return self.dispatch_exception(frame, arg)
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/bdb.py", line 176, in dispatch_exception
    if self.quitting: raise BdbQuit
bdb.BdbQuit
^C^[[AException ignored in: <function WeakKeyDictionary.__init__.<locals>.remove at 0x776f91a384c0>
Traceback (most recent call last):
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/weakref.py", line 370, in remove
    def remove(k, selfref=ref(self)):
KeyboardInterrupt:
^C
Exception ignored in atexit callback: <bound method InteractiveShell.atexit_operations of <IPython.terminal.interactiveshell.TerminalInteractiveShell object at 0x776f7a70be50>>
Traceback (most recent call last):
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/IPython/core/interactiveshell.py", line 3875, in atexit_operations
    self._atexit_once()
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/IPython/core/interactiveshell.py", line 3854, in _atexit_once
    self.reset(new_session=False)
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/IPython/core/interactiveshell.py", line 1384, in reset
    self.displayhook.flush()
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/IPython/core/displayhook.py", line 317, in flush
    gc.collect()
KeyboardInterrupt:
^Z
[5]+  Stopped                 bash run_code.sh
(base) yingzi_ma@cais-login-0:~/lean_project/ReProver$ bash run_code.sh
Script executed from: /data/yingzi_ma/lean_project/ReProver
[2024-09-04 23:56:33,930] [WARNING] [real_accelerator.py:162:get_accelerator] Setting accelerator to CPU. If you have GPU or other accelerator, we were unable to detect it.
[2024-09-04 23:56:33,931] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cpu (auto detect)
2024-09-04 23:56:36.273 | INFO     | __main__:main:1291 - Running progressive training
2024-09-04 23:56:36.274 | INFO     | __main__:main:1297 - Configuring LeanDojo...
2024-09-04 23:56:36.277 | INFO     | generate_benchmark_lean4:configure_leandojo:317 - Current working directory: /data/yingzi_ma/lean_project/ReProver
2024-09-04 23:56:36.277 | INFO     | __main__:main:1299 - LeanDojo configured
2024-09-04 23:56:58.854 | INFO     | dynamic_database:add_repository:583 - Attempting to add repository: https://github.com/leanprover-community/mathlib4 (commit: 2b29e73438e240a427bcecc7c0fe19306beb1310)
2024-09-04 23:56:58.855 | INFO     | dynamic_database:add_repository:586 - Added new repository: https://github.com/leanprover-community/mathlib4 (commit: 2b29e73438e240a427bcecc7c0fe19306beb1310)
2024-09-04 23:57:05.980 | INFO     | dynamic_database:add_repository:583 - Attempting to add repository: https://github.com/lecopivo/SciLean (commit: 22d53b2f4e3db2a172e71da6eb9c916e62655744)
2024-09-04 23:57:05.980 | INFO     | dynamic_database:add_repository:586 - Added new repository: https://github.com/lecopivo/SciLean (commit: 22d53b2f4e3db2a172e71da6eb9c916e62655744)
Found 2 repositories
2024-09-04 23:57:06.819 | INFO     | dynamic_database:update_repository:597 - Attempting to update repository: https://github.com/leanprover-community/mathlib4 (commit: 2b29e73438e240a427bcecc7c0fe19306beb1310)
2024-09-04 23:57:06.819 | INFO     | dynamic_database:update_repository:601 - Updated repository: https://github.com/leanprover-community/mathlib4 (commit: 2b29e73438e240a427bcecc7c0fe19306beb1310)
2024-09-04 23:57:07.102 | INFO     | dynamic_database:update_repository:597 - Attempting to update repository: https://github.com/lecopivo/SciLean (commit: 22d53b2f4e3db2a172e71da6eb9c916e62655744)
2024-09-04 23:57:07.102 | INFO     | dynamic_database:update_repository:601 - Updated repository: https://github.com/lecopivo/SciLean (commit: 22d53b2f4e3db2a172e71da6eb9c916e62655744)
> /data/yingzi_ma/lean_project/ReProver/main.py(1334)main()
   1333             import ipdb; ipdb.set_trace()
-> 1334             print("Summary of theorem difficulties by URL:")
   1335             for repo in sorted_repos:

ipdb> n
Summary of theorem difficulties by URL:
> /data/yingzi_ma/lean_project/ReProver/main.py(1335)main()
   1334             print("Summary of theorem difficulties by URL:")
-> 1335             for repo in sorted_repos:
   1336                 print(f"\nURL: {repo.url}")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1336)main()
   1335             for repo in sorted_repos:
-> 1336                 print(f"\nURL: {repo.url}")
   1337                 for category in ["Easy", "Medium", "Hard", "Hard (No proof)"]:

ipdb>

URL: https://github.com/leanprover-community/mathlib4
> /data/yingzi_ma/lean_project/ReProver/main.py(1337)main()
   1336                 print(f"\nURL: {repo.url}")
-> 1337                 for category in ["Easy", "Medium", "Hard", "Hard (No proof)"]:
   1338                     theorems = categorized_theorems[repo][category]

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1338)main()
   1337                 for category in ["Easy", "Medium", "Hard", "Hard (No proof)"]:
-> 1338                     theorems = categorized_theorems[repo][category]
   1339                     print(f"  {category}: {len(theorems)} theorems")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1339)main()
   1338                     theorems = categorized_theorems[repo][category]
-> 1339                     print(f"  {category}: {len(theorems)} theorems")
   1340                     if theorems:

ipdb>
  Easy: 41298 theorems
> /data/yingzi_ma/lean_project/ReProver/main.py(1340)main()
   1339                     print(f"  {category}: {len(theorems)} theorems")
-> 1340                     if theorems:
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1341)main()
   1340                     if theorems:
-> 1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
   1342                         for name, path, start, end, diff in sorted_theorems:

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1342)main()
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
-> 1342                         for name, path, start, end, diff in sorted_theorems:
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1343)main()
   1342                         for name, path, start, end, diff in sorted_theorems:
-> 1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
   1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1344)main()
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
-> 1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")
   1345

ipdb>
    - Subgroup.disjoint_iff_mul_eq_one (File: Mathlib/Algebra/Group/Subgroup/Basic.lean, Difficulty: 2.72)
> /data/yingzi_ma/lean_project/ReProver/main.py(1342)main()
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
-> 1342                         for name, path, start, end, diff in sorted_theorems:
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"

ipdb> n
> /data/yingzi_ma/lean_project/ReProver/main.py(1343)main()
   1342                         for name, path, start, end, diff in sorted_theorems:
-> 1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
   1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1344)main()
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
-> 1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")
   1345

ipdb>
    - Subgroup.disjoint_def (File: Mathlib/Algebra/Group/Subgroup/Basic.lean, Difficulty: 2.72)
> /data/yingzi_ma/lean_project/ReProver/main.py(1342)main()
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
-> 1342                         for name, path, start, end, diff in sorted_theorems:
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"

ipdb> b 1337
Breakpoint 1 at /data/yingzi_ma/lean_project/ReProver/main.py:1337
ipdb> c
    - List.forall_map_iff (File: Mathlib/Data/List/Basic.lean, Difficulty: 2.72)
> /data/yingzi_ma/lean_project/ReProver/main.py(1337)main()
   1336                 print(f"\nURL: {repo.url}")
1> 1337                 for category in ["Easy", "Medium", "Hard", "Hard (No proof)"]:
   1338                     theorems = categorized_theorems[repo][category]

ipdb> len(categorized_theorems[repo]["Easy"])
41298
ipdb> n
> /data/yingzi_ma/lean_project/ReProver/main.py(1338)main()
1  1337                 for category in ["Easy", "Medium", "Hard", "Hard (No proof)"]:
-> 1338                     theorems = categorized_theorems[repo][category]
   1339                     print(f"  {category}: {len(theorems)} theorems")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1339)main()
   1338                     theorems = categorized_theorems[repo][category]
-> 1339                     print(f"  {category}: {len(theorems)} theorems")
   1340                     if theorems:

ipdb>
  Medium: 39921 theorems
> /data/yingzi_ma/lean_project/ReProver/main.py(1340)main()
   1339                     print(f"  {category}: {len(theorems)} theorems")
-> 1340                     if theorems:
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1341)main()
   1340                     if theorems:
-> 1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
   1342                         for name, path, start, end, diff in sorted_theorems:

ipdb>

> /data/yingzi_ma/lean_project/ReProver/main.py(1342)main()
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
-> 1342                         for name, path, start, end, diff in sorted_theorems:
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1343)main()
   1342                         for name, path, start, end, diff in sorted_theorems:
-> 1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
   1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1344)main()
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
-> 1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")
   1345

ipdb>
    - ConjClasses.mem_noncenter (File: Mathlib/Algebra/Group/Subgroup/Basic.lean, Difficulty: N/A)
> /data/yingzi_ma/lean_project/ReProver/main.py(1342)main()
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
-> 1342                         for name, path, start, end, diff in sorted_theorems:
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"

ipdb> nn
*** NameError: name 'nn' is not defined
ipdb> n
> /data/yingzi_ma/lean_project/ReProver/main.py(1343)main()
   1342                         for name, path, start, end, diff in sorted_theorems:
-> 1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
   1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1344)main()
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
-> 1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")
   1345

ipdb>
    - List.disjoint_map (File: Mathlib/Data/List/Basic.lean, Difficulty: 7.39)
> /data/yingzi_ma/lean_project/ReProver/main.py(1342)main()
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
-> 1342                         for name, path, start, end, diff in sorted_theorems:
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1343)main()
   1342                         for name, path, start, end, diff in sorted_theorems:
-> 1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
   1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1344)main()
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
-> 1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")
   1345

ipdb>
    - Subgroup.SubgroupNormal.mem_comm (File: Mathlib/Algebra/Group/Subgroup/Basic.lean, Difficulty: 7.39)
> /data/yingzi_ma/lean_project/ReProver/main.py(1342)main()
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
-> 1342                         for name, path, start, end, diff in sorted_theorems:
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1337)main()
   1336                 print(f"\nURL: {repo.url}")
1> 1337                 for category in ["Easy", "Medium", "Hard", "Hard (No proof)"]:
   1338                     theorems = categorized_theorems[repo][category]

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1338)main()
1  1337                 for category in ["Easy", "Medium", "Hard", "Hard (No proof)"]:
-> 1338                     theorems = categorized_theorems[repo][category]
   1339                     print(f"  {category}: {len(theorems)} theorems")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1339)main()
   1338                     theorems = categorized_theorems[repo][category]
-> 1339                     print(f"  {category}: {len(theorems)} theorems")
   1340                     if theorems:

ipdb>
  Hard: 39874 theorems
> /data/yingzi_ma/lean_project/ReProver/main.py(1340)main()
   1339                     print(f"  {category}: {len(theorems)} theorems")
-> 1340                     if theorems:
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1341)main()
   1340                     if theorems:
-> 1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
   1342                         for name, path, start, end, diff in sorted_theorems:

ipdb> n
> /data/yingzi_ma/lean_project/ReProver/main.py(1342)main()
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
-> 1342                         for name, path, start, end, diff in sorted_theorems:
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"

ipdb> n
> /data/yingzi_ma/lean_project/ReProver/main.py(1343)main()
   1342                         for name, path, start, end, diff in sorted_theorems:
-> 1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
   1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1344)main()
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
-> 1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")
   1345

ipdb>
    - IsConj.normalClosure_eq_top_of (File: Mathlib/Algebra/Group/Subgroup/Basic.lean, Difficulty: 3269017.37)
> /data/yingzi_ma/lean_project/ReProver/main.py(1342)main()
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
-> 1342                         for name, path, start, end, diff in sorted_theorems:
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1343)main()
   1342                         for name, path, start, end, diff in sorted_theorems:
-> 1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
   1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1344)main()
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
-> 1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")
   1345

ipdb>
    - Subgroup.mul_injective_of_disjoint (File: Mathlib/Algebra/Group/Subgroup/Basic.lean, Difficulty: 54.60)
> /data/yingzi_ma/lean_project/ReProver/main.py(1342)main()
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
-> 1342                         for name, path, start, end, diff in sorted_theorems:
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1343)main()
   1342                         for name, path, start, end, diff in sorted_theorems:
-> 1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
   1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1344)main()
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
-> 1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")
   1345

ipdb>
    - List.lookup_graph (File: Mathlib/Data/List/Basic.lean, Difficulty: 403.43)
> /data/yingzi_ma/lean_project/ReProver/main.py(1342)main()
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
-> 1342                         for name, path, start, end, diff in sorted_theorems:
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1337)main()
   1336                 print(f"\nURL: {repo.url}")
1> 1337                 for category in ["Easy", "Medium", "Hard", "Hard (No proof)"]:
   1338                     theorems = categorized_theorems[repo][category]

ipdb> n
> /data/yingzi_ma/lean_project/ReProver/main.py(1338)main()
1  1337                 for category in ["Easy", "Medium", "Hard", "Hard (No proof)"]:
-> 1338                     theorems = categorized_theorems[repo][category]
   1339                     print(f"  {category}: {len(theorems)} theorems")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1339)main()
   1338                     theorems = categorized_theorems[repo][category]
-> 1339                     print(f"  {category}: {len(theorems)} theorems")
   1340                     if theorems:

ipdb>
  Hard (No proof): 0 theorems
> /data/yingzi_ma/lean_project/ReProver/main.py(1340)main()
   1339                     print(f"  {category}: {len(theorems)} theorems")
-> 1340                     if theorems:
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1337)main()
   1336                 print(f"\nURL: {repo.url}")
1> 1337                 for category in ["Easy", "Medium", "Hard", "Hard (No proof)"]:
   1338                     theorems = categorized_theorems[repo][category]

ipdb> n
> /data/yingzi_ma/lean_project/ReProver/main.py(1335)main()
   1334             print("Summary of theorem difficulties by URL:")
-> 1335             for repo in sorted_repos:
   1336                 print(f"\nURL: {repo.url}")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1336)main()
   1335             for repo in sorted_repos:
-> 1336                 print(f"\nURL: {repo.url}")
1  1337                 for category in ["Easy", "Medium", "Hard", "Hard (No proof)"]:

ipdb>

URL: https://github.com/lecopivo/SciLean
> /data/yingzi_ma/lean_project/ReProver/main.py(1337)main()
   1336                 print(f"\nURL: {repo.url}")
1> 1337                 for category in ["Easy", "Medium", "Hard", "Hard (No proof)"]:
   1338                     theorems = categorized_theorems[repo][category]

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1338)main()
1  1337                 for category in ["Easy", "Medium", "Hard", "Hard (No proof)"]:
-> 1338                     theorems = categorized_theorems[repo][category]
   1339                     print(f"  {category}: {len(theorems)} theorems")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1339)main()
   1338                     theorems = categorized_theorems[repo][category]
-> 1339                     print(f"  {category}: {len(theorems)} theorems")
   1340                     if theorems:

ipdb>
  Easy: 26292 theorems
> /data/yingzi_ma/lean_project/ReProver/main.py(1340)main()
   1339                     print(f"  {category}: {len(theorems)} theorems")
-> 1340                     if theorems:
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1341)main()
   1340                     if theorems:
-> 1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
   1342                         for name, path, start, end, diff in sorted_theorems:

ipdb>

> /data/yingzi_ma/lean_project/ReProver/main.py(1342)main()
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
-> 1342                         for name, path, start, end, diff in sorted_theorems:
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1343)main()
   1342                         for name, path, start, end, diff in sorted_theorems:
-> 1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
   1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1344)main()
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
-> 1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")
   1345

ipdb>
    - ConjClasses.mem_noncenter (File: .lake/packages/mathlib/Mathlib/GroupTheory/Subgroup/Basic.lean, Difficulty: N/A)
> /data/yingzi_ma/lean_project/ReProver/main.py(1342)main()
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
-> 1342                         for name, path, start, end, diff in sorted_theorems:
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1343)main()
   1342                         for name, path, start, end, diff in sorted_theorems:
-> 1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
   1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1344)main()
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
-> 1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")
   1345

ipdb>
    - List.forall_map_iff (File: .lake/packages/mathlib/Mathlib/Data/List/Basic.lean, Difficulty: 2.72)
> /data/yingzi_ma/lean_project/ReProver/main.py(1342)main()
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
-> 1342                         for name, path, start, end, diff in sorted_theorems:
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1343)main()
   1342                         for name, path, start, end, diff in sorted_theorems:
-> 1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
   1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1344)main()
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
-> 1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")
   1345

ipdb>
    - List.forall_iff_forall_mem (File: .lake/packages/mathlib/Mathlib/Data/List/Basic.lean, Difficulty: 2.72)
> /data/yingzi_ma/lean_project/ReProver/main.py(1342)main()
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
-> 1342                         for name, path, start, end, diff in sorted_theorems:
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1337)main()
   1336                 print(f"\nURL: {repo.url}")
1> 1337                 for category in ["Easy", "Medium", "Hard", "Hard (No proof)"]:
   1338                     theorems = categorized_theorems[repo][category]

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1338)main()
1  1337                 for category in ["Easy", "Medium", "Hard", "Hard (No proof)"]:
-> 1338                     theorems = categorized_theorems[repo][category]
   1339                     print(f"  {category}: {len(theorems)} theorems")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1339)main()
   1338                     theorems = categorized_theorems[repo][category]
-> 1339                     print(f"  {category}: {len(theorems)} theorems")
   1340                     if theorems:

ipdb>
  Medium: 23917 theorems
> /data/yingzi_ma/lean_project/ReProver/main.py(1340)main()
   1339                     print(f"  {category}: {len(theorems)} theorems")
-> 1340                     if theorems:
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1341)main()
   1340                     if theorems:
-> 1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
   1342                         for name, path, start, end, diff in sorted_theorems:

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1342)main()
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
-> 1342                         for name, path, start, end, diff in sorted_theorems:
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1343)main()
   1342                         for name, path, start, end, diff in sorted_theorems:
-> 1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
   1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1344)main()
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
-> 1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")
   1345

ipdb>
    - List.disjoint_map (File: .lake/packages/mathlib/Mathlib/Data/List/Basic.lean, Difficulty: 7.39)
> /data/yingzi_ma/lean_project/ReProver/main.py(1342)main()
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
-> 1342                         for name, path, start, end, diff in sorted_theorems:
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1343)main()
   1342                         for name, path, start, end, diff in sorted_theorems:
-> 1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
   1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1344)main()
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
-> 1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")
   1345

ipdb>
    - List.dropSlice_eq (File: .lake/packages/mathlib/Mathlib/Data/List/Basic.lean, Difficulty: 20.09)
> /data/yingzi_ma/lean_project/ReProver/main.py(1342)main()
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
-> 1342                         for name, path, start, end, diff in sorted_theorems:
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1343)main()
   1342                         for name, path, start, end, diff in sorted_theorems:
-> 1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
   1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1344)main()
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
-> 1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")
   1345

ipdb>
    - List.get_attach (File: .lake/packages/mathlib/Mathlib/Data/List/Basic.lean, Difficulty: 20.09)
> /data/yingzi_ma/lean_project/ReProver/main.py(1342)main()
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
-> 1342                         for name, path, start, end, diff in sorted_theorems:
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1337)main()
   1336                 print(f"\nURL: {repo.url}")
1> 1337                 for category in ["Easy", "Medium", "Hard", "Hard (No proof)"]:
   1338                     theorems = categorized_theorems[repo][category]

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1338)main()
1  1337                 for category in ["Easy", "Medium", "Hard", "Hard (No proof)"]:
-> 1338                     theorems = categorized_theorems[repo][category]
   1339                     print(f"  {category}: {len(theorems)} theorems")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1339)main()
   1338                     theorems = categorized_theorems[repo][category]
-> 1339                     print(f"  {category}: {len(theorems)} theorems")
   1340                     if theorems:

ipdb>
  Hard: 21759 theorems
> /data/yingzi_ma/lean_project/ReProver/main.py(1340)main()
   1339                     print(f"  {category}: {len(theorems)} theorems")
-> 1340                     if theorems:
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1341)main()
   1340                     if theorems:
-> 1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
   1342                         for name, path, start, end, diff in sorted_theorems:

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1342)main()
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
-> 1342                         for name, path, start, end, diff in sorted_theorems:
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1343)main()
   1342                         for name, path, start, end, diff in sorted_theorems:
-> 1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
   1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1344)main()
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
-> 1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")
   1345

ipdb>
    - List.disjoint_pmap (File: .lake/packages/mathlib/Mathlib/Data/List/Basic.lean, Difficulty: 54.60)
> /data/yingzi_ma/lean_project/ReProver/main.py(1342)main()
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
-> 1342                         for name, path, start, end, diff in sorted_theorems:
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1343)main()
   1342                         for name, path, start, end, diff in sorted_theorems:
-> 1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
   1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1344)main()
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
-> 1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")
   1345

ipdb>
    - List.sizeOf_dropSlice_lt (File: .lake/packages/mathlib/Mathlib/Data/List/Basic.lean, Difficulty: 8886110.52)
> /data/yingzi_ma/lean_project/ReProver/main.py(1342)main()
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
-> 1342                         for name, path, start, end, diff in sorted_theorems:
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1343)main()
   1342                         for name, path, start, end, diff in sorted_theorems:
-> 1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
   1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1344)main()
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
-> 1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")
   1345

ipdb>
    - List.mem_map_swap (File: .lake/packages/mathlib/Mathlib/Data/List/Basic.lean, Difficulty: 54.60)
> /data/yingzi_ma/lean_project/ReProver/main.py(1342)main()
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
-> 1342                         for name, path, start, end, diff in sorted_theorems:
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1337)main()
   1336                 print(f"\nURL: {repo.url}")
1> 1337                 for category in ["Easy", "Medium", "Hard", "Hard (No proof)"]:
   1338                     theorems = categorized_theorems[repo][category]

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1338)main()
1  1337                 for category in ["Easy", "Medium", "Hard", "Hard (No proof)"]:
-> 1338                     theorems = categorized_theorems[repo][category]
   1339                     print(f"  {category}: {len(theorems)} theorems")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1339)main()
   1338                     theorems = categorized_theorems[repo][category]
-> 1339                     print(f"  {category}: {len(theorems)} theorems")
   1340                     if theorems:

ipdb>
  Hard (No proof): 276 theorems
> /data/yingzi_ma/lean_project/ReProver/main.py(1340)main()
   1339                     print(f"  {category}: {len(theorems)} theorems")
-> 1340                     if theorems:
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1341)main()
   1340                     if theorems:
-> 1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
   1342                         for name, path, start, end, diff in sorted_theorems:

ipdb> n
> /data/yingzi_ma/lean_project/ReProver/main.py(1342)main()
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
-> 1342                         for name, path, start, end, diff in sorted_theorems:
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1343)main()
   1342                         for name, path, start, end, diff in sorted_theorems:
-> 1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
   1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")

ipdb> n
> /data/yingzi_ma/lean_project/ReProver/main.py(1344)main()
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
-> 1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")
   1345

ipdb>
    - IndexType.sum.arg_f.revDerivProjUpdate_rule (File: SciLean/Core/FunctionTransformations/RevDeriv.lean, Difficulty: inf)
> /data/yingzi_ma/lean_project/ReProver/main.py(1342)main()
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
-> 1342                         for name, path, start, end, diff in sorted_theorems:
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"

ipdb> n
> /data/yingzi_ma/lean_project/ReProver/main.py(1343)main()
   1342                         for name, path, start, end, diff in sorted_theorems:
-> 1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
   1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1344)main()
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
-> 1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")
   1345

ipdb>
    - IndexType.sum.arg_f.revDerivProj_rule (File: SciLean/Core/FunctionTransformations/RevDeriv.lean, Difficulty: inf)
> /data/yingzi_ma/lean_project/ReProver/main.py(1342)main()
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
-> 1342                         for name, path, start, end, diff in sorted_theorems:
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1343)main()
   1342                         for name, path, start, end, diff in sorted_theorems:
-> 1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
   1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1344)main()
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"
-> 1344                             print(f"    - {name} (File: {path}, Difficulty: {diff_str})")
   1345

ipdb>
    - SciLean.SciLean.cderiv.arg_dx.cderiv_rule_at (File: SciLean/Core/FunctionTransformations/CDeriv.lean, Difficulty: inf)
> /data/yingzi_ma/lean_project/ReProver/main.py(1342)main()
   1341                         sorted_theorems = sorted(theorems, key=lambda x: x[2] if x[2] is not None else -float('inf'), reverse=True)[:3]
-> 1342                         for name, path, start, end, diff in sorted_theorems:
   1343                             diff_str = f"{diff:.2f}" if diff is not None else "N/A"

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1337)main()
   1336                 print(f"\nURL: {repo.url}")
1> 1337                 for category in ["Easy", "Medium", "Hard", "Hard (No proof)"]:
   1338                     theorems = categorized_theorems[repo][category]

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1335)main()
   1334             print("Summary of theorem difficulties by URL:")
-> 1335             for repo in sorted_repos:
   1336                 print(f"\nURL: {repo.url}")

ipdb> n
> /data/yingzi_ma/lean_project/ReProver/main.py(1346)main()
   1345
-> 1346             print("\nOverall Statistics:")
   1347             total_theorems = sum(len(theorems) for categories in categorized_theorems.values() for theorems in categories.values())

ipdb>

Overall Statistics:
> /data/yingzi_ma/lean_project/ReProver/main.py(1347)main()
   1346             print("\nOverall Statistics:")
-> 1347             total_theorems = sum(len(theorems) for categories in categorized_theorems.values() for theorems in categories.values())
   1348             for category in ["Easy", "Medium", "Hard", "Hard (No proof)"]:

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1348)main()
   1347             total_theorems = sum(len(theorems) for categories in categorized_theorems.values() for theorems in categories.values())
-> 1348             for category in ["Easy", "Medium", "Hard", "Hard (No proof)"]:
   1349                 count = sum(len(categories[category]) for categories in categorized_theorems.values())

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1349)main()
   1348             for category in ["Easy", "Medium", "Hard", "Hard (No proof)"]:
-> 1349                 count = sum(len(categories[category]) for categories in categorized_theorems.values())
   1350                 percentage = (count / total_theorems) * 100

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1350)main()
   1349                 count = sum(len(categories[category]) for categories in categorized_theorems.values())
-> 1350                 percentage = (count / total_theorems) * 100
   1351                 print(f"{category}: {count} theorems ({percentage:.2f}%)")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1351)main()
   1350                 percentage = (count / total_theorems) * 100
-> 1351                 print(f"{category}: {count} theorems ({percentage:.2f}%)")
   1352

ipdb>
Easy: 67590 theorems (34.96%)
> /data/yingzi_ma/lean_project/ReProver/main.py(1348)main()
   1347             total_theorems = sum(len(theorems) for categories in categorized_theorems.values() for theorems in categories.values())
-> 1348             for category in ["Easy", "Medium", "Hard", "Hard (No proof)"]:
   1349                 count = sum(len(categories[category]) for categories in categorized_theorems.values())

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1349)main()
   1348             for category in ["Easy", "Medium", "Hard", "Hard (No proof)"]:
-> 1349                 count = sum(len(categories[category]) for categories in categorized_theorems.values())
   1350                 percentage = (count / total_theorems) * 100

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1350)main()
   1349                 count = sum(len(categories[category]) for categories in categorized_theorems.values())
-> 1350                 percentage = (count / total_theorems) * 100
   1351                 print(f"{category}: {count} theorems ({percentage:.2f}%)")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1351)main()
   1350                 percentage = (count / total_theorems) * 100
-> 1351                 print(f"{category}: {count} theorems ({percentage:.2f}%)")
   1352

ipdb>
Medium: 63838 theorems (33.02%)
> /data/yingzi_ma/lean_project/ReProver/main.py(1348)main()
   1347             total_theorems = sum(len(theorems) for categories in categorized_theorems.values() for theorems in categories.values())
-> 1348             for category in ["Easy", "Medium", "Hard", "Hard (No proof)"]:
   1349                 count = sum(len(categories[category]) for categories in categorized_theorems.values())

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1349)main()
   1348             for category in ["Easy", "Medium", "Hard", "Hard (No proof)"]:
-> 1349                 count = sum(len(categories[category]) for categories in categorized_theorems.values())
   1350                 percentage = (count / total_theorems) * 100

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1350)main()
   1349                 count = sum(len(categories[category]) for categories in categorized_theorems.values())
-> 1350                 percentage = (count / total_theorems) * 100
   1351                 print(f"{category}: {count} theorems ({percentage:.2f}%)")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1351)main()
   1350                 percentage = (count / total_theorems) * 100
-> 1351                 print(f"{category}: {count} theorems ({percentage:.2f}%)")
   1352

ipdb>
Hard: 61633 theorems (31.88%)
> /data/yingzi_ma/lean_project/ReProver/main.py(1348)main()
   1347             total_theorems = sum(len(theorems) for categories in categorized_theorems.values() for theorems in categories.values())
-> 1348             for category in ["Easy", "Medium", "Hard", "Hard (No proof)"]:
   1349                 count = sum(len(categories[category]) for categories in categorized_theorems.values())

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1349)main()
   1348             for category in ["Easy", "Medium", "Hard", "Hard (No proof)"]:
-> 1349                 count = sum(len(categories[category]) for categories in categorized_theorems.values())
   1350                 percentage = (count / total_theorems) * 100

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1350)main()
   1349                 count = sum(len(categories[category]) for categories in categorized_theorems.values())
-> 1350                 percentage = (count / total_theorems) * 100
   1351                 print(f"{category}: {count} theorems ({percentage:.2f}%)")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1351)main()
   1350                 percentage = (count / total_theorems) * 100
-> 1351                 print(f"{category}: {count} theorems ({percentage:.2f}%)")
   1352

ipdb>
Hard (No proof): 276 theorems (0.14%)
> /data/yingzi_ma/lean_project/ReProver/main.py(1348)main()
   1347             total_theorems = sum(len(theorems) for categories in categorized_theorems.values() for theorems in categories.values())
-> 1348             for category in ["Easy", "Medium", "Hard", "Hard (No proof)"]:
   1349                 count = sum(len(categories[category]) for categories in categorized_theorems.values())

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1353)main()
   1352
-> 1353             print(f"\nPercentile thresholds: Easy <= {percentiles[0]:.2f}, Medium <= {percentiles[1]:.2f}, Hard > {percentiles[1]:.2f}")
   1354

ipdb>

Percentile thresholds: Easy <= 2.72, Medium <= 20.09, Hard > 20.09
> /data/yingzi_ma/lean_project/ReProver/main.py(1355)main()
   1354
-> 1355             print("\nTheorems without proofs (Hard (No proof)), sorted by file path:")
   1356             for repo in sorted_repos:

ipdb>

Theorems without proofs (Hard (No proof)), sorted by file path:
> /data/yingzi_ma/lean_project/ReProver/main.py(1356)main()
   1355             print("\nTheorems without proofs (Hard (No proof)), sorted by file path:")
-> 1356             for repo in sorted_repos:
   1357                 no_proof_theorems = categorized_theorems[repo]["Hard (No proof)"]

ipdb> n
> /data/yingzi_ma/lean_project/ReProver/main.py(1357)main()
   1356             for repo in sorted_repos:
-> 1357                 no_proof_theorems = categorized_theorems[repo]["Hard (No proof)"]
   1358                 if no_proof_theorems:

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1358)main()
   1357                 no_proof_theorems = categorized_theorems[repo]["Hard (No proof)"]
-> 1358                 if no_proof_theorems:
   1359                     print(f"\nURL: {repo.url}")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1356)main()
   1355             print("\nTheorems without proofs (Hard (No proof)), sorted by file path:")
-> 1356             for repo in sorted_repos:
   1357                 no_proof_theorems = categorized_theorems[repo]["Hard (No proof)"]

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1357)main()
   1356             for repo in sorted_repos:
-> 1357                 no_proof_theorems = categorized_theorems[repo]["Hard (No proof)"]
   1358                 if no_proof_theorems:

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1358)main()
   1357                 no_proof_theorems = categorized_theorems[repo]["Hard (No proof)"]
-> 1358                 if no_proof_theorems:
   1359                     print(f"\nURL: {repo.url}")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1359)main()
   1358                 if no_proof_theorems:
-> 1359                     print(f"\nURL: {repo.url}")
   1360                     print(f"  Hard (No proof): {len(no_proof_theorems)} theorems")

ipdb>

URL: https://github.com/lecopivo/SciLean
> /data/yingzi_ma/lean_project/ReProver/main.py(1360)main()
   1359                     print(f"\nURL: {repo.url}")
-> 1360                     print(f"  Hard (No proof): {len(no_proof_theorems)} theorems")
   1361                     sorted_theorems = sorted(no_proof_theorems, key=lambda x: x[1])  # Sort by file path

ipdb>
  Hard (No proof): 276 theorems
> /data/yingzi_ma/lean_project/ReProver/main.py(1361)main()
   1360                     print(f"  Hard (No proof): {len(no_proof_theorems)} theorems")
-> 1361                     sorted_theorems = sorted(no_proof_theorems, key=lambda x: x[1])  # Sort by file path
   1362                     for name, path, start, end, diff in sorted_theorems:

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1362)main()
   1361                     sorted_theorems = sorted(no_proof_theorems, key=lambda x: x[1])  # Sort by file path
-> 1362                     for name, path, start, end, diff in sorted_theorems:
   1363                         print(f"  - {name} (File: {path})")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1363)main()
   1362                     for name, path, start, end, diff in sorted_theorems:
-> 1363                         print(f"  - {name} (File: {path})")
   1364

ipdb>
  - LeanColls.Range.fold_def (File: .lake/packages/leancolls/LeanColls/Data/Range.lean)
> /data/yingzi_ma/lean_project/ReProver/main.py(1362)main()
   1361                     sorted_theorems = sorted(no_proof_theorems, key=lambda x: x[1])  # Sort by file path
-> 1362                     for name, path, start, end, diff in sorted_theorems:
   1363                         print(f"  - {name} (File: {path})")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1363)main()
   1362                     for name, path, start, end, diff in sorted_theorems:
-> 1363                         print(f"  - {name} (File: {path})")
   1364

ipdb>
  - SciLean.approx_consistency (File: SciLean/Core/Approx/ApproxSolution.lean)
> /data/yingzi_ma/lean_project/ReProver/main.py(1362)main()
   1361                     sorted_theorems = sorted(no_proof_theorems, key=lambda x: x[1])  # Sort by file path
-> 1362                     for name, path, start, end, diff in sorted_theorems:
   1363                         print(f"  - {name} (File: {path})")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1363)main()
   1362                     for name, path, start, end, diff in sorted_theorems:
-> 1363                         print(f"  - {name} (File: {path})")
   1364

ipdb> b 1365
Breakpoint 2 at /data/yingzi_ma/lean_project/ReProver/main.py:1365
ipdb> c
  - SciLean.Distribution.smul_extAction (File: SciLean/Core/Distribution/Basic.lean)
  - SciLean.Distribution.sub_extAction (File: SciLean/Core/Distribution/Basic.lean)
  - SciLean.Distribution.postComp.arg_T.IsSmoothLinarMap_rule (File: SciLean/Core/Distribution/Basic.lean)
  - SciLean.Function.toDistribution_zero (File: SciLean/Core/Distribution/Basic.lean)
  - SciLean.Distribution.neg_extAction (File: SciLean/Core/Distribution/Basic.lean)
  - SciLean.Distribution.add_extAction (File: SciLean/Core/Distribution/Basic.lean)
  - SciLean.Distribution.iteD_same (File: SciLean/Core/Distribution/Basic.lean)
  - SciLean.Distribution.fintype_sum_extAction (File: SciLean/Core/Distribution/Basic.lean)
  - SciLean.Distribution.extAction_iteD' (File: SciLean/Core/Distribution/Basic.lean)
  - SciLean.Distribution.indextype_sum_extAction (File: SciLean/Core/Distribution/Basic.lean)
  - SciLean.Distribution.extAction_iteD (File: SciLean/Core/Distribution/Basic.lean)
  - SciLean.Bind.bind.arg_fx.DistribDifferentiable_rule (File: SciLean/Core/Distribution/ParametricDistribDeriv.lean)
  - SciLean.cintegral.arg_f.parDistribDeriv_rule (File: SciLean/Core/Distribution/ParametricDistribDeriv.lean)
  - SciLean.toDistribution.linear_parDistribDeriv_rule (File: SciLean/Core/Distribution/ParametricDistribDeriv.lean)
  - SciLean.DistribDiffrentiable.comp_rule (File: SciLean/Core/Distribution/ParametricDistribDeriv.lean)
  - SciLean.parDistribDeriv.comp_rule (File: SciLean/Core/Distribution/ParametricDistribDeriv.lean)
  - SciLean.parDistribFwdDeriv.bind_rule (File: SciLean/Core/Distribution/ParametricDistribFwdDeriv.lean)
  - SciLean.re_float (File: SciLean/Core/FloatAsReal.lean)
  - Function.Bijective.HVAdd.hVAdd.arg_a1.Bijective_rule_group (File: SciLean/Core/FunctionPropositions/Bijective.lean)
  - Function.Bijective.HMul.hMul.arg_a1.Bijective_rule_group (File: SciLean/Core/FunctionPropositions/Bijective.lean)
  - Function.Bijective.HMul.hMul.arg_a1.Bijective_rule_field (File: SciLean/Core/FunctionPropositions/Bijective.lean)
  - Function.Bijective.HSMul.hSMul.arg_a1.Bijective_rule_field (File: SciLean/Core/FunctionPropositions/Bijective.lean)
  - Function.Bijective.HMul.hMul.arg_a0.Bijective_rule_field (File: SciLean/Core/FunctionPropositions/Bijective.lean)
  - Function.Bijective.HSMul.hSMul.arg_a1.Bijective_rule_group (File: SciLean/Core/FunctionPropositions/Bijective.lean)
  - Function.Bijective.HAdd.hAdd.arg_a0.Bijective_rule (File: SciLean/Core/FunctionPropositions/Bijective.lean)
  - Function.Bijective.HDiv.hDiv.arg_a0.Bijective_rule_group (File: SciLean/Core/FunctionPropositions/Bijective.lean)
  - Function.Bijective.HSub.hSub.arg_a0.Bijective_rule (File: SciLean/Core/FunctionPropositions/Bijective.lean)
  - Function.Bijective.HMul.hMul.arg_a0.Bijective_rule_group (File: SciLean/Core/FunctionPropositions/Bijective.lean)
  - Function.Bijective.HAdd.hAdd.arg_a1.Bijective_rule (File: SciLean/Core/FunctionPropositions/Bijective.lean)
  - Function.Bijective.Prod.mk.arg_fstsnd.Bijective_rule (File: SciLean/Core/FunctionPropositions/Bijective.lean)
  - Function.Bijective.Inv.inv.arg_a0.Bijective_rule_field (File: SciLean/Core/FunctionPropositions/Bijective.lean)
  - Function.Bijective.HDiv.hDiv.arg_a0.Bijective_rule_field (File: SciLean/Core/FunctionPropositions/Bijective.lean)
  - Function.Bijective.Neg.neg.arg_a0.Bijective_rule (File: SciLean/Core/FunctionPropositions/Bijective.lean)
  - Function.Bijective.Inv.inv.arg_a0.Bijective_rule_group (File: SciLean/Core/FunctionPropositions/Bijective.lean)
  - Function.Bijective.HSub.hSub.arg_a1.Bijective_rule (File: SciLean/Core/FunctionPropositions/Bijective.lean)
  - SciLean.Prod.snd.arg_self.CDifferentiable_rule (File: SciLean/Core/FunctionPropositions/CDifferentiable.lean)
  - SciLean.Inner.inner.arg_a0a1.CDifferentiable_rule (File: SciLean/Core/FunctionPropositions/CDifferentiable.lean)
  - SciLean.HSMul.hSMul.arg_a1.CDifferentiable_rule_int (File: SciLean/Core/FunctionPropositions/CDifferentiable.lean)
  - SciLean.IndexType.sum.arg_f.CDifferentiableAt_rule (File: SciLean/Core/FunctionPropositions/CDifferentiable.lean)
  - SciLean.Neg.neg.arg_a0.CDifferentiable_rule (File: SciLean/Core/FunctionPropositions/CDifferentiable.lean)
  - SciLean.CDifferentiable.const_rule (File: SciLean/Core/FunctionPropositions/CDifferentiable.lean)
  - SciLean.IndexType.sum.arg_f.CDifferentiable_rule (File: SciLean/Core/FunctionPropositions/CDifferentiable.lean)
  - SciLean.Prod.fst.arg_self.CDifferentiable_rule (File: SciLean/Core/FunctionPropositions/CDifferentiable.lean)
  - SciLean.CDifferentiable.apply_rule (File: SciLean/Core/FunctionPropositions/CDifferentiable.lean)
  - SciLean.SciLean.norm₂.arg_x.CDifferentiable_rule (File: SciLean/Core/FunctionPropositions/CDifferentiable.lean)
  - SciLean.Prod.mk.arg_fstsnd.CDifferentiableAt_rule (File: SciLean/Core/FunctionPropositions/CDifferentiable.lean)
  - SciLean.BasisDuality.fromDual.arg_x.CDifferentiable_rule (File: SciLean/Core/FunctionPropositions/CDifferentiable.lean)
  - SciLean.CDifferentiable.pi_rule (File: SciLean/Core/FunctionPropositions/CDifferentiable.lean)
  - SciLean.DualBasis.dualProj.arg_x.CDifferentiable_rule (File: SciLean/Core/FunctionPropositions/CDifferentiable.lean)
  - SciLean.BasisDuality.toDual.arg_x.CDifferentiable_rule (File: SciLean/Core/FunctionPropositions/CDifferentiable.lean)
  - SciLean.CDifferentiable.comp_rule (File: SciLean/Core/FunctionPropositions/CDifferentiable.lean)
  - SciLean.HSMul.hSMul.arg_a1.CDifferentiable_rule_nat (File: SciLean/Core/FunctionPropositions/CDifferentiable.lean)
  - SciLean.CDifferentiable.id_rule (File: SciLean/Core/FunctionPropositions/CDifferentiable.lean)
  - SciLean.Basis.proj.arg_x.CDifferentiable_rule (File: SciLean/Core/FunctionPropositions/CDifferentiable.lean)
  - SciLean.CDifferentiableAt.const_rule (File: SciLean/Core/FunctionPropositions/CDifferentiable.lean)
  - SciLean.CDifferentiableAt.apply_rule (File: SciLean/Core/FunctionPropositions/CDifferentiable.lean)
  - SciLean.CDifferentiableAt.pi_rule (File: SciLean/Core/FunctionPropositions/CDifferentiable.lean)
  - SciLean.HAdd.hAdd.arg_a0a1.CDifferentiable_rule (File: SciLean/Core/FunctionPropositions/CDifferentiable.lean)
  - SciLean.HSub.hSub.arg_a0a1.CDifferentiable_rule (File: SciLean/Core/FunctionPropositions/CDifferentiable.lean)
  - SciLean.Prod.snd.arg_self.ContCDiff_rule (File: SciLean/Core/FunctionPropositions/ContCDiff.lean)
  - SciLean.ContCDiffAt.const_rule (File: SciLean/Core/FunctionPropositions/ContCDiff.lean)
  - SciLean.Neg.neg.arg_a0.ContCDiff_rule (File: SciLean/Core/FunctionPropositions/ContCDiff.lean)
  - SciLean.Prod.mk.arg_fstsnd.ContCDiffAt_rule (File: SciLean/Core/FunctionPropositions/ContCDiff.lean)
  - SciLean.HSMul.hSMul.arg_a1.ContCDiffAt_rule_int (File: SciLean/Core/FunctionPropositions/ContCDiff.lean)
  - SciLean.ContCDiffAt.pi_rule (File: SciLean/Core/FunctionPropositions/ContCDiff.lean)
  - SciLean.Basis.proj.arg_x.ContCDiff_rule (File: SciLean/Core/FunctionPropositions/ContCDiff.lean)
  - SciLean.BasisDuality.toDual.arg_x.ContCDiffAt_rule (File: SciLean/Core/FunctionPropositions/ContCDiff.lean)
  - SciLean.IndexType.sum.arg_f.ContCDiffAt_rule (File: SciLean/Core/FunctionPropositions/ContCDiff.lean)
  - SciLean.BasisDuality.fromDual.arg_x.ContCDiff_rule (File: SciLean/Core/FunctionPropositions/ContCDiff.lean)
  - SciLean.BasisDuality.fromDual.arg_x.ContCDiffAt_rule (File: SciLean/Core/FunctionPropositions/ContCDiff.lean)
  - SciLean.HSub.hSub.arg_a0a1.ContCDiff_rule (File: SciLean/Core/FunctionPropositions/ContCDiff.lean)
  - SciLean.Basis.proj.arg_x.ContCDiffAt_rule (File: SciLean/Core/FunctionPropositions/ContCDiff.lean)
  - SciLean.Prod.fst.arg_self.ContCDiffAt_rule (File: SciLean/Core/FunctionPropositions/ContCDiff.lean)
  - SciLean.HSMul.hSMul.arg_a1.ContCDiffAt_rule_nat (File: SciLean/Core/FunctionPropositions/ContCDiff.lean)
  - SciLean.HSub.hSub.arg_a0a1.ContCDiffAt_rule (File: SciLean/Core/FunctionPropositions/ContCDiff.lean)
  - SciLean.DualBasis.dualProj.arg_x.ContCDiff_rule (File: SciLean/Core/FunctionPropositions/ContCDiff.lean)
  - SciLean.BasisDuality.toDual.arg_x.ContCDiff_rule (File: SciLean/Core/FunctionPropositions/ContCDiff.lean)
  - SciLean.ContCDiffAt.apply_rule (File: SciLean/Core/FunctionPropositions/ContCDiff.lean)
  - SciLean.Neg.neg.arg_a0.ContCDiffAt_rule (File: SciLean/Core/FunctionPropositions/ContCDiff.lean)
  - SciLean.norm₂.arg_x.ContCDiffAt_rule (File: SciLean/Core/FunctionPropositions/ContCDiff.lean)
  - SciLean.DualBasis.dualProj.arg_x.ContCDiffAt_rule (File: SciLean/Core/FunctionPropositions/ContCDiff.lean)
  - SciLean.Inner.inner.arg_a0a1.ContCDiffAt_rule (File: SciLean/Core/FunctionPropositions/ContCDiff.lean)
  - SciLean.HAdd.hAdd.arg_a0a1.ContCDiff_rule (File: SciLean/Core/FunctionPropositions/ContCDiff.lean)
  - SciLean.HAdd.hAdd.arg_a0a1.ContCDiffAt_rule (File: SciLean/Core/FunctionPropositions/ContCDiff.lean)
  - SciLean.Prod.snd.arg_self.ContCDiffAt_rule (File: SciLean/Core/FunctionPropositions/ContCDiff.lean)
  - SciLean.Diffeomorphism.id_rule (File: SciLean/Core/FunctionPropositions/Diffeomorphism.lean)
  - SciLean.Diffeomorphism.comp_rule (File: SciLean/Core/FunctionPropositions/Diffeomorphism.lean)
  - SciLean.Function.invFun.arg_a1.cderiv_rule (File: SciLean/Core/FunctionPropositions/Diffeomorphism.lean)
  - SciLean.Function.invFun.arg_f_a1.cderiv_rule (File: SciLean/Core/FunctionPropositions/Diffeomorphism.lean)
  - SciLean.Function.invFun.arg_f.cderiv_rule' (File: SciLean/Core/FunctionPropositions/Diffeomorphism.lean)
  - SciLean.SciLean.semiAdjoint.arg_y.HasAdjDiffAt_rule (File: SciLean/Core/FunctionPropositions/HasAdjDiff.lean)
  - SciLean.SciLean.norm₂.arg_x.HasAdjDiffAt_rule (File: SciLean/Core/FunctionPropositions/HasAdjDiff.lean)
  - SciLean.HasSemiAdjoint.HAdd.hAdd.arg_a0a1.HasSemiAdjoint_rule (File: SciLean/Core/FunctionPropositions/HasSemiAdjoint.lean)
  - SciLean.HasSemiAdjoint.SciLean.IndexType.sum.arg_f.HasSemiAdjoint_rule (File: SciLean/Core/FunctionPropositions/HasSemiAdjoint.lean)
  - SciLean.HasSemiAdjoint.Prod.snd.arg_self.HasSemiAdjoint_rule (File: SciLean/Core/FunctionPropositions/HasSemiAdjoint.lean)
  - SciLean.HasSemiAdjoint.apply_rule (File: SciLean/Core/FunctionPropositions/HasSemiAdjoint.lean)
  - SciLean.HasSemiAdjoint.HSub.hSub.arg_a0a1.HasSemiAdjoint_rule (File: SciLean/Core/FunctionPropositions/HasSemiAdjoint.lean)
  - SciLean.HasSemiAdjoint.Inner.inner.arg_a1.HasSemiAdjoint_rule (File: SciLean/Core/FunctionPropositions/HasSemiAdjoint.lean)
  - SciLean.HasSemiAdjoint.starRingEnd.arg_a.HasSemiAdjoint_rule (File: SciLean/Core/FunctionPropositions/HasSemiAdjoint.lean)
  - SciLean.HasSemiAdjoint.HSMul.hSMul.arg_a1.HasSemiAdjoint_rule (File: SciLean/Core/FunctionPropositions/HasSemiAdjoint.lean)
  - SciLean.HasSemiAdjoint.Prod.fst.arg_self.HasSemiAdjoint_rule (File: SciLean/Core/FunctionPropositions/HasSemiAdjoint.lean)
  - SciLean.HasSemiAdjoint.Finset.sum.arg_f.HasSemiAdjoint_rule (File: SciLean/Core/FunctionPropositions/HasSemiAdjoint.lean)
  - SciLean.HasSemiAdjoint.comp_rule (File: SciLean/Core/FunctionPropositions/HasSemiAdjoint.lean)
  - SciLean.HasSemiAdjoint.Inner.inner.arg_a0.HasSemiAdjoint_rule (File: SciLean/Core/FunctionPropositions/HasSemiAdjoint.lean)
  - SciLean.HasSemiAdjoint.HMul.hMul.arg_a1.HasSemiAdjoint_rule (File: SciLean/Core/FunctionPropositions/HasSemiAdjoint.lean)
  - SciLean.HasSemiAdjoint.Neg.neg.arg_a0.HasSemiAdjoint_rule (File: SciLean/Core/FunctionPropositions/HasSemiAdjoint.lean)
  - SciLean.HasSemiAdjoint.HDiv.hDiv.arg_a0.HasSemiAdjoint_rule (File: SciLean/Core/FunctionPropositions/HasSemiAdjoint.lean)
  - SciLean.HasSemiAdjoint.const_rule (File: SciLean/Core/FunctionPropositions/HasSemiAdjoint.lean)
  - SciLean.HasSemiAdjoint.pi_rule (File: SciLean/Core/FunctionPropositions/HasSemiAdjoint.lean)
  - SciLean.HasSemiAdjoint.HSMul.hSMul.arg_a0.HasSemiAdjoint_rule (File: SciLean/Core/FunctionPropositions/HasSemiAdjoint.lean)
  - SciLean.HasSemiAdjoint.SciLean.semiAdjoint.arg_y.HasSemiAdjoint_rule (File: SciLean/Core/FunctionPropositions/HasSemiAdjoint.lean)
  - SciLean.HasSemiAdjoint.HMul.hMul.arg_a0.HasSemiAdjoint_rule (File: SciLean/Core/FunctionPropositions/HasSemiAdjoint.lean)
  - SciLean.DualBasis.dualProj.arg_x.IsAffineMap_rule (File: SciLean/Core/FunctionPropositions/IsAffineMap.lean)
  - IsAffineMap.IsAffineMap_pi (File: SciLean/Core/FunctionPropositions/IsAffineMap.lean)
  - SciLean.Basis.proj.arg_x.IsAffineMap_rule (File: SciLean/Core/FunctionPropositions/IsAffineMap.lean)
  - SciLean.BasisDuality.toDual.arg_x.IsAffineMap_rule (File: SciLean/Core/FunctionPropositions/IsAffineMap.lean)
  - IsAffineMap.IsAffineMap_apply (File: SciLean/Core/FunctionPropositions/IsAffineMap.lean)
  - SciLean.BasisDuality.fromDual.arg_x.IsAffineMap_rule (File: SciLean/Core/FunctionPropositions/IsAffineMap.lean)
  - IndexType.sum.arg_f.IsAffineMap_rule (File: SciLean/Core/FunctionPropositions/IsAffineMap.lean)
  - IsAffineMap.IsAffineMap_comp (File: SciLean/Core/FunctionPropositions/IsAffineMap.lean)
  - SciLean.IsContinuousLinearMap.isContinuousLinearMap_differentiable (File: SciLean/Core/FunctionPropositions/IsContinuousLinearMap.lean)
  - SciLean.IsContinuousLinearMap.Inner.inner.arg_a0.IsContinuousLinearMap_rule (File: SciLean/Core/FunctionPropositions/IsContinuousLinearMap.lean)
  - SciLean.IsContinuousLinearMap.starRingEnd.arg_a.IsContinuousLinearMap_rule (File: SciLean/Core/FunctionPropositions/IsContinuousLinearMap.lean)
  - SciLean.IsContinuousLinearMap.Inner.inner.arg_a1.IsContinuousLinearMap_rule (File: SciLean/Core/FunctionPropositions/IsContinuousLinearMap.lean)
  - IndexType.sum.arg_f.IsLinearMap_rule (File: SciLean/Core/FunctionPropositions/IsLinearMap.lean)
  - SciLean.BasisDuality.fromDual.arg_x.IsLinearMap_rule (File: SciLean/Core/FunctionPropositions/IsLinearMap.lean)
  - SciLean.BasisDuality.toDual.arg_x.IsLinearMap_rule (File: SciLean/Core/FunctionPropositions/IsLinearMap.lean)
  - IsLinearMap.isLinearMap_pi (File: SciLean/Core/FunctionPropositions/IsLinearMap.lean)
  - SciLean.Basis.proj.arg_x.IsLinearMap_rule (File: SciLean/Core/FunctionPropositions/IsLinearMap.lean)
  - SciLean.DualBasis.dualProj.arg_x.IsLinearMap_rule (File: SciLean/Core/FunctionPropositions/IsLinearMap.lean)
  - IsLinearMap.isLinearMap_const_zero (File: SciLean/Core/FunctionPropositions/IsLinearMap.lean)
  - SciLean.ContCDiffMap_apply_CDifferentiableAt (File: SciLean/Core/FunctionSpaces/ContCDiffMap.lean)
  - SciLean.ContCDiffMap_apply_CDifferentiable (File: SciLean/Core/FunctionSpaces/ContCDiffMap.lean)
  - SciLean.ContCDiffMap_eval_CDifferentiable (File: SciLean/Core/FunctionSpaces/ContCDiffMap.lean)
  - SciLean.ContCDiffMap_eval_CDifferentiable' (File: SciLean/Core/FunctionSpaces/ContCDiffMap.lean)
  - SciLean.ContCDiffMapFD_eta (File: SciLean/Core/FunctionSpaces/ContCDiffMapFD.lean)
  - SciLean.ContCDiffMapFD_eval_CDifferentiable (File: SciLean/Core/FunctionSpaces/ContCDiffMapFD.lean)
  - SciLean.ContCDiffMapFD_apply_CDifferentiable (File: SciLean/Core/FunctionSpaces/ContCDiffMapFD.lean)
  - SciLean.ContCDiffMapFD_eval_CDifferentiable' (File: SciLean/Core/FunctionSpaces/ContCDiffMapFD.lean)
  - SciLean.ContCDiffMapFD_apply_CDifferentiableAt (File: SciLean/Core/FunctionSpaces/ContCDiffMapFD.lean)
  - SciLean.SmoothLinearMap.apply_zero (File: SciLean/Core/FunctionSpaces/SmoothLinearMap.lean)
  - SciLean.SmoothLinearMap.indextype_sum_apply (File: SciLean/Core/FunctionSpaces/SmoothLinearMap.lean)
  - SciLean.SmoothLinearMap.fintype_sum_apply (File: SciLean/Core/FunctionSpaces/SmoothLinearMap.lean)
  - SciLean.SmoothLinearMap.zero_apply (File: SciLean/Core/FunctionSpaces/SmoothLinearMap.lean)
  - SciLean.HAdd.hAdd.arg_a1.cderiv_rule (File: SciLean/Core/FunctionTransformations/CDeriv.lean)
  - SciLean.HSub.hSub.arg_a1.cderiv_rule (File: SciLean/Core/FunctionTransformations/CDeriv.lean)
  - SciLean.Inner.inner.arg_a0a1.cderiv_rule_at (File: SciLean/Core/FunctionTransformations/CDeriv.lean)
  - SciLean.HSMul.hSMul.arg_a0a1.cderiv_rule_at (File: SciLean/Core/FunctionTransformations/CDeriv.lean)
  - SciLean.cderiv.comp_rule_at (File: SciLean/Core/FunctionTransformations/CDeriv.lean)
  - SciLean.HDiv.hDiv.arg_a0a1.cderiv_rule_at (File: SciLean/Core/FunctionTransformations/CDeriv.lean)
  - SciLean.SciLean.cderiv.arg_dx.cderiv_rule_at (File: SciLean/Core/FunctionTransformations/CDeriv.lean)
  - SciLean.cderiv.let_rule (File: SciLean/Core/FunctionTransformations/CDeriv.lean)
  - SciLean.HMul.hMul.arg_a0a1.cderiv_rule_at (File: SciLean/Core/FunctionTransformations/CDeriv.lean)
  - SciLean.ite.arg_chte.cderiv_rule (File: SciLean/Core/FunctionTransformations/CDeriv.lean)
  - SciLean.SciLean.norm₂.arg_x.cderiv_rule_at (File: SciLean/Core/FunctionTransformations/CDeriv.lean)
  - SciLean.cderiv.apply_rule (File: SciLean/Core/FunctionTransformations/CDeriv.lean)
  - SciLean.cderiv.const_rule (File: SciLean/Core/FunctionTransformations/CDeriv.lean)
  - SciLean.cderiv.let_rule_at (File: SciLean/Core/FunctionTransformations/CDeriv.lean)
  - SciLean.cderiv.pi_rule_at (File: SciLean/Core/FunctionTransformations/CDeriv.lean)
  - SciLean.HDiv.hDiv.arg_a0a1.cderiv_rule (File: SciLean/Core/FunctionTransformations/CDeriv.lean)
  - SciLean.cderiv.arg_f.IsSmoothLinearMap_rule (File: SciLean/Core/FunctionTransformations/CDeriv.lean)
  - SciLean.HAdd.hAdd.arg_a0.cderiv_rule (File: SciLean/Core/FunctionTransformations/CDeriv.lean)
  - SciLean.cderiv.id_rule (File: SciLean/Core/FunctionTransformations/CDeriv.lean)
  - SciLean.cderiv.comp_rule (File: SciLean/Core/FunctionTransformations/CDeriv.lean)
  - SciLean.SciLean.cderiv.arg_dx.CDifferentiableAt_rule (File: SciLean/Core/FunctionTransformations/CDeriv.lean)
  - SciLean.IndexType.sum.arg_f.cderiv_rule_at (File: SciLean/Core/FunctionTransformations/CDeriv.lean)
  - SciLean.HSub.hSub.arg_a0.cderiv_rule (File: SciLean/Core/FunctionTransformations/CDeriv.lean)
  - SciLean.cderiv.pi_rule (File: SciLean/Core/FunctionTransformations/CDeriv.lean)
  - SciLean.Neg.neg.arg_a0.cderiv_rule' (File: SciLean/Core/FunctionTransformations/CDeriv.lean)
  - SciLean.Prod.mk.arg_fstsnd.cderiv_rule_at (File: SciLean/Core/FunctionTransformations/CDeriv.lean)
  - SciLean.fderiv.apply_rule (File: SciLean/Core/FunctionTransformations/FDeriv.lean)
  - SciLean.fwdDeriv.IndexType.sum.arg_f.fwdDeriv_rule (File: SciLean/Core/FunctionTransformations/FwdDeriv.lean)
  - SciLean.fwdDeriv.IndexType.sum.arg_f.fwdDeriv_rule_at (File: SciLean/Core/FunctionTransformations/FwdDeriv.lean)
  - SciLean.FwdFDeriv.HDiv.hDiv.arg_a0a1.fwdFDeriv_rule_at (File: SciLean/Core/FunctionTransformations/FwdFDeriv.lean)
  - SciLean.FwdFDeriv.FinType.sum.arg_f.fwdFDeriv_rule_at (File: SciLean/Core/FunctionTransformations/FwdFDeriv.lean)
  - Function.invFun.HSub.hSub.arg_a1.invFun_rule (File: SciLean/Core/FunctionTransformations/InvFun.lean)
  - Function.invFun.Inv.inv.arg_a0.invFun_rule_group (File: SciLean/Core/FunctionTransformations/InvFun.lean)
  - Function.invFun.let_rule (File: SciLean/Core/FunctionTransformations/InvFun.lean)
  - Function.invFun.Equiv.toFun.arg_a0.invFun_rule (File: SciLean/Core/FunctionTransformations/InvFun.lean)
  - Function.invFun.Inv.inv.arg_a0.invFun_rule_field (File: SciLean/Core/FunctionTransformations/InvFun.lean)
  - Function.invFun.comp_rule (File: SciLean/Core/FunctionTransformations/InvFun.lean)
  - Function.invFun.HAdd.hAdd.arg_a1.invFun_rule (File: SciLean/Core/FunctionTransformations/InvFun.lean)
  - Function.invFun.HSub.hSub.arg_a0.invFun_rule (File: SciLean/Core/FunctionTransformations/InvFun.lean)
  - Function.invFun.HAdd.hAdd.arg_a0.invFun_rule (File: SciLean/Core/FunctionTransformations/InvFun.lean)
  - Function.invFun.Neg.neg.arg_a0.invFun_rule (File: SciLean/Core/FunctionTransformations/InvFun.lean)
  - Function.invFun.Equiv.invFun.arg_a0.invFun_rule (File: SciLean/Core/FunctionTransformations/InvFun.lean)
  - Function.invFun.Prod.mk.arg_fstsnd.invFun_rule (File: SciLean/Core/FunctionTransformations/InvFun.lean)
  - Function.invFun.id_rule (File: SciLean/Core/FunctionTransformations/InvFun.lean)
  - Set.HSub.hSub.arg_a0.preimage_rule_Ioo (File: SciLean/Core/FunctionTransformations/Preimage.lean)
  - Set.HAdd.hAdd.arg_a0.preimage_rule_Ioo (File: SciLean/Core/FunctionTransformations/Preimage.lean)
  - Set.HSub.hSub.arg_a1.preimage_rule_Ioo (File: SciLean/Core/FunctionTransformations/Preimage.lean)
  - Set.Neg.neg.arg_a1.preimage_rule_Ioo (File: SciLean/Core/FunctionTransformations/Preimage.lean)
  - Set.HAdd.hAdd.arg_a1.preimage_rule_Ioo (File: SciLean/Core/FunctionTransformations/Preimage.lean)
  - SciLean.revDerivUpdate.pi_rule (File: SciLean/Core/FunctionTransformations/RevDeriv.lean)
  - IndexType.sum.arg_f.revDerivProj_rule (File: SciLean/Core/FunctionTransformations/RevDeriv.lean)
  - IndexType.sum.arg_f.revDerivProjUpdate_rule (File: SciLean/Core/FunctionTransformations/RevDeriv.lean)
  - SciLean.revDerivProjUpdate.pi_rule (File: SciLean/Core/FunctionTransformations/RevDeriv.lean)
  - SciLean.semiAdjoint.starRingEnd.arg_a0.semiAdjoint_rule (File: SciLean/Core/FunctionTransformations/SemiAdjoint.lean)
  - SciLean.semiAdjoint.Inner.inner.arg_a0.semiAdjoint_rule (File: SciLean/Core/FunctionTransformations/SemiAdjoint.lean)
  - SciLean.semiAdjoint.id_rule (File: SciLean/Core/FunctionTransformations/SemiAdjoint.lean)
  - SciLean.semiAdjoint.let_rule (File: SciLean/Core/FunctionTransformations/SemiAdjoint.lean)
  - SciLean.semiAdjoint.Prod.snd.arg_self.semiAdjoint_rule (File: SciLean/Core/FunctionTransformations/SemiAdjoint.lean)
  - SciLean.semiAdjoint.HSMul.hSMul.arg_a0.semiAdjoint_rule (File: SciLean/Core/FunctionTransformations/SemiAdjoint.lean)
  - SciLean.semiAdjoint.HDiv.hDiv.arg_a0.semiAdjoint_rule (File: SciLean/Core/FunctionTransformations/SemiAdjoint.lean)
  - SciLean.semiAdjoint.HAdd.hAdd.arg_a0a1.semiAdjoint_rule (File: SciLean/Core/FunctionTransformations/SemiAdjoint.lean)
  - SciLean.semiAdjoint.SciLean.semiAdjoint.arg_y.semiAdjoint_rule (File: SciLean/Core/FunctionTransformations/SemiAdjoint.lean)
  - SciLean.semiAdjoint.IndexType.sum.arg_f.semiAdjoint_rule (File: SciLean/Core/FunctionTransformations/SemiAdjoint.lean)
  - SciLean.semiAdjoint.HSub.hSub.arg_a0a1.semiAdjoint_rule (File: SciLean/Core/FunctionTransformations/SemiAdjoint.lean)
  - SciLean.semiAdjoint.HMul.hMul.arg_a0.semiAdjoint_rule (File: SciLean/Core/FunctionTransformations/SemiAdjoint.lean)
  - SciLean.semiAdjoint.Finset.sum.arg_f.semiAdjoint_rule (File: SciLean/Core/FunctionTransformations/SemiAdjoint.lean)
  - SciLean.semiAdjoint.HSMul.hSMul.arg_a1.semiAdjoint_rule (File: SciLean/Core/FunctionTransformations/SemiAdjoint.lean)
  - SciLean.semiAdjoint.const_rule (File: SciLean/Core/FunctionTransformations/SemiAdjoint.lean)
  - SciLean.semiAdjoint.Neg.neg.arg_a0.semiAdjoint_rule (File: SciLean/Core/FunctionTransformations/SemiAdjoint.lean)
  - SciLean.semiAdjoint.comp_rule (File: SciLean/Core/FunctionTransformations/SemiAdjoint.lean)
  - SciLean.semiAdjoint.Prod.mk.arg_fstsnd.semiAdjoint_rule (File: SciLean/Core/FunctionTransformations/SemiAdjoint.lean)
  - SciLean.semiAdjoint.Inner.inner.arg_a1.semiAdjoint_rule (File: SciLean/Core/FunctionTransformations/SemiAdjoint.lean)
  - SciLean.semiAdjoint.HMul.hMul.arg_a1.semiAdjoint_rule (File: SciLean/Core/FunctionTransformations/SemiAdjoint.lean)
  - SciLean.semiAdjoint.Prod.fst.arg_self.semiAdjoint_rule (File: SciLean/Core/FunctionTransformations/SemiAdjoint.lean)
  - SciLean.gaussian.arg_μσx.CDifferentiableAt_rule (File: SciLean/Core/Functions/Gaussian.lean)
  - SciLean.gaussian.arg_μx.cderiv_rule (File: SciLean/Core/Functions/Gaussian.lean)
  - SciLean.cintegral.arg_f.CDifferentiable_rule (File: SciLean/Core/Integral/CIntegral.lean)
  - SciLean.cintegral.arg_f.IsLinearMap_rule (File: SciLean/Core/Integral/CIntegral.lean)
  - SciLean.split_integral_over_set_of_ite (File: SciLean/Core/Integral/CIntegral.lean)
  - SciLean.cintegral.arg_f.cderiv_rule (File: SciLean/Core/Integral/CIntegral.lean)
  - SciLean.Measure.restrict_restrict (File: SciLean/Core/Integral/Common.lean)
  - SciLean.Measure.prod_restrict (File: SciLean/Core/Integral/Common.lean)
  - SciLean.jacobian.comp_rule (File: SciLean/Core/Integral/Jacobian.lean)
  - SciLean.parametric_inverse_bijection (File: SciLean/Core/Integral/ParametricInverse.lean)
  - SciLean.parametric_inverse_affine (File: SciLean/Core/Integral/PlaneDecomposition.lean)
  - SciLean.parametric_inverse_affine' (File: SciLean/Core/Integral/PlaneDecomposition.lean)
  - IsLinearMap.sum_push (File: SciLean/Core/Meta/GenerateLinearMapSimp.lean)
  - IsLinearMap.sum_pull (File: SciLean/Core/Meta/GenerateLinearMapSimp.lean)
  - SciLean.inner_dualBasis_basis (File: SciLean/Core/Objects/FinVec.lean)
  - SciLean.inner_proj_dualProj (File: SciLean/Core/Objects/FinVec.lean)
  - SciLean.proj_zero (File: SciLean/Core/Objects/FinVec.lean)
  - SciLean.inner_basis_dualProj (File: SciLean/Core/Objects/FinVec.lean)
  - SciLean.inner_dualBasis_proj (File: SciLean/Core/Objects/FinVec.lean)
  - SciLean.scalar_abs_neg (File: SciLean/Core/Objects/Scalar.lean)
  - SciLean.scalar_abs_one (File: SciLean/Core/Objects/Scalar.lean)
  - SciLean.scalar_sqrt_zero (File: SciLean/Core/Objects/Scalar.lean)
  - SciLean.scalar_abs_zero (File: SciLean/Core/Objects/Scalar.lean)
  - SciLean.scalar_sqrt_one (File: SciLean/Core/Objects/Scalar.lean)
  - SciLean.scalar_min_one_zero (File: SciLean/Core/Objects/Scalar.lean)
  - SciLean.scalar_max_one_zero (File: SciLean/Core/Objects/Scalar.lean)
  - SciLean.norm₂_squared (File: SciLean/Core/Objects/SemiInnerProductSpace.lean)
  - SciLean.norm₂_prod (File: SciLean/Core/Objects/SemiInnerProductSpace.lean)
  - SciLean.norm₂_squared_nat (File: SciLean/Core/Objects/SemiInnerProductSpace.lean)
  - SciLean.norm2_scalar (File: SciLean/Core/Objects/SemiInnerProductSpace.lean)
  - SciLean.scalar_norm (File: SciLean/Core/Objects/SemiInnerProductSpace.lean)
  - SciLean.norm₂_scalar (File: SciLean/Core/Objects/SemiInnerProductSpace.lean)
  - SciLean.Rand.add_as_flip_E (File: SciLean/Core/Rand/Distributions/Flip.lean)
  - SciLean.Rand.flip.pdf_wrt_flip (File: SciLean/Core/Rand/Distributions/Flip.lean)
  - SciLean.Rand.flip.pdf (File: SciLean/Core/Rand/Distributions/Flip.lean)
  - SciLean.Rand.flip.integral (File: SciLean/Core/Rand/Distributions/Flip.lean)
  - SciLean.Rand.uniformI.pdf (File: SciLean/Core/Rand/Distributions/UniformI.lean)
  - SciLean.Rand.pull_E_affine (File: SciLean/Core/Rand/PushPullExpectation.lean)
  - SciLean.Rand.mean_add (File: SciLean/Core/Rand/Rand.lean)
  - SciLean.Rand.bind_E (File: SciLean/Core/Rand/Rand.lean)
  - SciLean.Rand.swap_bind (File: SciLean/Core/Rand/Rand.lean)
  - SciLean.Rand.bind_pdf (File: SciLean/Core/Rand/Rand.lean)
  - SciLean.Rand.mean_add' (File: SciLean/Core/Rand/Rand.lean)
  - SciLean.Rand.E_smul (File: SciLean/Core/Rand/Rand.lean)
  - SciLean.ArrayType.ext (File: SciLean/Data/ArrayType/Basic.lean)
  - GetElem.getElem.arg_cont.revCDerivProj_rule (File: SciLean/Data/ArrayType/Properties.lean)
  - LeanColls.Indexed.set.arg_contelem.IsLinearMap_rule_simple (File: SciLean/Data/ArrayType/Properties.lean)
  - LeanColls.Indexed.set.arg_contelem.revCDerivProj_rule (File: SciLean/Data/ArrayType/Properties.lean)
  - LeanColls.Indexed.ofFn.arg_cont.semiAdjoint_rule_simple (File: SciLean/Data/ArrayType/Properties.lean)
  - GetElem.getElem.arg_cont.semiAdjoint_rule_simple (File: SciLean/Data/ArrayType/Properties.lean)
  - SciLean.odeSolve.arg_x₀.semiAdjoint_rule (File: SciLean/Modules/DifferentialEquations/OdeSolve.lean)
  - SciLean.odeSolve.arg_ft₀tx₀.fwdDeriv_rule (File: SciLean/Modules/DifferentialEquations/OdeSolve.lean)
  - SciLean.odeSolve.arg_x₀.revCDeriv_rule (File: SciLean/Modules/DifferentialEquations/OdeSolve.lean)
  - SciLean.explicitSymplecticEuler_eq_implicitSymplecticEulerV1 (File: SciLean/Modules/DifferentialEquations/OdeSolvers/Solvers.lean)
  - SciLean.decomposeSolution (File: SciLean/Util/SolveFun.lean)
  - SciLean.decompose_has_unique_solution (File: SciLean/Util/SolveFun.lean)
> /data/yingzi_ma/lean_project/ReProver/main.py(1365)main()
   1364
2> 1365             for repo in sorted_repos:
   1366                 for lambda_value in lambdas:

ipdb> n
> /data/yingzi_ma/lean_project/ReProver/main.py(1366)main()
2  1365             for repo in sorted_repos:
-> 1366                 for lambda_value in lambdas:
   1367                     print(f"Using lambda = {lambda_value}")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1367)main()
   1366                 for lambda_value in lambdas:
-> 1367                     print(f"Using lambda = {lambda_value}")
   1368                     if start_with_pfr:

ipdb>
Using lambda = 0.1
> /data/yingzi_ma/lean_project/ReProver/main.py(1368)main()
   1367                     print(f"Using lambda = {lambda_value}")
-> 1368                     if start_with_pfr:
   1369                         if "pfr" not in repo.name:

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1373)main()
   1372                             start_with_pfr = False
-> 1373                     print(f"Processing {repo.name}")
   1374                     lean_git_repo = LeanGitRepo(repo.url, repo.commit)

ipdb>
Processing leanprover-community/mathlib4
> /data/yingzi_ma/lean_project/ReProver/main.py(1374)main()
   1373                     print(f"Processing {repo.name}")
-> 1374                     lean_git_repo = LeanGitRepo(repo.url, repo.commit)
   1375                     proofs = retrieve_proof(run_progressive_training, use_fisher, single_repo, curriculum_learning, dynamic_database_json_path, lean_git_repo, lean_git_repo.name, lean_git_repo.commit, lambda_value, current_epoch, epochs
_per_repo, db)

ipdb>
2024-09-05 00:16:28.054 | DEBUG    | lean_dojo.data_extraction.lean:_to_commit_hash:90 - Querying the commit hash for lean4 v4.8.0
> /data/yingzi_ma/lean_project/ReProver/main.py(1375)main()
   1374                     lean_git_repo = LeanGitRepo(repo.url, repo.commit)
-> 1375                     proofs = retrieve_proof(run_progressive_training, use_fisher, single_repo, curriculum_learning, dynamic_database_json_path, lean_git_repo, lean_git_repo.name, lean_git_repo.commit, lambda_value, current_epoch, epochs
_per_repo, db)
   1376                     current_epoch += epochs_per_repo

ipdb> s
--Call--
> /data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/lean_dojo/data_extraction/lean.py(458)name()
    457
--> 458     @property
    459     def name(self) -> str:

ipdb> n
> /data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/lean_dojo/data_extraction/lean.py(460)name()
    459     def name(self) -> str:
--> 460         return self.repo.name
    461

ipdb> n
--Return--
'mathlib4'
> /data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/lean_dojo/data_extraction/lean.py(460)name()
    459     def name(self) -> str:
--> 460         return self.repo.name
    461

ipdb>
TypeError: retrieve_proof() takes 11 positional arguments but 12 were given
> /data/yingzi_ma/lean_project/ReProver/main.py(1375)main()
   1374                     lean_git_repo = LeanGitRepo(repo.url, repo.commit)
-> 1375                     proofs = retrieve_proof(run_progressive_training, use_fisher, single_repo, curriculum_learning, dynamic_database_json_path, lean_git_repo, lean_git_repo.name, lean_git_repo.commit, lambda_value, current_epoch, epochs
_per_repo, db)
   1376                     current_epoch += epochs_per_repo

ipdb> s
> /data/yingzi_ma/lean_project/ReProver/main.py(1430)main()
   1429                     #     shutil.rmtree(repo)
-> 1430     except Exception as e:
   1431         logger.info(f"An error occurred: {e}", file=sys.stderr)

ipdb> n
> /data/yingzi_ma/lean_project/ReProver/main.py(1431)main()
   1430     except Exception as e:
-> 1431         logger.info(f"An error occurred: {e}", file=sys.stderr)
   1432         traceback.print_exc()

ipdb>
2024-09-05 00:17:10.428 | INFO     | __main__:main:1431 - An error occurred: retrieve_proof() takes 11 positional arguments but 12 were given
> /data/yingzi_ma/lean_project/ReProver/main.py(1432)main()
   1431         logger.info(f"An error occurred: {e}", file=sys.stderr)
-> 1432         traceback.print_exc()
   1433

ipdb> exit()
Traceback (most recent call last):
  File "/data/yingzi_ma/lean_project/ReProver/main.py", line 1375, in main
    proofs = retrieve_proof(run_progressive_training, use_fisher, single_repo, curriculum_learning, dynamic_database_json_path, lean_git_repo, lean_git_repo.commit, lambda_value, current_epoch, epochs_per_repo, db)
TypeError: retrieve_proof() takes 11 positional arguments but 12 were given

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/data/yingzi_ma/lean_project/ReProver/main.py", line 1435, in <module>
    main()
  File "/data/yingzi_ma/lean_project/ReProver/main.py", line 1432, in main
    traceback.print_exc()
  File "/data/yingzi_ma/lean_project/ReProver/main.py", line 1432, in main
    traceback.print_exc()
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/bdb.py", line 90, in trace_dispatch
    return self.dispatch_line(frame)
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/bdb.py", line 115, in dispatch_line
    if self.quitting: raise BdbQuit
bdb.BdbQuit

If you suspect this is an IPython 8.12.3 bug, please report it at:
    https://github.com/ipython/ipython/issues
or send an email to the mailing list at ipython-dev@python.org

You can print a more detailed traceback right now with "%tb", or use "%debug"
to interactively debug it.

Extra-detailed tracebacks for bug-reporting purposes can be enabled via:
    %config Application.verbose_crash=True

(base) yingzi_ma@cais-login-0:~/lean_project/ReProver$ bash run_code.sh
Script executed from: /data/yingzi_ma/lean_project/ReProver
[2024-09-05 00:20:11,512] [WARNING] [real_accelerator.py:162:get_accelerator] Setting accelerator to CPU. If you have GPU or other accelerator, we were unable to detect it.
[2024-09-05 00:20:11,513] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cpu (auto detect)
2024-09-05 00:20:13.844 | INFO     | __main__:main:1291 - Running progressive training
2024-09-05 00:20:13.844 | INFO     | __main__:main:1297 - Configuring LeanDojo...
2024-09-05 00:20:13.847 | INFO     | generate_benchmark_lean4:configure_leandojo:317 - Current working directory: /data/yingzi_ma/lean_project/ReProver
2024-09-05 00:20:13.847 | INFO     | __main__:main:1299 - LeanDojo configured
2024-09-05 00:20:36.561 | INFO     | dynamic_database:add_repository:583 - Attempting to add repository: https://github.com/leanprover-community/mathlib4 (commit: 2b29e73438e240a427bcecc7c0fe19306beb1310)
2024-09-05 00:20:36.561 | INFO     | dynamic_database:add_repository:586 - Added new repository: https://github.com/leanprover-community/mathlib4 (commit: 2b29e73438e240a427bcecc7c0fe19306beb1310)
2024-09-05 00:20:43.596 | INFO     | dynamic_database:add_repository:583 - Attempting to add repository: https://github.com/lecopivo/SciLean (commit: 22d53b2f4e3db2a172e71da6eb9c916e62655744)
2024-09-05 00:20:43.596 | INFO     | dynamic_database:add_repository:586 - Added new repository: https://github.com/lecopivo/SciLean (commit: 22d53b2f4e3db2a172e71da6eb9c916e62655744)
Found 2 repositories
2024-09-05 00:20:44.438 | INFO     | dynamic_database:update_repository:597 - Attempting to update repository: https://github.com/leanprover-community/mathlib4 (commit: 2b29e73438e240a427bcecc7c0fe19306beb1310)
2024-09-05 00:20:44.438 | INFO     | dynamic_database:update_repository:601 - Updated repository: https://github.com/leanprover-community/mathlib4 (commit: 2b29e73438e240a427bcecc7c0fe19306beb1310)
2024-09-05 00:20:44.720 | INFO     | dynamic_database:update_repository:597 - Attempting to update repository: https://github.com/lecopivo/SciLean (commit: 22d53b2f4e3db2a172e71da6eb9c916e62655744)
2024-09-05 00:20:44.720 | INFO     | dynamic_database:update_repository:601 - Updated repository: https://github.com/lecopivo/SciLean (commit: 22d53b2f4e3db2a172e71da6eb9c916e62655744)
Summary of theorem difficulties by URL:

URL: https://github.com/leanprover-community/mathlib4
  Easy: 41298 theorems
    - Subgroup.disjoint_iff_mul_eq_one (File: Mathlib/Algebra/Group/Subgroup/Basic.lean, Difficulty: 2.72)
    - Subgroup.disjoint_def (File: Mathlib/Algebra/Group/Subgroup/Basic.lean, Difficulty: 2.72)
    - List.forall_map_iff (File: Mathlib/Data/List/Basic.lean, Difficulty: 2.72)
  Medium: 39921 theorems
    - ConjClasses.mem_noncenter (File: Mathlib/Algebra/Group/Subgroup/Basic.lean, Difficulty: N/A)
    - List.disjoint_map (File: Mathlib/Data/List/Basic.lean, Difficulty: 7.39)
    - Subgroup.SubgroupNormal.mem_comm (File: Mathlib/Algebra/Group/Subgroup/Basic.lean, Difficulty: 7.39)
  Hard: 39874 theorems
    - IsConj.normalClosure_eq_top_of (File: Mathlib/Algebra/Group/Subgroup/Basic.lean, Difficulty: 3269017.37)
    - Subgroup.mul_injective_of_disjoint (File: Mathlib/Algebra/Group/Subgroup/Basic.lean, Difficulty: 54.60)
    - List.lookup_graph (File: Mathlib/Data/List/Basic.lean, Difficulty: 403.43)
  Hard (No proof): 0 theorems

URL: https://github.com/lecopivo/SciLean
  Easy: 26292 theorems
    - ConjClasses.mem_noncenter (File: .lake/packages/mathlib/Mathlib/GroupTheory/Subgroup/Basic.lean, Difficulty: N/A)
    - List.forall_map_iff (File: .lake/packages/mathlib/Mathlib/Data/List/Basic.lean, Difficulty: 2.72)
    - List.forall_iff_forall_mem (File: .lake/packages/mathlib/Mathlib/Data/List/Basic.lean, Difficulty: 2.72)
  Medium: 23917 theorems
    - List.disjoint_map (File: .lake/packages/mathlib/Mathlib/Data/List/Basic.lean, Difficulty: 7.39)
    - List.dropSlice_eq (File: .lake/packages/mathlib/Mathlib/Data/List/Basic.lean, Difficulty: 20.09)
    - List.get_attach (File: .lake/packages/mathlib/Mathlib/Data/List/Basic.lean, Difficulty: 20.09)
  Hard: 21759 theorems
    - List.disjoint_pmap (File: .lake/packages/mathlib/Mathlib/Data/List/Basic.lean, Difficulty: 54.60)
    - List.sizeOf_dropSlice_lt (File: .lake/packages/mathlib/Mathlib/Data/List/Basic.lean, Difficulty: 8886110.52)
    - List.mem_map_swap (File: .lake/packages/mathlib/Mathlib/Data/List/Basic.lean, Difficulty: 54.60)
  Hard (No proof): 276 theorems
    - IndexType.sum.arg_f.revDerivProjUpdate_rule (File: SciLean/Core/FunctionTransformations/RevDeriv.lean, Difficulty: inf)
    - IndexType.sum.arg_f.revDerivProj_rule (File: SciLean/Core/FunctionTransformations/RevDeriv.lean, Difficulty: inf)
    - SciLean.SciLean.cderiv.arg_dx.cderiv_rule_at (File: SciLean/Core/FunctionTransformations/CDeriv.lean, Difficulty: inf)

Overall Statistics:
Easy: 67590 theorems (34.96%)
Medium: 63838 theorems (33.02%)
Hard: 61633 theorems (31.88%)
Hard (No proof): 276 theorems (0.14%)

Percentile thresholds: Easy <= 2.72, Medium <= 20.09, Hard > 20.09
Using lambda = 0.1
Processing leanprover-community/mathlib4
2024-09-05 00:21:06.334 | DEBUG    | lean_dojo.data_extraction.lean:_to_commit_hash:90 - Querying the commit hash for lean4 v4.8.0
> /data/yingzi_ma/lean_project/ReProver/main.py(1375)main()
   1374                     import ipdb; ipdb.set_trace()
-> 1375                     proofs = retrieve_proof(run_progressive_training, use_fisher, single_repo, curriculum_learning, dynamic_database_json_path, lean_git_repo, lean_git_repo.commit, lambda_value, current_epoch, epochs_per_repo, db)
   1376                     current_epoch += epochs_per_repo

ipdb> s
--Call--
> /data/yingzi_ma/lean_project/ReProver/main.py(1051)retrieve_proof()
   1050
-> 1051 def retrieve_proof(run_progressive_training, use_fisher, single_repo, curriculum_learning, dynamic_database_json_path, repo, sha, lambda_value, current_epoch, epochs_per_repo, db):
   1052     global repos_for_merged_dataset

ipdb> n
> /data/yingzi_ma/lean_project/ReProver/main.py(1054)retrieve_proof()
   1053     # TODO: update comments throughout
-> 1054     """
   1055     This method does the following:

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1097)retrieve_proof()
   1096
-> 1097     if single_repo:
   1098         repos_for_merged_dataset = []

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1098)retrieve_proof()
   1097     if single_repo:
-> 1098         repos_for_merged_dataset = []
   1099

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1100)retrieve_proof()
   1099
-> 1100     if not curriculum_learning:
   1101         add_repo_to_database(dynamic_database_json_path, repo, db)

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1105)retrieve_proof()
   1104     # The user can choose to generate a dataset from the entire dynamic database or a subset of it.
-> 1105     dir_name = repo.url.split("/")[-1] + "_" + sha
   1106     # TODO: don't always do merged_, if we change this then change the if condition in average test accordingly

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1107)retrieve_proof()
   1106     # TODO: don't always do merged_, if we change this then change the if condition in average test accordingly
-> 1107     dst_dir = Path(RAID_DIR) / DATA_DIR / f"merged_with_new_{dir_name}"
   1108     if (repo.url, repo.commit) not in repos_for_merged_dataset:

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1108)retrieve_proof()
   1107     dst_dir = Path(RAID_DIR) / DATA_DIR / f"merged_with_new_{dir_name}"
-> 1108     if (repo.url, repo.commit) not in repos_for_merged_dataset:
   1109         logger.info("Adding repo to repos_for_merged_dataset")

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1109)retrieve_proof()
   1108     if (repo.url, repo.commit) not in repos_for_merged_dataset:
-> 1109         logger.info("Adding repo to repos_for_merged_dataset")
   1110         repos_for_merged_dataset.append((repo.url, repo.commit))

ipdb>
2024-09-05 00:21:45.236 | INFO     | __main__:retrieve_proof:1109 - Adding repo to repos_for_merged_dataset
> /data/yingzi_ma/lean_project/ReProver/main.py(1110)retrieve_proof()
   1109         logger.info("Adding repo to repos_for_merged_dataset")
-> 1110         repos_for_merged_dataset.append((repo.url, repo.commit))
   1111     else:

ipdb>
> /data/yingzi_ma/lean_project/ReProver/main.py(1113)retrieve_proof()
   1112         logger.info("Repo already in repos_for_merged_dataset")
-> 1113     db.generate_merged_dataset(dst_dir, repos_for_merged_dataset)
   1114     # TODO: reduce repition later with all path

ipdb>
2024-09-05 00:21:47.105 | INFO     | dynamic_database:generate_merged_dataset:399 - Merging selected repositories in the database:
2024-09-05 00:21:47.105 | INFO     | dynamic_database:generate_merged_dataset:401 -   - https://github.com/leanprover-community/mathlib4 (commit: 2b29e73438e240a427bcecc7c0fe19306beb1310)
^CTraceback (most recent call last):
  File "/data/yingzi_ma/lean_project/ReProver/main.py", line 1435, in <module>
    main()
  File "/data/yingzi_ma/lean_project/ReProver/main.py", line 1375, in main
    proofs = retrieve_proof(run_progressive_training, use_fisher, single_repo, curriculum_learning, dynamic_database_json_path, lean_git_repo, lean_git_repo.commit, lambda_value, current_epoch, epochs_per_repo, db)
  File "/data/yingzi_ma/lean_project/ReProver/main.py", line 1113, in retrieve_proof
    db.generate_merged_dataset(dst_dir, repos_for_merged_dataset)
  File "/data/yingzi_ma/lean_project/ReProver/dynamic_database.py", line 409, in generate_merged_dataset
    if key not in all_theorems or repo.metadata["date_processed"] > all_theorems[key][1]:
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/pathlib.py", line 668, in __hash__
    def __hash__(self):
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/bdb.py", line 92, in trace_dispatch
    return self.dispatch_call(frame, arg)
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/bdb.py", line 130, in dispatch_call
    if not (self.stop_here(frame) or self.break_anywhere(frame)):
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/IPython/core/debugger.py", line 806, in break_anywhere
    sup = super().break_anywhere(frame)
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/bdb.py", line 254, in break_anywhere
    return self.canonic(frame.f_code.co_filename) in self.breaks
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/bdb.py", line 49, in canonic
    canonic = self.fncache.get(filename)
KeyboardInterrupt

If you suspect this is an IPython 8.12.3 bug, please report it at:
    https://github.com/ipython/ipython/issues
or send an email to the mailing list at ipython-dev@python.org

You can print a more detailed traceback right now with "%tb", or use "%debug"
to interactively debug it.

Extra-detailed tracebacks for bug-reporting purposes can be enabled via:
    %config Application.verbose_crash=True

^Z
[6]+  Stopped                 bash run_code.sh
(base) yingzi_ma@cais-login-0:~/lean_project/ReProver$ bash run_code.sh
Script executed from: /data/yingzi_ma/lean_project/ReProver
^CTraceback (most recent call last):
  File "/data/yingzi_ma/lean_project/ReProver/main.py", line 19, in <module>
    from prover import evaluate
  File "/data/yingzi_ma/lean_project/ReProver/prover/evaluate.py", line 15, in <module>
    from common import set_logger
  File "/data/yingzi_ma/lean_project/ReProver/common.py", line 6, in <module>
    import torch
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/__init__.py", line 2143, in <module>
    from . import _meta_registrations
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/_meta_registrations.py", line 9, in <module>
    from torch._decomp import (
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/_decomp/__init__.py", line 245, in <module>
    import torch._decomp.decompositions
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/_decomp/decompositions.py", line 12, in <module>
    import torch._prims as prims
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/_prims/__init__.py", line 504, in <module>
    abs = _make_elementwise_unary_prim(
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/_prims/__init__.py", line 472, in _make_elementwise_unary_prim
    return _make_prim(
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/_prims/__init__.py", line 320, in _make_prim
    prim_def = torch.library.custom_op(
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/_library/custom_ops.py", line 142, in custom_op
    return inner(fn)
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/_library/custom_ops.py", line 123, in inner
    result = CustomOpDef(namespace, opname, schema_str, fn)
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/_library/custom_ops.py", line 169, in __init__
    self._register_to_dispatcher()
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/_library/custom_ops.py", line 473, in _register_to_dispatcher
    lib._register_fake(self._name, fake_impl, _stacklevel=4)
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/library.py", line 135, in _register_fake
    source = torch._library.utils.get_source(_stacklevel + 1)
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/site-packages/torch/_library/utils.py", line 42, in get_source
    frame = inspect.getframeinfo(sys._getframe(stacklevel))
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/inspect.py", line 1624, in getframeinfo
    lines, lnum = findsource(frame)
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/inspect.py", line 952, in findsource
    module = getmodule(object, file)
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/inspect.py", line 875, in getmodule
    f = getabsfile(module)
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/inspect.py", line 844, in getabsfile
    _filename = getsourcefile(object) or getfile(object)
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/inspect.py", line 826, in getsourcefile
    if os.path.exists(filename):
  File "/data/yingzi_ma/miniconda3/envs/ReProver/lib/python3.10/genericpath.py", line 19, in exists
    os.stat(path)
KeyboardInterrupt

(base) yingzi_ma@cais-login-0:~/lean_project/ReProver$ nvidia-smi
Command 'nvidia-smi' not found, but can be installed with:
apt install nvidia-utils-390         # version 390.157-0ubuntu0.22.04.2, or
apt install nvidia-utils-418-server  # version 418.226.00-0ubuntu5~0.22.04.1
apt install nvidia-utils-450-server  # version 450.248.02-0ubuntu0.22.04.1
apt install nvidia-utils-470         # version 470.256.02-0ubuntu0.22.04.1
apt install nvidia-utils-470-server  # version 470.256.02-0ubuntu0.22.04.1
apt install nvidia-utils-535         # version 535.183.01-0ubuntu0.22.04.1
apt install nvidia-utils-550-server  # version 550.90.07-0ubuntu0.22.04.1
apt install nvidia-utils-510         # version 510.60.02-0ubuntu1
apt install nvidia-utils-510-server  # version 510.47.03-0ubuntu3
apt install nvidia-utils-535-server  # version 535.183.06-0ubuntu0.22.04.1
apt install nvidia-utils-545         # version 545.29.06-0ubuntu0.22.04.2
apt install nvidia-utils-550         # version 550.107.02-0ubuntu0.22.04.1
Ask your administrator to install one of them.
(base) yingzi_ma@cais-login-0:~/lean_project/ReProver$ srun --partition=compute --gpus=4 --nodes=1 --time=2-00:00:00 --pty /bin/bash
srun: job 20562 queued and waiting for resources

